
UART1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005d40  080001d8  080001d8  000101d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08005f18  08005f18  00015f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f40  08005f40  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f48  08005f48  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f4c  08005f4c  00015f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08005f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000200  20000020  08005f70  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000220  08005f70  00020220  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fecd  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f25  00000000  00000000  0002ff1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000fd0  00000000  00000000  00031e48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ed8  00000000  00000000  00032e18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001e229  00000000  00000000  00033cf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000c0d4  00000000  00000000  00051f19  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5183  00000000  00000000  0005dfed  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00123170  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000042f0  00000000  00000000  001231ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	20000020 	.word	0x20000020
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08005f00 	.word	0x08005f00

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000024 	.word	0x20000024
 8000214:	08005f00 	.word	0x08005f00

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b972 	b.w	8000514 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	4604      	mov	r4, r0
 8000250:	4688      	mov	r8, r1
 8000252:	2b00      	cmp	r3, #0
 8000254:	d14b      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000256:	428a      	cmp	r2, r1
 8000258:	4615      	mov	r5, r2
 800025a:	d967      	bls.n	800032c <__udivmoddi4+0xe4>
 800025c:	fab2 f282 	clz	r2, r2
 8000260:	b14a      	cbz	r2, 8000276 <__udivmoddi4+0x2e>
 8000262:	f1c2 0720 	rsb	r7, r2, #32
 8000266:	fa01 f302 	lsl.w	r3, r1, r2
 800026a:	fa20 f707 	lsr.w	r7, r0, r7
 800026e:	4095      	lsls	r5, r2
 8000270:	ea47 0803 	orr.w	r8, r7, r3
 8000274:	4094      	lsls	r4, r2
 8000276:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800027a:	0c23      	lsrs	r3, r4, #16
 800027c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000280:	fa1f fc85 	uxth.w	ip, r5
 8000284:	fb0e 8817 	mls	r8, lr, r7, r8
 8000288:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028c:	fb07 f10c 	mul.w	r1, r7, ip
 8000290:	4299      	cmp	r1, r3
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x60>
 8000294:	18eb      	adds	r3, r5, r3
 8000296:	f107 30ff 	add.w	r0, r7, #4294967295
 800029a:	f080 811b 	bcs.w	80004d4 <__udivmoddi4+0x28c>
 800029e:	4299      	cmp	r1, r3
 80002a0:	f240 8118 	bls.w	80004d4 <__udivmoddi4+0x28c>
 80002a4:	3f02      	subs	r7, #2
 80002a6:	442b      	add	r3, r5
 80002a8:	1a5b      	subs	r3, r3, r1
 80002aa:	b2a4      	uxth	r4, r4
 80002ac:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002b4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002bc:	45a4      	cmp	ip, r4
 80002be:	d909      	bls.n	80002d4 <__udivmoddi4+0x8c>
 80002c0:	192c      	adds	r4, r5, r4
 80002c2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c6:	f080 8107 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002ca:	45a4      	cmp	ip, r4
 80002cc:	f240 8104 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002d0:	3802      	subs	r0, #2
 80002d2:	442c      	add	r4, r5
 80002d4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002d8:	eba4 040c 	sub.w	r4, r4, ip
 80002dc:	2700      	movs	r7, #0
 80002de:	b11e      	cbz	r6, 80002e8 <__udivmoddi4+0xa0>
 80002e0:	40d4      	lsrs	r4, r2
 80002e2:	2300      	movs	r3, #0
 80002e4:	e9c6 4300 	strd	r4, r3, [r6]
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d909      	bls.n	8000306 <__udivmoddi4+0xbe>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80eb 	beq.w	80004ce <__udivmoddi4+0x286>
 80002f8:	2700      	movs	r7, #0
 80002fa:	e9c6 0100 	strd	r0, r1, [r6]
 80002fe:	4638      	mov	r0, r7
 8000300:	4639      	mov	r1, r7
 8000302:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000306:	fab3 f783 	clz	r7, r3
 800030a:	2f00      	cmp	r7, #0
 800030c:	d147      	bne.n	800039e <__udivmoddi4+0x156>
 800030e:	428b      	cmp	r3, r1
 8000310:	d302      	bcc.n	8000318 <__udivmoddi4+0xd0>
 8000312:	4282      	cmp	r2, r0
 8000314:	f200 80fa 	bhi.w	800050c <__udivmoddi4+0x2c4>
 8000318:	1a84      	subs	r4, r0, r2
 800031a:	eb61 0303 	sbc.w	r3, r1, r3
 800031e:	2001      	movs	r0, #1
 8000320:	4698      	mov	r8, r3
 8000322:	2e00      	cmp	r6, #0
 8000324:	d0e0      	beq.n	80002e8 <__udivmoddi4+0xa0>
 8000326:	e9c6 4800 	strd	r4, r8, [r6]
 800032a:	e7dd      	b.n	80002e8 <__udivmoddi4+0xa0>
 800032c:	b902      	cbnz	r2, 8000330 <__udivmoddi4+0xe8>
 800032e:	deff      	udf	#255	; 0xff
 8000330:	fab2 f282 	clz	r2, r2
 8000334:	2a00      	cmp	r2, #0
 8000336:	f040 808f 	bne.w	8000458 <__udivmoddi4+0x210>
 800033a:	1b49      	subs	r1, r1, r5
 800033c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000340:	fa1f f885 	uxth.w	r8, r5
 8000344:	2701      	movs	r7, #1
 8000346:	fbb1 fcfe 	udiv	ip, r1, lr
 800034a:	0c23      	lsrs	r3, r4, #16
 800034c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000350:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000354:	fb08 f10c 	mul.w	r1, r8, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d907      	bls.n	800036c <__udivmoddi4+0x124>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4299      	cmp	r1, r3
 8000366:	f200 80cd 	bhi.w	8000504 <__udivmoddi4+0x2bc>
 800036a:	4684      	mov	ip, r0
 800036c:	1a59      	subs	r1, r3, r1
 800036e:	b2a3      	uxth	r3, r4
 8000370:	fbb1 f0fe 	udiv	r0, r1, lr
 8000374:	fb0e 1410 	mls	r4, lr, r0, r1
 8000378:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800037c:	fb08 f800 	mul.w	r8, r8, r0
 8000380:	45a0      	cmp	r8, r4
 8000382:	d907      	bls.n	8000394 <__udivmoddi4+0x14c>
 8000384:	192c      	adds	r4, r5, r4
 8000386:	f100 33ff 	add.w	r3, r0, #4294967295
 800038a:	d202      	bcs.n	8000392 <__udivmoddi4+0x14a>
 800038c:	45a0      	cmp	r8, r4
 800038e:	f200 80b6 	bhi.w	80004fe <__udivmoddi4+0x2b6>
 8000392:	4618      	mov	r0, r3
 8000394:	eba4 0408 	sub.w	r4, r4, r8
 8000398:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800039c:	e79f      	b.n	80002de <__udivmoddi4+0x96>
 800039e:	f1c7 0c20 	rsb	ip, r7, #32
 80003a2:	40bb      	lsls	r3, r7
 80003a4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003a8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003ac:	fa01 f407 	lsl.w	r4, r1, r7
 80003b0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003b4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003b8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003bc:	4325      	orrs	r5, r4
 80003be:	fbb3 f9f8 	udiv	r9, r3, r8
 80003c2:	0c2c      	lsrs	r4, r5, #16
 80003c4:	fb08 3319 	mls	r3, r8, r9, r3
 80003c8:	fa1f fa8e 	uxth.w	sl, lr
 80003cc:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d0:	fb09 f40a 	mul.w	r4, r9, sl
 80003d4:	429c      	cmp	r4, r3
 80003d6:	fa02 f207 	lsl.w	r2, r2, r7
 80003da:	fa00 f107 	lsl.w	r1, r0, r7
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1e 0303 	adds.w	r3, lr, r3
 80003e4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003e8:	f080 8087 	bcs.w	80004fa <__udivmoddi4+0x2b2>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f240 8084 	bls.w	80004fa <__udivmoddi4+0x2b2>
 80003f2:	f1a9 0902 	sub.w	r9, r9, #2
 80003f6:	4473      	add	r3, lr
 80003f8:	1b1b      	subs	r3, r3, r4
 80003fa:	b2ad      	uxth	r5, r5
 80003fc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000400:	fb08 3310 	mls	r3, r8, r0, r3
 8000404:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000408:	fb00 fa0a 	mul.w	sl, r0, sl
 800040c:	45a2      	cmp	sl, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1e 0404 	adds.w	r4, lr, r4
 8000414:	f100 33ff 	add.w	r3, r0, #4294967295
 8000418:	d26b      	bcs.n	80004f2 <__udivmoddi4+0x2aa>
 800041a:	45a2      	cmp	sl, r4
 800041c:	d969      	bls.n	80004f2 <__udivmoddi4+0x2aa>
 800041e:	3802      	subs	r0, #2
 8000420:	4474      	add	r4, lr
 8000422:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000426:	fba0 8902 	umull	r8, r9, r0, r2
 800042a:	eba4 040a 	sub.w	r4, r4, sl
 800042e:	454c      	cmp	r4, r9
 8000430:	46c2      	mov	sl, r8
 8000432:	464b      	mov	r3, r9
 8000434:	d354      	bcc.n	80004e0 <__udivmoddi4+0x298>
 8000436:	d051      	beq.n	80004dc <__udivmoddi4+0x294>
 8000438:	2e00      	cmp	r6, #0
 800043a:	d069      	beq.n	8000510 <__udivmoddi4+0x2c8>
 800043c:	ebb1 050a 	subs.w	r5, r1, sl
 8000440:	eb64 0403 	sbc.w	r4, r4, r3
 8000444:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000448:	40fd      	lsrs	r5, r7
 800044a:	40fc      	lsrs	r4, r7
 800044c:	ea4c 0505 	orr.w	r5, ip, r5
 8000450:	e9c6 5400 	strd	r5, r4, [r6]
 8000454:	2700      	movs	r7, #0
 8000456:	e747      	b.n	80002e8 <__udivmoddi4+0xa0>
 8000458:	f1c2 0320 	rsb	r3, r2, #32
 800045c:	fa20 f703 	lsr.w	r7, r0, r3
 8000460:	4095      	lsls	r5, r2
 8000462:	fa01 f002 	lsl.w	r0, r1, r2
 8000466:	fa21 f303 	lsr.w	r3, r1, r3
 800046a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800046e:	4338      	orrs	r0, r7
 8000470:	0c01      	lsrs	r1, r0, #16
 8000472:	fbb3 f7fe 	udiv	r7, r3, lr
 8000476:	fa1f f885 	uxth.w	r8, r5
 800047a:	fb0e 3317 	mls	r3, lr, r7, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb07 f308 	mul.w	r3, r7, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d907      	bls.n	800049e <__udivmoddi4+0x256>
 800048e:	1869      	adds	r1, r5, r1
 8000490:	f107 3cff 	add.w	ip, r7, #4294967295
 8000494:	d22f      	bcs.n	80004f6 <__udivmoddi4+0x2ae>
 8000496:	428b      	cmp	r3, r1
 8000498:	d92d      	bls.n	80004f6 <__udivmoddi4+0x2ae>
 800049a:	3f02      	subs	r7, #2
 800049c:	4429      	add	r1, r5
 800049e:	1acb      	subs	r3, r1, r3
 80004a0:	b281      	uxth	r1, r0
 80004a2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004a6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004aa:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ae:	fb00 f308 	mul.w	r3, r0, r8
 80004b2:	428b      	cmp	r3, r1
 80004b4:	d907      	bls.n	80004c6 <__udivmoddi4+0x27e>
 80004b6:	1869      	adds	r1, r5, r1
 80004b8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004bc:	d217      	bcs.n	80004ee <__udivmoddi4+0x2a6>
 80004be:	428b      	cmp	r3, r1
 80004c0:	d915      	bls.n	80004ee <__udivmoddi4+0x2a6>
 80004c2:	3802      	subs	r0, #2
 80004c4:	4429      	add	r1, r5
 80004c6:	1ac9      	subs	r1, r1, r3
 80004c8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004cc:	e73b      	b.n	8000346 <__udivmoddi4+0xfe>
 80004ce:	4637      	mov	r7, r6
 80004d0:	4630      	mov	r0, r6
 80004d2:	e709      	b.n	80002e8 <__udivmoddi4+0xa0>
 80004d4:	4607      	mov	r7, r0
 80004d6:	e6e7      	b.n	80002a8 <__udivmoddi4+0x60>
 80004d8:	4618      	mov	r0, r3
 80004da:	e6fb      	b.n	80002d4 <__udivmoddi4+0x8c>
 80004dc:	4541      	cmp	r1, r8
 80004de:	d2ab      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004e4:	eb69 020e 	sbc.w	r2, r9, lr
 80004e8:	3801      	subs	r0, #1
 80004ea:	4613      	mov	r3, r2
 80004ec:	e7a4      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004ee:	4660      	mov	r0, ip
 80004f0:	e7e9      	b.n	80004c6 <__udivmoddi4+0x27e>
 80004f2:	4618      	mov	r0, r3
 80004f4:	e795      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f6:	4667      	mov	r7, ip
 80004f8:	e7d1      	b.n	800049e <__udivmoddi4+0x256>
 80004fa:	4681      	mov	r9, r0
 80004fc:	e77c      	b.n	80003f8 <__udivmoddi4+0x1b0>
 80004fe:	3802      	subs	r0, #2
 8000500:	442c      	add	r4, r5
 8000502:	e747      	b.n	8000394 <__udivmoddi4+0x14c>
 8000504:	f1ac 0c02 	sub.w	ip, ip, #2
 8000508:	442b      	add	r3, r5
 800050a:	e72f      	b.n	800036c <__udivmoddi4+0x124>
 800050c:	4638      	mov	r0, r7
 800050e:	e708      	b.n	8000322 <__udivmoddi4+0xda>
 8000510:	4637      	mov	r7, r6
 8000512:	e6e9      	b.n	80002e8 <__udivmoddi4+0xa0>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f001 fa27 	bl	800196e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f896 	bl	8000650 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 fb0e 	bl	8000b44 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000528:	f000 fa74 	bl	8000a14 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 800052c:	f000 f908 	bl	8000740 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000530:	f000 f986 	bl	8000840 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000534:	f000 fa06 	bl	8000944 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8000538:	f000 fab8 	bl	8000aac <MX_USART2_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 800053c:	f000 f8ec 	bl	8000718 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_1);
 8000540:	2100      	movs	r1, #0
 8000542:	4832      	ldr	r0, [pc, #200]	; (800060c <main+0xf4>)
 8000544:	f002 fd88 	bl	8003058 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_2);
 8000548:	2104      	movs	r1, #4
 800054a:	4830      	ldr	r0, [pc, #192]	; (800060c <main+0xf4>)
 800054c:	f002 fd84 	bl	8003058 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_3);
 8000550:	2108      	movs	r1, #8
 8000552:	482e      	ldr	r0, [pc, #184]	; (800060c <main+0xf4>)
 8000554:	f002 fd80 	bl	8003058 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim2,TIM_CHANNEL_4);
 8000558:	210c      	movs	r1, #12
 800055a:	482c      	ldr	r0, [pc, #176]	; (800060c <main+0xf4>)
 800055c:	f002 fd7c 	bl	8003058 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_1);
 8000560:	2100      	movs	r1, #0
 8000562:	482b      	ldr	r0, [pc, #172]	; (8000610 <main+0xf8>)
 8000564:	f002 fd78 	bl	8003058 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_2);
 8000568:	2104      	movs	r1, #4
 800056a:	4829      	ldr	r0, [pc, #164]	; (8000610 <main+0xf8>)
 800056c:	f002 fd74 	bl	8003058 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_3);
 8000570:	2108      	movs	r1, #8
 8000572:	4827      	ldr	r0, [pc, #156]	; (8000610 <main+0xf8>)
 8000574:	f002 fd70 	bl	8003058 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim3,TIM_CHANNEL_4);
 8000578:	210c      	movs	r1, #12
 800057a:	4825      	ldr	r0, [pc, #148]	; (8000610 <main+0xf8>)
 800057c:	f002 fd6c 	bl	8003058 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_1);
 8000580:	2100      	movs	r1, #0
 8000582:	4824      	ldr	r0, [pc, #144]	; (8000614 <main+0xfc>)
 8000584:	f002 fd68 	bl	8003058 <HAL_TIM_PWM_Start_IT>
  HAL_TIM_PWM_Start_IT(&htim4,TIM_CHANNEL_2);
 8000588:	2104      	movs	r1, #4
 800058a:	4822      	ldr	r0, [pc, #136]	; (8000614 <main+0xfc>)
 800058c:	f002 fd64 	bl	8003058 <HAL_TIM_PWM_Start_IT>
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, pwm_compare1);
 8000590:	4b21      	ldr	r3, [pc, #132]	; (8000618 <main+0x100>)
 8000592:	881a      	ldrh	r2, [r3, #0]
 8000594:	4b1d      	ldr	r3, [pc, #116]	; (800060c <main+0xf4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwm_compare2);
 800059a:	4b20      	ldr	r3, [pc, #128]	; (800061c <main+0x104>)
 800059c:	881a      	ldrh	r2, [r3, #0]
 800059e:	4b1b      	ldr	r3, [pc, #108]	; (800060c <main+0xf4>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, pwm_compare3);
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <main+0x108>)
 80005a6:	881a      	ldrh	r2, [r3, #0]
 80005a8:	4b18      	ldr	r3, [pc, #96]	; (800060c <main+0xf4>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, pwm_compare6);
 80005ae:	4b1d      	ldr	r3, [pc, #116]	; (8000624 <main+0x10c>)
 80005b0:	881a      	ldrh	r2, [r3, #0]
 80005b2:	4b16      	ldr	r3, [pc, #88]	; (800060c <main+0xf4>)
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, pwm_compare4);
 80005b8:	4b1b      	ldr	r3, [pc, #108]	; (8000628 <main+0x110>)
 80005ba:	881a      	ldrh	r2, [r3, #0]
 80005bc:	4b14      	ldr	r3, [pc, #80]	; (8000610 <main+0xf8>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, pwm_compare5);
 80005c2:	4b1a      	ldr	r3, [pc, #104]	; (800062c <main+0x114>)
 80005c4:	881a      	ldrh	r2, [r3, #0]
 80005c6:	4b12      	ldr	r3, [pc, #72]	; (8000610 <main+0xf8>)
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwm_compare9);
 80005cc:	4b18      	ldr	r3, [pc, #96]	; (8000630 <main+0x118>)
 80005ce:	881a      	ldrh	r2, [r3, #0]
 80005d0:	4b0f      	ldr	r3, [pc, #60]	; (8000610 <main+0xf8>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	63da      	str	r2, [r3, #60]	; 0x3c
  __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, pwm_compare10);
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <main+0x11c>)
 80005d8:	881a      	ldrh	r2, [r3, #0]
 80005da:	4b0d      	ldr	r3, [pc, #52]	; (8000610 <main+0xf8>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	641a      	str	r2, [r3, #64]	; 0x40
  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwm_compare7);
 80005e0:	4b15      	ldr	r3, [pc, #84]	; (8000638 <main+0x120>)
 80005e2:	881a      	ldrh	r2, [r3, #0]
 80005e4:	4b0b      	ldr	r3, [pc, #44]	; (8000614 <main+0xfc>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, pwm_compare8);
 80005ea:	4b14      	ldr	r3, [pc, #80]	; (800063c <main+0x124>)
 80005ec:	881a      	ldrh	r2, [r3, #0]
 80005ee:	4b09      	ldr	r3, [pc, #36]	; (8000614 <main+0xfc>)
 80005f0:	681b      	ldr	r3, [r3, #0]
 80005f2:	639a      	str	r2, [r3, #56]	; 0x38
  HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer, 1);//HAL库中接收中断函数，内部开启了中断，并将数据存储在aRxBuffer，现在在aRxBuffer就缓存一个Byte，该函数只有接收完才会调用回调函数
 80005f4:	2201      	movs	r2, #1
 80005f6:	4912      	ldr	r1, [pc, #72]	; (8000640 <main+0x128>)
 80005f8:	4812      	ldr	r0, [pc, #72]	; (8000644 <main+0x12c>)
 80005fa:	f003 fbd3 	bl	8003da4 <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, (uint8_t *)aRxBuffer2, 1);
 80005fe:	2201      	movs	r2, #1
 8000600:	4911      	ldr	r1, [pc, #68]	; (8000648 <main+0x130>)
 8000602:	4812      	ldr	r0, [pc, #72]	; (800064c <main+0x134>)
 8000604:	f003 fbce 	bl	8003da4 <HAL_UART_Receive_IT>
 
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000608:	e7fe      	b.n	8000608 <main+0xf0>
 800060a:	bf00      	nop
 800060c:	20000150 	.word	0x20000150
 8000610:	20000080 	.word	0x20000080
 8000614:	20000040 	.word	0x20000040
 8000618:	20000000 	.word	0x20000000
 800061c:	20000002 	.word	0x20000002
 8000620:	20000004 	.word	0x20000004
 8000624:	20000006 	.word	0x20000006
 8000628:	20000008 	.word	0x20000008
 800062c:	2000000a 	.word	0x2000000a
 8000630:	2000000c 	.word	0x2000000c
 8000634:	2000000e 	.word	0x2000000e
 8000638:	20000010 	.word	0x20000010
 800063c:	20000012 	.word	0x20000012
 8000640:	2000014c 	.word	0x2000014c
 8000644:	200000c0 	.word	0x200000c0
 8000648:	2000003c 	.word	0x2000003c
 800064c:	20000190 	.word	0x20000190

08000650 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b0a4      	sub	sp, #144	; 0x90
 8000654:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000656:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800065a:	2238      	movs	r2, #56	; 0x38
 800065c:	2100      	movs	r1, #0
 800065e:	4618      	mov	r0, r3
 8000660:	f005 fc46 	bl	8005ef0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000664:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000668:	2200      	movs	r2, #0
 800066a:	601a      	str	r2, [r3, #0]
 800066c:	605a      	str	r2, [r3, #4]
 800066e:	609a      	str	r2, [r3, #8]
 8000670:	60da      	str	r2, [r3, #12]
 8000672:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2244      	movs	r2, #68	; 0x44
 8000678:	2100      	movs	r1, #0
 800067a:	4618      	mov	r0, r3
 800067c:	f005 fc38 	bl	8005ef0 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000680:	2000      	movs	r0, #0
 8000682:	f001 fcf5 	bl	8002070 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000686:	2301      	movs	r3, #1
 8000688:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800068a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800068e:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000690:	2302      	movs	r3, #2
 8000692:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000694:	2303      	movs	r3, #3
 8000696:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000698:	2306      	movs	r3, #6
 800069a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800069c:	2355      	movs	r3, #85	; 0x55
 800069e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006a8:	2302      	movs	r3, #2
 80006aa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006ae:	2302      	movs	r3, #2
 80006b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80006b8:	4618      	mov	r0, r3
 80006ba:	f001 fd7d 	bl	80021b8 <HAL_RCC_OscConfig>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006c4:	f000 ff2a 	bl	800151c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c8:	230f      	movs	r3, #15
 80006ca:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006cc:	2303      	movs	r3, #3
 80006ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d0:	2300      	movs	r3, #0
 80006d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006d4:	2300      	movs	r3, #0
 80006d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_8) != HAL_OK)
 80006dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80006e0:	2108      	movs	r1, #8
 80006e2:	4618      	mov	r0, r3
 80006e4:	f002 f880 	bl	80027e8 <HAL_RCC_ClockConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006ee:	f000 ff15 	bl	800151c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2;
 80006f2:	2303      	movs	r3, #3
 80006f4:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006fe:	463b      	mov	r3, r7
 8000700:	4618      	mov	r0, r3
 8000702:	f002 fa8d 	bl	8002c20 <HAL_RCCEx_PeriphCLKConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800070c:	f000 ff06 	bl	800151c <Error_Handler>
  }
}
 8000710:	bf00      	nop
 8000712:	3790      	adds	r7, #144	; 0x90
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}

08000718 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USART1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART1_IRQn, 1, 0);
 800071c:	2200      	movs	r2, #0
 800071e:	2101      	movs	r1, #1
 8000720:	2025      	movs	r0, #37	; 0x25
 8000722:	f001 fa70 	bl	8001c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000726:	2025      	movs	r0, #37	; 0x25
 8000728:	f001 fa87 	bl	8001c3a <HAL_NVIC_EnableIRQ>
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 2, 0);
 800072c:	2200      	movs	r2, #0
 800072e:	2102      	movs	r1, #2
 8000730:	2026      	movs	r0, #38	; 0x26
 8000732:	f001 fa68 	bl	8001c06 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000736:	2026      	movs	r0, #38	; 0x26
 8000738:	f001 fa7f 	bl	8001c3a <HAL_NVIC_EnableIRQ>
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000746:	f107 031c 	add.w	r3, r7, #28
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
 800074e:	605a      	str	r2, [r3, #4]
 8000750:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000752:	463b      	mov	r3, r7
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
 8000760:	615a      	str	r2, [r3, #20]
 8000762:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000764:	4b35      	ldr	r3, [pc, #212]	; (800083c <MX_TIM2_Init+0xfc>)
 8000766:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800076a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 170-1;
 800076c:	4b33      	ldr	r3, [pc, #204]	; (800083c <MX_TIM2_Init+0xfc>)
 800076e:	22a9      	movs	r2, #169	; 0xa9
 8000770:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b32      	ldr	r3, [pc, #200]	; (800083c <MX_TIM2_Init+0xfc>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 8000778:	4b30      	ldr	r3, [pc, #192]	; (800083c <MX_TIM2_Init+0xfc>)
 800077a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800077e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b2e      	ldr	r3, [pc, #184]	; (800083c <MX_TIM2_Init+0xfc>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b2d      	ldr	r3, [pc, #180]	; (800083c <MX_TIM2_Init+0xfc>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800078c:	482b      	ldr	r0, [pc, #172]	; (800083c <MX_TIM2_Init+0xfc>)
 800078e:	f002 fc37 	bl	8003000 <HAL_TIM_PWM_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8000798:	f000 fec0 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007a0:	2300      	movs	r3, #0
 80007a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007a4:	f107 031c 	add.w	r3, r7, #28
 80007a8:	4619      	mov	r1, r3
 80007aa:	4824      	ldr	r0, [pc, #144]	; (800083c <MX_TIM2_Init+0xfc>)
 80007ac:	f003 f9b6 	bl	8003b1c <HAL_TIMEx_MasterConfigSynchronization>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	d001      	beq.n	80007ba <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80007b6:	f000 feb1 	bl	800151c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007ba:	2360      	movs	r3, #96	; 0x60
 80007bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007c2:	2300      	movs	r3, #0
 80007c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007ca:	463b      	mov	r3, r7
 80007cc:	2200      	movs	r2, #0
 80007ce:	4619      	mov	r1, r3
 80007d0:	481a      	ldr	r0, [pc, #104]	; (800083c <MX_TIM2_Init+0xfc>)
 80007d2:	f002 fcdf 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80007dc:	f000 fe9e 	bl	800151c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80007e0:	2300      	movs	r3, #0
 80007e2:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007e4:	463b      	mov	r3, r7
 80007e6:	2204      	movs	r2, #4
 80007e8:	4619      	mov	r1, r3
 80007ea:	4814      	ldr	r0, [pc, #80]	; (800083c <MX_TIM2_Init+0xfc>)
 80007ec:	f002 fcd2 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 80007f0:	4603      	mov	r3, r0
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d001      	beq.n	80007fa <MX_TIM2_Init+0xba>
  {
    Error_Handler();
 80007f6:	f000 fe91 	bl	800151c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007fe:	463b      	mov	r3, r7
 8000800:	2208      	movs	r2, #8
 8000802:	4619      	mov	r1, r3
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_TIM2_Init+0xfc>)
 8000806:	f002 fcc5 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000810:	f000 fe84 	bl	800151c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000818:	463b      	mov	r3, r7
 800081a:	220c      	movs	r2, #12
 800081c:	4619      	mov	r1, r3
 800081e:	4807      	ldr	r0, [pc, #28]	; (800083c <MX_TIM2_Init+0xfc>)
 8000820:	f002 fcb8 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 800082a:	f000 fe77 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800082e:	4803      	ldr	r0, [pc, #12]	; (800083c <MX_TIM2_Init+0xfc>)
 8000830:	f000 fef6 	bl	8001620 <HAL_TIM_MspPostInit>

}
 8000834:	bf00      	nop
 8000836:	3728      	adds	r7, #40	; 0x28
 8000838:	46bd      	mov	sp, r7
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000150 	.word	0x20000150

08000840 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	f107 031c 	add.w	r3, r7, #28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	463b      	mov	r3, r7
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
 8000860:	615a      	str	r2, [r3, #20]
 8000862:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000864:	4b35      	ldr	r3, [pc, #212]	; (800093c <MX_TIM3_Init+0xfc>)
 8000866:	4a36      	ldr	r2, [pc, #216]	; (8000940 <MX_TIM3_Init+0x100>)
 8000868:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 170-1;
 800086a:	4b34      	ldr	r3, [pc, #208]	; (800093c <MX_TIM3_Init+0xfc>)
 800086c:	22a9      	movs	r2, #169	; 0xa9
 800086e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000870:	4b32      	ldr	r3, [pc, #200]	; (800093c <MX_TIM3_Init+0xfc>)
 8000872:	2200      	movs	r2, #0
 8000874:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 8000876:	4b31      	ldr	r3, [pc, #196]	; (800093c <MX_TIM3_Init+0xfc>)
 8000878:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800087c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087e:	4b2f      	ldr	r3, [pc, #188]	; (800093c <MX_TIM3_Init+0xfc>)
 8000880:	2200      	movs	r2, #0
 8000882:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000884:	4b2d      	ldr	r3, [pc, #180]	; (800093c <MX_TIM3_Init+0xfc>)
 8000886:	2200      	movs	r2, #0
 8000888:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800088a:	482c      	ldr	r0, [pc, #176]	; (800093c <MX_TIM3_Init+0xfc>)
 800088c:	f002 fbb8 	bl	8003000 <HAL_TIM_PWM_Init>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM3_Init+0x5a>
  {
    Error_Handler();
 8000896:	f000 fe41 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089a:	2300      	movs	r3, #0
 800089c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	4619      	mov	r1, r3
 80008a8:	4824      	ldr	r0, [pc, #144]	; (800093c <MX_TIM3_Init+0xfc>)
 80008aa:	f003 f937 	bl	8003b1c <HAL_TIMEx_MasterConfigSynchronization>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_TIM3_Init+0x78>
  {
    Error_Handler();
 80008b4:	f000 fe32 	bl	800151c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008b8:	2360      	movs	r3, #96	; 0x60
 80008ba:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80008bc:	2300      	movs	r3, #0
 80008be:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c0:	2300      	movs	r3, #0
 80008c2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c4:	2300      	movs	r3, #0
 80008c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80008c8:	463b      	mov	r3, r7
 80008ca:	2200      	movs	r2, #0
 80008cc:	4619      	mov	r1, r3
 80008ce:	481b      	ldr	r0, [pc, #108]	; (800093c <MX_TIM3_Init+0xfc>)
 80008d0:	f002 fc60 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80008da:	f000 fe1f 	bl	800151c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80008e2:	463b      	mov	r3, r7
 80008e4:	2204      	movs	r2, #4
 80008e6:	4619      	mov	r1, r3
 80008e8:	4814      	ldr	r0, [pc, #80]	; (800093c <MX_TIM3_Init+0xfc>)
 80008ea:	f002 fc53 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d001      	beq.n	80008f8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80008f4:	f000 fe12 	bl	800151c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80008f8:	2300      	movs	r3, #0
 80008fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008fc:	463b      	mov	r3, r7
 80008fe:	2208      	movs	r2, #8
 8000900:	4619      	mov	r1, r3
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <MX_TIM3_Init+0xfc>)
 8000904:	f002 fc46 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 800090e:	f000 fe05 	bl	800151c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8000912:	2300      	movs	r3, #0
 8000914:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000916:	463b      	mov	r3, r7
 8000918:	220c      	movs	r2, #12
 800091a:	4619      	mov	r1, r3
 800091c:	4807      	ldr	r0, [pc, #28]	; (800093c <MX_TIM3_Init+0xfc>)
 800091e:	f002 fc39 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000928:	f000 fdf8 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800092c:	4803      	ldr	r0, [pc, #12]	; (800093c <MX_TIM3_Init+0xfc>)
 800092e:	f000 fe77 	bl	8001620 <HAL_TIM_MspPostInit>

}
 8000932:	bf00      	nop
 8000934:	3728      	adds	r7, #40	; 0x28
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	20000080 	.word	0x20000080
 8000940:	40000400 	.word	0x40000400

08000944 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b08a      	sub	sp, #40	; 0x28
 8000948:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800094a:	f107 031c 	add.w	r3, r7, #28
 800094e:	2200      	movs	r2, #0
 8000950:	601a      	str	r2, [r3, #0]
 8000952:	605a      	str	r2, [r3, #4]
 8000954:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000956:	463b      	mov	r3, r7
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
 800095e:	609a      	str	r2, [r3, #8]
 8000960:	60da      	str	r2, [r3, #12]
 8000962:	611a      	str	r2, [r3, #16]
 8000964:	615a      	str	r2, [r3, #20]
 8000966:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <MX_TIM4_Init+0xc8>)
 800096a:	4a29      	ldr	r2, [pc, #164]	; (8000a10 <MX_TIM4_Init+0xcc>)
 800096c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 170-1;
 800096e:	4b27      	ldr	r3, [pc, #156]	; (8000a0c <MX_TIM4_Init+0xc8>)
 8000970:	22a9      	movs	r2, #169	; 0xa9
 8000972:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000974:	4b25      	ldr	r3, [pc, #148]	; (8000a0c <MX_TIM4_Init+0xc8>)
 8000976:	2200      	movs	r2, #0
 8000978:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 800097a:	4b24      	ldr	r3, [pc, #144]	; (8000a0c <MX_TIM4_Init+0xc8>)
 800097c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000980:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <MX_TIM4_Init+0xc8>)
 8000984:	2200      	movs	r2, #0
 8000986:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000988:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <MX_TIM4_Init+0xc8>)
 800098a:	2200      	movs	r2, #0
 800098c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800098e:	481f      	ldr	r0, [pc, #124]	; (8000a0c <MX_TIM4_Init+0xc8>)
 8000990:	f002 fb36 	bl	8003000 <HAL_TIM_PWM_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800099a:	f000 fdbf 	bl	800151c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a2:	2300      	movs	r3, #0
 80009a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4817      	ldr	r0, [pc, #92]	; (8000a0c <MX_TIM4_Init+0xc8>)
 80009ae:	f003 f8b5 	bl	8003b1c <HAL_TIMEx_MasterConfigSynchronization>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80009b8:	f000 fdb0 	bl	800151c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009bc:	2360      	movs	r3, #96	; 0x60
 80009be:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009c0:	2300      	movs	r3, #0
 80009c2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009c4:	2300      	movs	r3, #0
 80009c6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009cc:	463b      	mov	r3, r7
 80009ce:	2200      	movs	r2, #0
 80009d0:	4619      	mov	r1, r3
 80009d2:	480e      	ldr	r0, [pc, #56]	; (8000a0c <MX_TIM4_Init+0xc8>)
 80009d4:	f002 fbde 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80009de:	f000 fd9d 	bl	800151c <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009e6:	463b      	mov	r3, r7
 80009e8:	2204      	movs	r2, #4
 80009ea:	4619      	mov	r1, r3
 80009ec:	4807      	ldr	r0, [pc, #28]	; (8000a0c <MX_TIM4_Init+0xc8>)
 80009ee:	f002 fbd1 	bl	8003194 <HAL_TIM_PWM_ConfigChannel>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM4_Init+0xb8>
  {
    Error_Handler();
 80009f8:	f000 fd90 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80009fc:	4803      	ldr	r0, [pc, #12]	; (8000a0c <MX_TIM4_Init+0xc8>)
 80009fe:	f000 fe0f 	bl	8001620 <HAL_TIM_MspPostInit>

}
 8000a02:	bf00      	nop
 8000a04:	3728      	adds	r7, #40	; 0x28
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000040 	.word	0x20000040
 8000a10:	40000800 	.word	0x40000800

08000a14 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a18:	4b22      	ldr	r3, [pc, #136]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a1a:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <MX_USART1_UART_Init+0x94>)
 8000a1c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000a1e:	4b21      	ldr	r3, [pc, #132]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a20:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000a24:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a26:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a2c:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a32:	4b1c      	ldr	r3, [pc, #112]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a34:	2200      	movs	r2, #0
 8000a36:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a38:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a3a:	220c      	movs	r2, #12
 8000a3c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a4a:	4b16      	ldr	r3, [pc, #88]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a5c:	4811      	ldr	r0, [pc, #68]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a5e:	f003 f8bb 	bl	8003bd8 <HAL_UART_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a68:	f000 fd58 	bl	800151c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a6c:	2100      	movs	r1, #0
 8000a6e:	480d      	ldr	r0, [pc, #52]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a70:	f005 f935 	bl	8005cde <HAL_UARTEx_SetTxFifoThreshold>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a7a:	f000 fd4f 	bl	800151c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7e:	2100      	movs	r1, #0
 8000a80:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a82:	f005 f96a 	bl	8005d5a <HAL_UARTEx_SetRxFifoThreshold>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a8c:	f000 fd46 	bl	800151c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000a90:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <MX_USART1_UART_Init+0x90>)
 8000a92:	f005 f8eb 	bl	8005c6c <HAL_UARTEx_DisableFifoMode>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000a9c:	f000 fd3e 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aa0:	bf00      	nop
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000c0 	.word	0x200000c0
 8000aa8:	40013800 	.word	0x40013800

08000aac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ab2:	4a23      	ldr	r2, [pc, #140]	; (8000b40 <MX_USART2_UART_Init+0x94>)
 8000ab4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000ab6:	4b21      	ldr	r3, [pc, #132]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ab8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000abc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000abe:	4b1f      	ldr	r3, [pc, #124]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ac4:	4b1d      	ldr	r3, [pc, #116]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000aca:	4b1c      	ldr	r3, [pc, #112]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000acc:	2200      	movs	r2, #0
 8000ace:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ad0:	4b1a      	ldr	r3, [pc, #104]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ad6:	4b19      	ldr	r3, [pc, #100]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000adc:	4b17      	ldr	r3, [pc, #92]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ae2:	4b16      	ldr	r3, [pc, #88]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ae8:	4b14      	ldr	r3, [pc, #80]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000aee:	4b13      	ldr	r3, [pc, #76]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000af4:	4811      	ldr	r0, [pc, #68]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000af6:	f003 f86f 	bl	8003bd8 <HAL_UART_Init>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d001      	beq.n	8000b04 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b00:	f000 fd0c 	bl	800151c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b04:	2100      	movs	r1, #0
 8000b06:	480d      	ldr	r0, [pc, #52]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000b08:	f005 f8e9 	bl	8005cde <HAL_UARTEx_SetTxFifoThreshold>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d001      	beq.n	8000b16 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b12:	f000 fd03 	bl	800151c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b16:	2100      	movs	r1, #0
 8000b18:	4808      	ldr	r0, [pc, #32]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000b1a:	f005 f91e 	bl	8005d5a <HAL_UARTEx_SetRxFifoThreshold>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b24:	f000 fcfa 	bl	800151c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b28:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_USART2_UART_Init+0x90>)
 8000b2a:	f005 f89f 	bl	8005c6c <HAL_UARTEx_DisableFifoMode>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b34:	f000 fcf2 	bl	800151c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b38:	bf00      	nop
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	20000190 	.word	0x20000190
 8000b40:	40004400 	.word	0x40004400

08000b44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	; 0x28
 8000b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b4a:	f107 0314 	add.w	r3, r7, #20
 8000b4e:	2200      	movs	r2, #0
 8000b50:	601a      	str	r2, [r3, #0]
 8000b52:	605a      	str	r2, [r3, #4]
 8000b54:	609a      	str	r2, [r3, #8]
 8000b56:	60da      	str	r2, [r3, #12]
 8000b58:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b5a:	4b30      	ldr	r3, [pc, #192]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b5e:	4a2f      	ldr	r2, [pc, #188]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000b60:	f043 0320 	orr.w	r3, r3, #32
 8000b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b66:	4b2d      	ldr	r3, [pc, #180]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b6a:	f003 0320 	and.w	r3, r3, #32
 8000b6e:	613b      	str	r3, [r7, #16]
 8000b70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b72:	4b2a      	ldr	r3, [pc, #168]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b76:	4a29      	ldr	r2, [pc, #164]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000b78:	f043 0301 	orr.w	r3, r3, #1
 8000b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b7e:	4b27      	ldr	r3, [pc, #156]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b82:	f003 0301 	and.w	r3, r3, #1
 8000b86:	60fb      	str	r3, [r7, #12]
 8000b88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b8a:	4b24      	ldr	r3, [pc, #144]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000b8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b8e:	4a23      	ldr	r2, [pc, #140]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000b90:	f043 0304 	orr.w	r3, r3, #4
 8000b94:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b96:	4b21      	ldr	r3, [pc, #132]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000b98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b9a:	f003 0304 	and.w	r3, r3, #4
 8000b9e:	60bb      	str	r3, [r7, #8]
 8000ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ba2:	4b1e      	ldr	r3, [pc, #120]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ba6:	4a1d      	ldr	r2, [pc, #116]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000ba8:	f043 0302 	orr.w	r3, r3, #2
 8000bac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bae:	4b1b      	ldr	r3, [pc, #108]	; (8000c1c <MX_GPIO_Init+0xd8>)
 8000bb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000bc0:	4817      	ldr	r0, [pc, #92]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000bc2:	f001 fa3d 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000bcc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000bd0:	f001 fa36 	bl	8002040 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB10 PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bd4:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000bd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000be6:	f107 0314 	add.w	r3, r7, #20
 8000bea:	4619      	mov	r1, r3
 8000bec:	480c      	ldr	r0, [pc, #48]	; (8000c20 <MX_GPIO_Init+0xdc>)
 8000bee:	f001 f8a5 	bl	8001d3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000bf2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c00:	2300      	movs	r3, #0
 8000c02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	4619      	mov	r1, r3
 8000c0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0e:	f001 f895 	bl	8001d3c <HAL_GPIO_Init>

}
 8000c12:	bf00      	nop
 8000c14:	3728      	adds	r7, #40	; 0x28
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40021000 	.word	0x40021000
 8000c20:	48000400 	.word	0x48000400

08000c24 <HAL_UART_RxCpltCallback>:
//
//}

//蓝牙通信
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *UartHandle)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b082      	sub	sp, #8
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	 HAL_UART_Transmit(&huart1, ((uint8_t *)aRxBuffer), 1,0xFFFF);
 8000c2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c30:	2201      	movs	r2, #1
 8000c32:	49a5      	ldr	r1, [pc, #660]	; (8000ec8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000c34:	48a5      	ldr	r0, [pc, #660]	; (8000ecc <HAL_UART_RxCpltCallback+0x2a8>)
 8000c36:	f003 f81f 	bl	8003c78 <HAL_UART_Transmit>
	 HAL_UART_Receive_IT(&huart1, (uint8_t *)aRxBuffer, 1);
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	49a2      	ldr	r1, [pc, #648]	; (8000ec8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000c3e:	48a3      	ldr	r0, [pc, #652]	; (8000ecc <HAL_UART_RxCpltCallback+0x2a8>)
 8000c40:	f003 f8b0 	bl	8003da4 <HAL_UART_Receive_IT>
	 switch(aRxBuffer[0]){
 8000c44:	4ba0      	ldr	r3, [pc, #640]	; (8000ec8 <HAL_UART_RxCpltCallback+0x2a4>)
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	3b31      	subs	r3, #49	; 0x31
 8000c4a:	2b26      	cmp	r3, #38	; 0x26
 8000c4c:	f200 821b 	bhi.w	8001086 <HAL_UART_RxCpltCallback+0x462>
 8000c50:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <HAL_UART_RxCpltCallback+0x34>)
 8000c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c56:	bf00      	nop
 8000c58:	08000d39 	.word	0x08000d39
 8000c5c:	08000d15 	.word	0x08000d15
 8000c60:	08000d5b 	.word	0x08000d5b
 8000c64:	08000d7f 	.word	0x08000d7f
 8000c68:	08000da1 	.word	0x08000da1
 8000c6c:	08000dc5 	.word	0x08000dc5
 8000c70:	08000e31 	.word	0x08000e31
 8000c74:	08000e6b 	.word	0x08000e6b
 8000c78:	08001087 	.word	0x08001087
 8000c7c:	08001087 	.word	0x08001087
 8000c80:	08001087 	.word	0x08001087
 8000c84:	08001087 	.word	0x08001087
 8000c88:	08001087 	.word	0x08001087
 8000c8c:	08001087 	.word	0x08001087
 8000c90:	08001087 	.word	0x08001087
 8000c94:	08001087 	.word	0x08001087
 8000c98:	08000de9 	.word	0x08000de9
 8000c9c:	08000e0d 	.word	0x08000e0d
 8000ca0:	08000f71 	.word	0x08000f71
 8000ca4:	08000f89 	.word	0x08000f89
 8000ca8:	08000fa1 	.word	0x08000fa1
 8000cac:	08000fb9 	.word	0x08000fb9
 8000cb0:	08000fd1 	.word	0x08000fd1
 8000cb4:	08000fdf 	.word	0x08000fdf
 8000cb8:	08001005 	.word	0x08001005
 8000cbc:	08001087 	.word	0x08001087
 8000cc0:	08001087 	.word	0x08001087
 8000cc4:	08001087 	.word	0x08001087
 8000cc8:	08001087 	.word	0x08001087
 8000ccc:	08001087 	.word	0x08001087
 8000cd0:	08001087 	.word	0x08001087
 8000cd4:	08000cf5 	.word	0x08000cf5
 8000cd8:	08000d05 	.word	0x08000d05
 8000cdc:	0800102b 	.word	0x0800102b
 8000ce0:	08000ea3 	.word	0x08000ea3
 8000ce4:	08000ef5 	.word	0x08000ef5
 8000ce8:	08000f2b 	.word	0x08000f2b
 8000cec:	08000f4f 	.word	0x08000f4f
 8000cf0:	08000f17 	.word	0x08000f17
	 case 0x50:
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cfa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cfe:	f001 f99f 	bl	8002040 <HAL_GPIO_WritePin>
		 break;
 8000d02:	e1c0      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
	 case 0x51:
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0e:	f001 f997 	bl	8002040 <HAL_GPIO_WritePin>
		 break;
 8000d12:	e1b8      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>

		 //舵机控制
	 case 0x32://PWM1钳子张开
		 pwm_compare1 += 10;
 8000d14:	4b6e      	ldr	r3, [pc, #440]	; (8000ed0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	330a      	adds	r3, #10
 8000d1a:	b29a      	uxth	r2, r3
 8000d1c:	4b6c      	ldr	r3, [pc, #432]	; (8000ed0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000d1e:	801a      	strh	r2, [r3, #0]
		 if(pwm_compare1 <= 2400)
 8000d20:	4b6b      	ldr	r3, [pc, #428]	; (8000ed0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000d22:	881b      	ldrh	r3, [r3, #0]
 8000d24:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000d28:	f200 8192 	bhi.w	8001050 <HAL_UART_RxCpltCallback+0x42c>
		 {
			 __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, pwm_compare1);
 8000d2c:	4b68      	ldr	r3, [pc, #416]	; (8000ed0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000d2e:	881a      	ldrh	r2, [r3, #0]
 8000d30:	4b68      	ldr	r3, [pc, #416]	; (8000ed4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	635a      	str	r2, [r3, #52]	; 0x34
		 }
		 break;
 8000d36:	e18b      	b.n	8001050 <HAL_UART_RxCpltCallback+0x42c>

	 case 0x31://钳子收缩
		 pwm_compare1 -= 10;
 8000d38:	4b65      	ldr	r3, [pc, #404]	; (8000ed0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000d3a:	881b      	ldrh	r3, [r3, #0]
 8000d3c:	3b0a      	subs	r3, #10
 8000d3e:	b29a      	uxth	r2, r3
 8000d40:	4b63      	ldr	r3, [pc, #396]	; (8000ed0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000d42:	801a      	strh	r2, [r3, #0]
		 if(pwm_compare1 >= 86)
 8000d44:	4b62      	ldr	r3, [pc, #392]	; (8000ed0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000d46:	881b      	ldrh	r3, [r3, #0]
 8000d48:	2b55      	cmp	r3, #85	; 0x55
 8000d4a:	f240 8183 	bls.w	8001054 <HAL_UART_RxCpltCallback+0x430>
		 {
			 __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, pwm_compare1);
 8000d4e:	4b60      	ldr	r3, [pc, #384]	; (8000ed0 <HAL_UART_RxCpltCallback+0x2ac>)
 8000d50:	881a      	ldrh	r2, [r3, #0]
 8000d52:	4b60      	ldr	r3, [pc, #384]	; (8000ed4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	635a      	str	r2, [r3, #52]	; 0x34
		 }
		 break;
 8000d58:	e17c      	b.n	8001054 <HAL_UART_RxCpltCallback+0x430>
	 case 0x33://PWM2前端控制钳子右运动
		 pwm_compare2 += 10;
 8000d5a:	4b5f      	ldr	r3, [pc, #380]	; (8000ed8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	330a      	adds	r3, #10
 8000d60:	b29a      	uxth	r2, r3
 8000d62:	4b5d      	ldr	r3, [pc, #372]	; (8000ed8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000d64:	801a      	strh	r2, [r3, #0]
		 if(pwm_compare2 <= 2400)
 8000d66:	4b5c      	ldr	r3, [pc, #368]	; (8000ed8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000d68:	881b      	ldrh	r3, [r3, #0]
 8000d6a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000d6e:	f200 8173 	bhi.w	8001058 <HAL_UART_RxCpltCallback+0x434>
		 {
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwm_compare2);
 8000d72:	4b59      	ldr	r3, [pc, #356]	; (8000ed8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000d74:	881a      	ldrh	r2, [r3, #0]
 8000d76:	4b57      	ldr	r3, [pc, #348]	; (8000ed4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	639a      	str	r2, [r3, #56]	; 0x38
		 }
		break;
 8000d7c:	e16c      	b.n	8001058 <HAL_UART_RxCpltCallback+0x434>
	 case 0x34://前端控制钳子的左运动
		 pwm_compare2 -= 10;
 8000d7e:	4b56      	ldr	r3, [pc, #344]	; (8000ed8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000d80:	881b      	ldrh	r3, [r3, #0]
 8000d82:	3b0a      	subs	r3, #10
 8000d84:	b29a      	uxth	r2, r3
 8000d86:	4b54      	ldr	r3, [pc, #336]	; (8000ed8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000d88:	801a      	strh	r2, [r3, #0]
		 if(pwm_compare2 >= 60)
 8000d8a:	4b53      	ldr	r3, [pc, #332]	; (8000ed8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000d8c:	881b      	ldrh	r3, [r3, #0]
 8000d8e:	2b3b      	cmp	r3, #59	; 0x3b
 8000d90:	f240 8164 	bls.w	800105c <HAL_UART_RxCpltCallback+0x438>
		 {
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwm_compare2);
 8000d94:	4b50      	ldr	r3, [pc, #320]	; (8000ed8 <HAL_UART_RxCpltCallback+0x2b4>)
 8000d96:	881a      	ldrh	r2, [r3, #0]
 8000d98:	4b4e      	ldr	r3, [pc, #312]	; (8000ed4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	639a      	str	r2, [r3, #56]	; 0x38
		 }
		break;
 8000d9e:	e15d      	b.n	800105c <HAL_UART_RxCpltCallback+0x438>
	 case 0x35://PWM3前端控制钳子的上运动
		 pwm_compare3 += 10;
 8000da0:	4b4e      	ldr	r3, [pc, #312]	; (8000edc <HAL_UART_RxCpltCallback+0x2b8>)
 8000da2:	881b      	ldrh	r3, [r3, #0]
 8000da4:	330a      	adds	r3, #10
 8000da6:	b29a      	uxth	r2, r3
 8000da8:	4b4c      	ldr	r3, [pc, #304]	; (8000edc <HAL_UART_RxCpltCallback+0x2b8>)
 8000daa:	801a      	strh	r2, [r3, #0]
		 if(pwm_compare3 <= 2400)
 8000dac:	4b4b      	ldr	r3, [pc, #300]	; (8000edc <HAL_UART_RxCpltCallback+0x2b8>)
 8000dae:	881b      	ldrh	r3, [r3, #0]
 8000db0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000db4:	f200 8154 	bhi.w	8001060 <HAL_UART_RxCpltCallback+0x43c>
		 {
			 __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, pwm_compare3);
 8000db8:	4b48      	ldr	r3, [pc, #288]	; (8000edc <HAL_UART_RxCpltCallback+0x2b8>)
 8000dba:	881a      	ldrh	r2, [r3, #0]
 8000dbc:	4b45      	ldr	r3, [pc, #276]	; (8000ed4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	63da      	str	r2, [r3, #60]	; 0x3c
		 }
		break;
 8000dc2:	e14d      	b.n	8001060 <HAL_UART_RxCpltCallback+0x43c>
	 case 0x36://前端控制钳子的下运动
		 pwm_compare3 -= 10;
 8000dc4:	4b45      	ldr	r3, [pc, #276]	; (8000edc <HAL_UART_RxCpltCallback+0x2b8>)
 8000dc6:	881b      	ldrh	r3, [r3, #0]
 8000dc8:	3b0a      	subs	r3, #10
 8000dca:	b29a      	uxth	r2, r3
 8000dcc:	4b43      	ldr	r3, [pc, #268]	; (8000edc <HAL_UART_RxCpltCallback+0x2b8>)
 8000dce:	801a      	strh	r2, [r3, #0]
		 if(pwm_compare3 >= 560)
 8000dd0:	4b42      	ldr	r3, [pc, #264]	; (8000edc <HAL_UART_RxCpltCallback+0x2b8>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 8000dd8:	f0c0 8144 	bcc.w	8001064 <HAL_UART_RxCpltCallback+0x440>
		 {
			 __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, pwm_compare3);
 8000ddc:	4b3f      	ldr	r3, [pc, #252]	; (8000edc <HAL_UART_RxCpltCallback+0x2b8>)
 8000dde:	881a      	ldrh	r2, [r3, #0]
 8000de0:	4b3c      	ldr	r3, [pc, #240]	; (8000ed4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	63da      	str	r2, [r3, #60]	; 0x3c

		 }
	     break;
 8000de6:	e13d      	b.n	8001064 <HAL_UART_RxCpltCallback+0x440>
	 case 0x41://PWM6整体右转
		 pwm_compare6 += 20;
 8000de8:	4b3d      	ldr	r3, [pc, #244]	; (8000ee0 <HAL_UART_RxCpltCallback+0x2bc>)
 8000dea:	881b      	ldrh	r3, [r3, #0]
 8000dec:	3314      	adds	r3, #20
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	4b3b      	ldr	r3, [pc, #236]	; (8000ee0 <HAL_UART_RxCpltCallback+0x2bc>)
 8000df2:	801a      	strh	r2, [r3, #0]
		 if(pwm_compare6 <= 2400)
 8000df4:	4b3a      	ldr	r3, [pc, #232]	; (8000ee0 <HAL_UART_RxCpltCallback+0x2bc>)
 8000df6:	881b      	ldrh	r3, [r3, #0]
 8000df8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000dfc:	f200 8134 	bhi.w	8001068 <HAL_UART_RxCpltCallback+0x444>
		 {
			   __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, pwm_compare6);
 8000e00:	4b37      	ldr	r3, [pc, #220]	; (8000ee0 <HAL_UART_RxCpltCallback+0x2bc>)
 8000e02:	881a      	ldrh	r2, [r3, #0]
 8000e04:	4b33      	ldr	r3, [pc, #204]	; (8000ed4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	641a      	str	r2, [r3, #64]	; 0x40
		 }
		break;
 8000e0a:	e12d      	b.n	8001068 <HAL_UART_RxCpltCallback+0x444>
	 case 0x42://整体左转
		 pwm_compare6 -= 20;
 8000e0c:	4b34      	ldr	r3, [pc, #208]	; (8000ee0 <HAL_UART_RxCpltCallback+0x2bc>)
 8000e0e:	881b      	ldrh	r3, [r3, #0]
 8000e10:	3b14      	subs	r3, #20
 8000e12:	b29a      	uxth	r2, r3
 8000e14:	4b32      	ldr	r3, [pc, #200]	; (8000ee0 <HAL_UART_RxCpltCallback+0x2bc>)
 8000e16:	801a      	strh	r2, [r3, #0]
		 if(pwm_compare6 >= 560)
 8000e18:	4b31      	ldr	r3, [pc, #196]	; (8000ee0 <HAL_UART_RxCpltCallback+0x2bc>)
 8000e1a:	881b      	ldrh	r3, [r3, #0]
 8000e1c:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 8000e20:	f0c0 8124 	bcc.w	800106c <HAL_UART_RxCpltCallback+0x448>
		 {
			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, pwm_compare6);
 8000e24:	4b2e      	ldr	r3, [pc, #184]	; (8000ee0 <HAL_UART_RxCpltCallback+0x2bc>)
 8000e26:	881a      	ldrh	r2, [r3, #0]
 8000e28:	4b2a      	ldr	r3, [pc, #168]	; (8000ed4 <HAL_UART_RxCpltCallback+0x2b0>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	641a      	str	r2, [r3, #64]	; 0x40
		 }
		break;
 8000e2e:	e11d      	b.n	800106c <HAL_UART_RxCpltCallback+0x448>
	 case 0x37://PWM4、PWM5 向后缩进
		pwm_compare4 += 20;
 8000e30:	4b2c      	ldr	r3, [pc, #176]	; (8000ee4 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e32:	881b      	ldrh	r3, [r3, #0]
 8000e34:	3314      	adds	r3, #20
 8000e36:	b29a      	uxth	r2, r3
 8000e38:	4b2a      	ldr	r3, [pc, #168]	; (8000ee4 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e3a:	801a      	strh	r2, [r3, #0]
		pwm_compare5 += 20;
 8000e3c:	4b2a      	ldr	r3, [pc, #168]	; (8000ee8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000e3e:	881b      	ldrh	r3, [r3, #0]
 8000e40:	3314      	adds	r3, #20
 8000e42:	b29a      	uxth	r2, r3
 8000e44:	4b28      	ldr	r3, [pc, #160]	; (8000ee8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000e46:	801a      	strh	r2, [r3, #0]
		if(pwm_compare5 <= 2400)
 8000e48:	4b27      	ldr	r3, [pc, #156]	; (8000ee8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000e4a:	881b      	ldrh	r3, [r3, #0]
 8000e4c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000e50:	f200 810e 	bhi.w	8001070 <HAL_UART_RxCpltCallback+0x44c>
		{
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, pwm_compare4);
 8000e54:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e56:	881a      	ldrh	r2, [r3, #0]
 8000e58:	4b24      	ldr	r3, [pc, #144]	; (8000eec <HAL_UART_RxCpltCallback+0x2c8>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, pwm_compare5);
 8000e5e:	4b22      	ldr	r3, [pc, #136]	; (8000ee8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000e60:	881a      	ldrh	r2, [r3, #0]
 8000e62:	4b22      	ldr	r3, [pc, #136]	; (8000eec <HAL_UART_RxCpltCallback+0x2c8>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	639a      	str	r2, [r3, #56]	; 0x38
	    }
		break;
 8000e68:	e102      	b.n	8001070 <HAL_UART_RxCpltCallback+0x44c>

	 case 0x38://向前推进
		 pwm_compare4 -= 20;
 8000e6a:	4b1e      	ldr	r3, [pc, #120]	; (8000ee4 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	3b14      	subs	r3, #20
 8000e70:	b29a      	uxth	r2, r3
 8000e72:	4b1c      	ldr	r3, [pc, #112]	; (8000ee4 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e74:	801a      	strh	r2, [r3, #0]
		 pwm_compare5 -= 20;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000e78:	881b      	ldrh	r3, [r3, #0]
 8000e7a:	3b14      	subs	r3, #20
 8000e7c:	b29a      	uxth	r2, r3
 8000e7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000e80:	801a      	strh	r2, [r3, #0]
		 if(pwm_compare4 >= 60)
 8000e82:	4b18      	ldr	r3, [pc, #96]	; (8000ee4 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e84:	881b      	ldrh	r3, [r3, #0]
 8000e86:	2b3b      	cmp	r3, #59	; 0x3b
 8000e88:	f240 80f4 	bls.w	8001074 <HAL_UART_RxCpltCallback+0x450>
		 {
			 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, pwm_compare4);
 8000e8c:	4b15      	ldr	r3, [pc, #84]	; (8000ee4 <HAL_UART_RxCpltCallback+0x2c0>)
 8000e8e:	881a      	ldrh	r2, [r3, #0]
 8000e90:	4b16      	ldr	r3, [pc, #88]	; (8000eec <HAL_UART_RxCpltCallback+0x2c8>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	635a      	str	r2, [r3, #52]	; 0x34
			 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, pwm_compare5);
 8000e96:	4b14      	ldr	r3, [pc, #80]	; (8000ee8 <HAL_UART_RxCpltCallback+0x2c4>)
 8000e98:	881a      	ldrh	r2, [r3, #0]
 8000e9a:	4b14      	ldr	r3, [pc, #80]	; (8000eec <HAL_UART_RxCpltCallback+0x2c8>)
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
		 }
			break;
 8000ea0:	e0e8      	b.n	8001074 <HAL_UART_RxCpltCallback+0x450>

	 case 0x53://PWM9 摄像头左转
		 pwm_compare9 += 10;
 8000ea2:	4b13      	ldr	r3, [pc, #76]	; (8000ef0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000ea4:	881b      	ldrh	r3, [r3, #0]
 8000ea6:	330a      	adds	r3, #10
 8000ea8:	b29a      	uxth	r2, r3
 8000eaa:	4b11      	ldr	r3, [pc, #68]	; (8000ef0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000eac:	801a      	strh	r2, [r3, #0]
		 if(pwm_compare9 <= 2400)
 8000eae:	4b10      	ldr	r3, [pc, #64]	; (8000ef0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000eb0:	881b      	ldrh	r3, [r3, #0]
 8000eb2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000eb6:	f200 80df 	bhi.w	8001078 <HAL_UART_RxCpltCallback+0x454>
		 {
			 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwm_compare9);
 8000eba:	4b0d      	ldr	r3, [pc, #52]	; (8000ef0 <HAL_UART_RxCpltCallback+0x2cc>)
 8000ebc:	881a      	ldrh	r2, [r3, #0]
 8000ebe:	4b0b      	ldr	r3, [pc, #44]	; (8000eec <HAL_UART_RxCpltCallback+0x2c8>)
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	63da      	str	r2, [r3, #60]	; 0x3c
		 }
		 			 break;
 8000ec4:	e0d8      	b.n	8001078 <HAL_UART_RxCpltCallback+0x454>
 8000ec6:	bf00      	nop
 8000ec8:	2000014c 	.word	0x2000014c
 8000ecc:	200000c0 	.word	0x200000c0
 8000ed0:	20000000 	.word	0x20000000
 8000ed4:	20000150 	.word	0x20000150
 8000ed8:	20000002 	.word	0x20000002
 8000edc:	20000004 	.word	0x20000004
 8000ee0:	20000006 	.word	0x20000006
 8000ee4:	20000008 	.word	0x20000008
 8000ee8:	2000000a 	.word	0x2000000a
 8000eec:	20000080 	.word	0x20000080
 8000ef0:	2000000c 	.word	0x2000000c
	 case 0x54://摄像头右转
		 pwm_compare9 -= 10;
 8000ef4:	4baf      	ldr	r3, [pc, #700]	; (80011b4 <HAL_UART_RxCpltCallback+0x590>)
 8000ef6:	881b      	ldrh	r3, [r3, #0]
 8000ef8:	3b0a      	subs	r3, #10
 8000efa:	b29a      	uxth	r2, r3
 8000efc:	4bad      	ldr	r3, [pc, #692]	; (80011b4 <HAL_UART_RxCpltCallback+0x590>)
 8000efe:	801a      	strh	r2, [r3, #0]
		 if(pwm_compare9 >= 60)
 8000f00:	4bac      	ldr	r3, [pc, #688]	; (80011b4 <HAL_UART_RxCpltCallback+0x590>)
 8000f02:	881b      	ldrh	r3, [r3, #0]
 8000f04:	2b3b      	cmp	r3, #59	; 0x3b
 8000f06:	f240 80b9 	bls.w	800107c <HAL_UART_RxCpltCallback+0x458>
		 {
		 	 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwm_compare9);
 8000f0a:	4baa      	ldr	r3, [pc, #680]	; (80011b4 <HAL_UART_RxCpltCallback+0x590>)
 8000f0c:	881a      	ldrh	r2, [r3, #0]
 8000f0e:	4baa      	ldr	r3, [pc, #680]	; (80011b8 <HAL_UART_RxCpltCallback+0x594>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	63da      	str	r2, [r3, #60]	; 0x3c
		 }
		 			 break;
 8000f14:	e0b2      	b.n	800107c <HAL_UART_RxCpltCallback+0x458>
	 case 0x57:
	 	 pwm_compare9 = 1500;
 8000f16:	4ba7      	ldr	r3, [pc, #668]	; (80011b4 <HAL_UART_RxCpltCallback+0x590>)
 8000f18:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000f1c:	801a      	strh	r2, [r3, #0]
	 	 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwm_compare9);
 8000f1e:	4ba5      	ldr	r3, [pc, #660]	; (80011b4 <HAL_UART_RxCpltCallback+0x590>)
 8000f20:	881a      	ldrh	r2, [r3, #0]
 8000f22:	4ba5      	ldr	r3, [pc, #660]	; (80011b8 <HAL_UART_RxCpltCallback+0x594>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	63da      	str	r2, [r3, #60]	; 0x3c
	 	 break;
 8000f28:	e0ad      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
	 case 0x55://PWM10摄像头向下转
		 pwm_compare10 += 10;
 8000f2a:	4ba4      	ldr	r3, [pc, #656]	; (80011bc <HAL_UART_RxCpltCallback+0x598>)
 8000f2c:	881b      	ldrh	r3, [r3, #0]
 8000f2e:	330a      	adds	r3, #10
 8000f30:	b29a      	uxth	r2, r3
 8000f32:	4ba2      	ldr	r3, [pc, #648]	; (80011bc <HAL_UART_RxCpltCallback+0x598>)
 8000f34:	801a      	strh	r2, [r3, #0]
		 if(pwm_compare10 <= 2400)
 8000f36:	4ba1      	ldr	r3, [pc, #644]	; (80011bc <HAL_UART_RxCpltCallback+0x598>)
 8000f38:	881b      	ldrh	r3, [r3, #0]
 8000f3a:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8000f3e:	f200 809f 	bhi.w	8001080 <HAL_UART_RxCpltCallback+0x45c>
		 {
			 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, pwm_compare10);
 8000f42:	4b9e      	ldr	r3, [pc, #632]	; (80011bc <HAL_UART_RxCpltCallback+0x598>)
 8000f44:	881a      	ldrh	r2, [r3, #0]
 8000f46:	4b9c      	ldr	r3, [pc, #624]	; (80011b8 <HAL_UART_RxCpltCallback+0x594>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	641a      	str	r2, [r3, #64]	; 0x40
	     }
			 break;
 8000f4c:	e098      	b.n	8001080 <HAL_UART_RxCpltCallback+0x45c>
	 case 0x56://摄像头向上转
		 pwm_compare10 -= 10;
 8000f4e:	4b9b      	ldr	r3, [pc, #620]	; (80011bc <HAL_UART_RxCpltCallback+0x598>)
 8000f50:	881b      	ldrh	r3, [r3, #0]
 8000f52:	3b0a      	subs	r3, #10
 8000f54:	b29a      	uxth	r2, r3
 8000f56:	4b99      	ldr	r3, [pc, #612]	; (80011bc <HAL_UART_RxCpltCallback+0x598>)
 8000f58:	801a      	strh	r2, [r3, #0]
		 if(pwm_compare10 >= 60)
 8000f5a:	4b98      	ldr	r3, [pc, #608]	; (80011bc <HAL_UART_RxCpltCallback+0x598>)
 8000f5c:	881b      	ldrh	r3, [r3, #0]
 8000f5e:	2b3b      	cmp	r3, #59	; 0x3b
 8000f60:	f240 8090 	bls.w	8001084 <HAL_UART_RxCpltCallback+0x460>
		 {
			 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, pwm_compare10);
 8000f64:	4b95      	ldr	r3, [pc, #596]	; (80011bc <HAL_UART_RxCpltCallback+0x598>)
 8000f66:	881a      	ldrh	r2, [r3, #0]
 8000f68:	4b93      	ldr	r3, [pc, #588]	; (80011b8 <HAL_UART_RxCpltCallback+0x594>)
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	641a      	str	r2, [r3, #64]	; 0x40
		 }
			 break;
 8000f6e:	e089      	b.n	8001084 <HAL_UART_RxCpltCallback+0x460>

	 case 0x43://前进
		 //IN1<=1; IN2<=0; IN3<=0; IN4<=1;
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3, GPIO_PIN_SET);
 8000f70:	2201      	movs	r2, #1
 8000f72:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8000f76:	4892      	ldr	r0, [pc, #584]	; (80011c0 <HAL_UART_RxCpltCallback+0x59c>)
 8000f78:	f001 f862 	bl	8002040 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2130      	movs	r1, #48	; 0x30
 8000f80:	488f      	ldr	r0, [pc, #572]	; (80011c0 <HAL_UART_RxCpltCallback+0x59c>)
 8000f82:	f001 f85d 	bl	8002040 <HAL_GPIO_WritePin>
		 break;
 8000f86:	e07e      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
	 case 0x44://后退
//			 IN1<=0; IN2<=1; IN3<=1; IN4<=0;
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 8000f88:	2201      	movs	r2, #1
 8000f8a:	2130      	movs	r1, #48	; 0x30
 8000f8c:	488c      	ldr	r0, [pc, #560]	; (80011c0 <HAL_UART_RxCpltCallback+0x59c>)
 8000f8e:	f001 f857 	bl	8002040 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3, GPIO_PIN_RESET);
 8000f92:	2200      	movs	r2, #0
 8000f94:	f44f 6181 	mov.w	r1, #1032	; 0x408
 8000f98:	4889      	ldr	r0, [pc, #548]	; (80011c0 <HAL_UART_RxCpltCallback+0x59c>)
 8000f9a:	f001 f851 	bl	8002040 <HAL_GPIO_WritePin>
		 break;
 8000f9e:	e072      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
	 case 0x45://右转
		 //IN1<=1; IN2<=0; IN3<=1; IN4<=0;
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2118      	movs	r1, #24
 8000fa4:	4886      	ldr	r0, [pc, #536]	; (80011c0 <HAL_UART_RxCpltCallback+0x59c>)
 8000fa6:	f001 f84b 	bl	8002040 <HAL_GPIO_WritePin>
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);
 8000faa:	2200      	movs	r2, #0
 8000fac:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000fb0:	4883      	ldr	r0, [pc, #524]	; (80011c0 <HAL_UART_RxCpltCallback+0x59c>)
 8000fb2:	f001 f845 	bl	8002040 <HAL_GPIO_WritePin>
		break;
 8000fb6:	e066      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
	 case 0x46://左转
		//IN1<=0; IN2<=1; IN3<=0; IN4<=1;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_SET);
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8000fbe:	4880      	ldr	r0, [pc, #512]	; (80011c0 <HAL_UART_RxCpltCallback+0x59c>)
 8000fc0:	f001 f83e 	bl	8002040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	2118      	movs	r1, #24
 8000fc8:	487d      	ldr	r0, [pc, #500]	; (80011c0 <HAL_UART_RxCpltCallback+0x59c>)
 8000fca:	f001 f839 	bl	8002040 <HAL_GPIO_WritePin>
		break;
 8000fce:	e05a      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
	 case 0x47://停止
		//IN1<=0; IN2<=0; IN3<=0; IN4<=0;
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000fd6:	487a      	ldr	r0, [pc, #488]	; (80011c0 <HAL_UART_RxCpltCallback+0x59c>)
 8000fd8:	f001 f832 	bl	8002040 <HAL_GPIO_WritePin>
		break;
 8000fdc:	e053      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>

	 case 0x48://高速
		 pwm_compare7 = 2500;
 8000fde:	4b79      	ldr	r3, [pc, #484]	; (80011c4 <HAL_UART_RxCpltCallback+0x5a0>)
 8000fe0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000fe4:	801a      	strh	r2, [r3, #0]
		 pwm_compare8 = 2500;
 8000fe6:	4b78      	ldr	r3, [pc, #480]	; (80011c8 <HAL_UART_RxCpltCallback+0x5a4>)
 8000fe8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000fec:	801a      	strh	r2, [r3, #0]
		 __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwm_compare7);
 8000fee:	4b75      	ldr	r3, [pc, #468]	; (80011c4 <HAL_UART_RxCpltCallback+0x5a0>)
 8000ff0:	881a      	ldrh	r2, [r3, #0]
 8000ff2:	4b76      	ldr	r3, [pc, #472]	; (80011cc <HAL_UART_RxCpltCallback+0x5a8>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, pwm_compare8);
 8000ff8:	4b73      	ldr	r3, [pc, #460]	; (80011c8 <HAL_UART_RxCpltCallback+0x5a4>)
 8000ffa:	881a      	ldrh	r2, [r3, #0]
 8000ffc:	4b73      	ldr	r3, [pc, #460]	; (80011cc <HAL_UART_RxCpltCallback+0x5a8>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	639a      	str	r2, [r3, #56]	; 0x38
		 break;
 8001002:	e040      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
	 case 0x49://中速
		 pwm_compare7 = 2000;
 8001004:	4b6f      	ldr	r3, [pc, #444]	; (80011c4 <HAL_UART_RxCpltCallback+0x5a0>)
 8001006:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800100a:	801a      	strh	r2, [r3, #0]
		 pwm_compare8 = 2000;
 800100c:	4b6e      	ldr	r3, [pc, #440]	; (80011c8 <HAL_UART_RxCpltCallback+0x5a4>)
 800100e:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001012:	801a      	strh	r2, [r3, #0]
		 __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwm_compare7);
 8001014:	4b6b      	ldr	r3, [pc, #428]	; (80011c4 <HAL_UART_RxCpltCallback+0x5a0>)
 8001016:	881a      	ldrh	r2, [r3, #0]
 8001018:	4b6c      	ldr	r3, [pc, #432]	; (80011cc <HAL_UART_RxCpltCallback+0x5a8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, pwm_compare8);
 800101e:	4b6a      	ldr	r3, [pc, #424]	; (80011c8 <HAL_UART_RxCpltCallback+0x5a4>)
 8001020:	881a      	ldrh	r2, [r3, #0]
 8001022:	4b6a      	ldr	r3, [pc, #424]	; (80011cc <HAL_UART_RxCpltCallback+0x5a8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	639a      	str	r2, [r3, #56]	; 0x38
		 break;
 8001028:	e02d      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>

	 case 0x52://慢速
		 pwm_compare7 = 1500;
 800102a:	4b66      	ldr	r3, [pc, #408]	; (80011c4 <HAL_UART_RxCpltCallback+0x5a0>)
 800102c:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001030:	801a      	strh	r2, [r3, #0]
		 pwm_compare8 = 1500;
 8001032:	4b65      	ldr	r3, [pc, #404]	; (80011c8 <HAL_UART_RxCpltCallback+0x5a4>)
 8001034:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001038:	801a      	strh	r2, [r3, #0]
		 __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwm_compare7);
 800103a:	4b62      	ldr	r3, [pc, #392]	; (80011c4 <HAL_UART_RxCpltCallback+0x5a0>)
 800103c:	881a      	ldrh	r2, [r3, #0]
 800103e:	4b63      	ldr	r3, [pc, #396]	; (80011cc <HAL_UART_RxCpltCallback+0x5a8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	635a      	str	r2, [r3, #52]	; 0x34
		 __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, pwm_compare8);
 8001044:	4b60      	ldr	r3, [pc, #384]	; (80011c8 <HAL_UART_RxCpltCallback+0x5a4>)
 8001046:	881a      	ldrh	r2, [r3, #0]
 8001048:	4b60      	ldr	r3, [pc, #384]	; (80011cc <HAL_UART_RxCpltCallback+0x5a8>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	639a      	str	r2, [r3, #56]	; 0x38
		 break;
 800104e:	e01a      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
		 break;
 8001050:	bf00      	nop
 8001052:	e018      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
		 break;
 8001054:	bf00      	nop
 8001056:	e016      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
		break;
 8001058:	bf00      	nop
 800105a:	e014      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
		break;
 800105c:	bf00      	nop
 800105e:	e012      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
		break;
 8001060:	bf00      	nop
 8001062:	e010      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
	     break;
 8001064:	bf00      	nop
 8001066:	e00e      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
		break;
 8001068:	bf00      	nop
 800106a:	e00c      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
		break;
 800106c:	bf00      	nop
 800106e:	e00a      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
		break;
 8001070:	bf00      	nop
 8001072:	e008      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
			break;
 8001074:	bf00      	nop
 8001076:	e006      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
		 			 break;
 8001078:	bf00      	nop
 800107a:	e004      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
		 			 break;
 800107c:	bf00      	nop
 800107e:	e002      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
			 break;
 8001080:	bf00      	nop
 8001082:	e000      	b.n	8001086 <HAL_UART_RxCpltCallback+0x462>
			 break;
 8001084:	bf00      	nop
	 }

	 HAL_UART_Transmit(&huart2, ((uint8_t *)aRxBuffer2), 1,0xFFFF);
 8001086:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800108a:	2201      	movs	r2, #1
 800108c:	4950      	ldr	r1, [pc, #320]	; (80011d0 <HAL_UART_RxCpltCallback+0x5ac>)
 800108e:	4851      	ldr	r0, [pc, #324]	; (80011d4 <HAL_UART_RxCpltCallback+0x5b0>)
 8001090:	f002 fdf2 	bl	8003c78 <HAL_UART_Transmit>
	 HAL_UART_Receive_IT(&huart2, (uint8_t *)aRxBuffer2, 1);
 8001094:	2201      	movs	r2, #1
 8001096:	494e      	ldr	r1, [pc, #312]	; (80011d0 <HAL_UART_RxCpltCallback+0x5ac>)
 8001098:	484e      	ldr	r0, [pc, #312]	; (80011d4 <HAL_UART_RxCpltCallback+0x5b0>)
 800109a:	f002 fe83 	bl	8003da4 <HAL_UART_Receive_IT>
	 switch(aRxBuffer2[0])
 800109e:	4b4c      	ldr	r3, [pc, #304]	; (80011d0 <HAL_UART_RxCpltCallback+0x5ac>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	3b31      	subs	r3, #49	; 0x31
 80010a4:	2b26      	cmp	r3, #38	; 0x26
 80010a6:	f200 822f 	bhi.w	8001508 <HAL_UART_RxCpltCallback+0x8e4>
 80010aa:	a201      	add	r2, pc, #4	; (adr r2, 80010b0 <HAL_UART_RxCpltCallback+0x48c>)
 80010ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b0:	08001191 	.word	0x08001191
 80010b4:	0800116d 	.word	0x0800116d
 80010b8:	080011e1 	.word	0x080011e1
 80010bc:	08001205 	.word	0x08001205
 80010c0:	08001227 	.word	0x08001227
 80010c4:	0800124b 	.word	0x0800124b
 80010c8:	080012b7 	.word	0x080012b7
 80010cc:	080012f1 	.word	0x080012f1
 80010d0:	08001509 	.word	0x08001509
 80010d4:	08001509 	.word	0x08001509
 80010d8:	08001509 	.word	0x08001509
 80010dc:	08001509 	.word	0x08001509
 80010e0:	08001509 	.word	0x08001509
 80010e4:	08001509 	.word	0x08001509
 80010e8:	08001509 	.word	0x08001509
 80010ec:	08001509 	.word	0x08001509
 80010f0:	0800126f 	.word	0x0800126f
 80010f4:	08001293 	.word	0x08001293
 80010f8:	080013c9 	.word	0x080013c9
 80010fc:	080013e1 	.word	0x080013e1
 8001100:	080013f9 	.word	0x080013f9
 8001104:	08001411 	.word	0x08001411
 8001108:	08001429 	.word	0x08001429
 800110c:	08001461 	.word	0x08001461
 8001110:	08001487 	.word	0x08001487
 8001114:	08001509 	.word	0x08001509
 8001118:	08001509 	.word	0x08001509
 800111c:	08001509 	.word	0x08001509
 8001120:	08001509 	.word	0x08001509
 8001124:	08001509 	.word	0x08001509
 8001128:	08001509 	.word	0x08001509
 800112c:	0800114d 	.word	0x0800114d
 8001130:	0800115d 	.word	0x0800115d
 8001134:	080014ad 	.word	0x080014ad
 8001138:	08001329 	.word	0x08001329
 800113c:	0800134d 	.word	0x0800134d
 8001140:	08001383 	.word	0x08001383
 8001144:	080013a7 	.word	0x080013a7
 8001148:	0800136f 	.word	0x0800136f
	 {
	 	 case 0x50:
	 	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_SET);
 800114c:	2201      	movs	r2, #1
 800114e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001156:	f000 ff73 	bl	8002040 <HAL_GPIO_WritePin>
	 	 break;
 800115a:	e1d5      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 	 case 0x51:
	 	 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001162:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001166:	f000 ff6b 	bl	8002040 <HAL_GPIO_WritePin>
	 	 break;
 800116a:	e1cd      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 //舵机控制
	 	 case 0x32://PWM1钳子张开
	 		 pwm_compare1 += 10;
 800116c:	4b1a      	ldr	r3, [pc, #104]	; (80011d8 <HAL_UART_RxCpltCallback+0x5b4>)
 800116e:	881b      	ldrh	r3, [r3, #0]
 8001170:	330a      	adds	r3, #10
 8001172:	b29a      	uxth	r2, r3
 8001174:	4b18      	ldr	r3, [pc, #96]	; (80011d8 <HAL_UART_RxCpltCallback+0x5b4>)
 8001176:	801a      	strh	r2, [r3, #0]
	 		 if(pwm_compare1 <= 2400)
 8001178:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <HAL_UART_RxCpltCallback+0x5b4>)
 800117a:	881b      	ldrh	r3, [r3, #0]
 800117c:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001180:	f200 81a7 	bhi.w	80014d2 <HAL_UART_RxCpltCallback+0x8ae>
	 		 {
	 			 __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, pwm_compare1);
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <HAL_UART_RxCpltCallback+0x5b4>)
 8001186:	881a      	ldrh	r2, [r3, #0]
 8001188:	4b14      	ldr	r3, [pc, #80]	; (80011dc <HAL_UART_RxCpltCallback+0x5b8>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	635a      	str	r2, [r3, #52]	; 0x34
	 		 }
	 		 break;
 800118e:	e1a0      	b.n	80014d2 <HAL_UART_RxCpltCallback+0x8ae>

	 	 case 0x31://钳子收缩
	 		 pwm_compare1 -= 10;
 8001190:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <HAL_UART_RxCpltCallback+0x5b4>)
 8001192:	881b      	ldrh	r3, [r3, #0]
 8001194:	3b0a      	subs	r3, #10
 8001196:	b29a      	uxth	r2, r3
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <HAL_UART_RxCpltCallback+0x5b4>)
 800119a:	801a      	strh	r2, [r3, #0]
	 		 if(pwm_compare1 >= 86)
 800119c:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <HAL_UART_RxCpltCallback+0x5b4>)
 800119e:	881b      	ldrh	r3, [r3, #0]
 80011a0:	2b55      	cmp	r3, #85	; 0x55
 80011a2:	f240 8198 	bls.w	80014d6 <HAL_UART_RxCpltCallback+0x8b2>
	 		 {
	 			 __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, pwm_compare1);
 80011a6:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <HAL_UART_RxCpltCallback+0x5b4>)
 80011a8:	881a      	ldrh	r2, [r3, #0]
 80011aa:	4b0c      	ldr	r3, [pc, #48]	; (80011dc <HAL_UART_RxCpltCallback+0x5b8>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
	 		 }
	 		 break;
 80011b0:	e191      	b.n	80014d6 <HAL_UART_RxCpltCallback+0x8b2>
 80011b2:	bf00      	nop
 80011b4:	2000000c 	.word	0x2000000c
 80011b8:	20000080 	.word	0x20000080
 80011bc:	2000000e 	.word	0x2000000e
 80011c0:	48000400 	.word	0x48000400
 80011c4:	20000010 	.word	0x20000010
 80011c8:	20000012 	.word	0x20000012
 80011cc:	20000040 	.word	0x20000040
 80011d0:	2000003c 	.word	0x2000003c
 80011d4:	20000190 	.word	0x20000190
 80011d8:	20000000 	.word	0x20000000
 80011dc:	20000150 	.word	0x20000150
	 	 case 0x33://PWM2前端控制钳子右运动
	 		 pwm_compare2 += 10;
 80011e0:	4b95      	ldr	r3, [pc, #596]	; (8001438 <HAL_UART_RxCpltCallback+0x814>)
 80011e2:	881b      	ldrh	r3, [r3, #0]
 80011e4:	330a      	adds	r3, #10
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	4b93      	ldr	r3, [pc, #588]	; (8001438 <HAL_UART_RxCpltCallback+0x814>)
 80011ea:	801a      	strh	r2, [r3, #0]
	 		 if(pwm_compare2 <= 2400)
 80011ec:	4b92      	ldr	r3, [pc, #584]	; (8001438 <HAL_UART_RxCpltCallback+0x814>)
 80011ee:	881b      	ldrh	r3, [r3, #0]
 80011f0:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80011f4:	f200 8171 	bhi.w	80014da <HAL_UART_RxCpltCallback+0x8b6>
	 		 {
	 			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwm_compare2);
 80011f8:	4b8f      	ldr	r3, [pc, #572]	; (8001438 <HAL_UART_RxCpltCallback+0x814>)
 80011fa:	881a      	ldrh	r2, [r3, #0]
 80011fc:	4b8f      	ldr	r3, [pc, #572]	; (800143c <HAL_UART_RxCpltCallback+0x818>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	639a      	str	r2, [r3, #56]	; 0x38
	 		 }
	 		break;
 8001202:	e16a      	b.n	80014da <HAL_UART_RxCpltCallback+0x8b6>
	 	 case 0x34://前端控制钳子的左运动
	 		 pwm_compare2 -= 10;
 8001204:	4b8c      	ldr	r3, [pc, #560]	; (8001438 <HAL_UART_RxCpltCallback+0x814>)
 8001206:	881b      	ldrh	r3, [r3, #0]
 8001208:	3b0a      	subs	r3, #10
 800120a:	b29a      	uxth	r2, r3
 800120c:	4b8a      	ldr	r3, [pc, #552]	; (8001438 <HAL_UART_RxCpltCallback+0x814>)
 800120e:	801a      	strh	r2, [r3, #0]
	 		 if(pwm_compare2 >= 60)
 8001210:	4b89      	ldr	r3, [pc, #548]	; (8001438 <HAL_UART_RxCpltCallback+0x814>)
 8001212:	881b      	ldrh	r3, [r3, #0]
 8001214:	2b3b      	cmp	r3, #59	; 0x3b
 8001216:	f240 8162 	bls.w	80014de <HAL_UART_RxCpltCallback+0x8ba>
	 		 {
	 			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_2, pwm_compare2);
 800121a:	4b87      	ldr	r3, [pc, #540]	; (8001438 <HAL_UART_RxCpltCallback+0x814>)
 800121c:	881a      	ldrh	r2, [r3, #0]
 800121e:	4b87      	ldr	r3, [pc, #540]	; (800143c <HAL_UART_RxCpltCallback+0x818>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	639a      	str	r2, [r3, #56]	; 0x38
	 		 }
	 		break;
 8001224:	e15b      	b.n	80014de <HAL_UART_RxCpltCallback+0x8ba>
	 	 case 0x35://PWM3前端控制钳子的上运动
	 		 pwm_compare3 += 10;
 8001226:	4b86      	ldr	r3, [pc, #536]	; (8001440 <HAL_UART_RxCpltCallback+0x81c>)
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	330a      	adds	r3, #10
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b84      	ldr	r3, [pc, #528]	; (8001440 <HAL_UART_RxCpltCallback+0x81c>)
 8001230:	801a      	strh	r2, [r3, #0]
	 		 if(pwm_compare3 <= 2400)
 8001232:	4b83      	ldr	r3, [pc, #524]	; (8001440 <HAL_UART_RxCpltCallback+0x81c>)
 8001234:	881b      	ldrh	r3, [r3, #0]
 8001236:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800123a:	f200 8152 	bhi.w	80014e2 <HAL_UART_RxCpltCallback+0x8be>
	 		 {
	 			 __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, pwm_compare3);
 800123e:	4b80      	ldr	r3, [pc, #512]	; (8001440 <HAL_UART_RxCpltCallback+0x81c>)
 8001240:	881a      	ldrh	r2, [r3, #0]
 8001242:	4b7e      	ldr	r3, [pc, #504]	; (800143c <HAL_UART_RxCpltCallback+0x818>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	63da      	str	r2, [r3, #60]	; 0x3c
	 		 }
	 		break;
 8001248:	e14b      	b.n	80014e2 <HAL_UART_RxCpltCallback+0x8be>
	 	 case 0x36://前端控制钳子的下运动
	 		 pwm_compare3 -= 10;
 800124a:	4b7d      	ldr	r3, [pc, #500]	; (8001440 <HAL_UART_RxCpltCallback+0x81c>)
 800124c:	881b      	ldrh	r3, [r3, #0]
 800124e:	3b0a      	subs	r3, #10
 8001250:	b29a      	uxth	r2, r3
 8001252:	4b7b      	ldr	r3, [pc, #492]	; (8001440 <HAL_UART_RxCpltCallback+0x81c>)
 8001254:	801a      	strh	r2, [r3, #0]
	 		 if(pwm_compare3 >= 560)
 8001256:	4b7a      	ldr	r3, [pc, #488]	; (8001440 <HAL_UART_RxCpltCallback+0x81c>)
 8001258:	881b      	ldrh	r3, [r3, #0]
 800125a:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 800125e:	f0c0 8142 	bcc.w	80014e6 <HAL_UART_RxCpltCallback+0x8c2>
	 		 {
	 			 __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_3, pwm_compare3);
 8001262:	4b77      	ldr	r3, [pc, #476]	; (8001440 <HAL_UART_RxCpltCallback+0x81c>)
 8001264:	881a      	ldrh	r2, [r3, #0]
 8001266:	4b75      	ldr	r3, [pc, #468]	; (800143c <HAL_UART_RxCpltCallback+0x818>)
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	63da      	str	r2, [r3, #60]	; 0x3c

	 		 }
	 	     break;
 800126c:	e13b      	b.n	80014e6 <HAL_UART_RxCpltCallback+0x8c2>
	 	 case 0x41://PWM6整体右转
	 		 pwm_compare6 += 20;
 800126e:	4b75      	ldr	r3, [pc, #468]	; (8001444 <HAL_UART_RxCpltCallback+0x820>)
 8001270:	881b      	ldrh	r3, [r3, #0]
 8001272:	3314      	adds	r3, #20
 8001274:	b29a      	uxth	r2, r3
 8001276:	4b73      	ldr	r3, [pc, #460]	; (8001444 <HAL_UART_RxCpltCallback+0x820>)
 8001278:	801a      	strh	r2, [r3, #0]
	 		 if(pwm_compare6 <= 2400)
 800127a:	4b72      	ldr	r3, [pc, #456]	; (8001444 <HAL_UART_RxCpltCallback+0x820>)
 800127c:	881b      	ldrh	r3, [r3, #0]
 800127e:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001282:	f200 8132 	bhi.w	80014ea <HAL_UART_RxCpltCallback+0x8c6>
	 		 {
	 			   __HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, pwm_compare6);
 8001286:	4b6f      	ldr	r3, [pc, #444]	; (8001444 <HAL_UART_RxCpltCallback+0x820>)
 8001288:	881a      	ldrh	r2, [r3, #0]
 800128a:	4b6c      	ldr	r3, [pc, #432]	; (800143c <HAL_UART_RxCpltCallback+0x818>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	641a      	str	r2, [r3, #64]	; 0x40
	 		 }
	 		break;
 8001290:	e12b      	b.n	80014ea <HAL_UART_RxCpltCallback+0x8c6>
	 	 case 0x42://整体左转
	 		 pwm_compare6 -= 20;
 8001292:	4b6c      	ldr	r3, [pc, #432]	; (8001444 <HAL_UART_RxCpltCallback+0x820>)
 8001294:	881b      	ldrh	r3, [r3, #0]
 8001296:	3b14      	subs	r3, #20
 8001298:	b29a      	uxth	r2, r3
 800129a:	4b6a      	ldr	r3, [pc, #424]	; (8001444 <HAL_UART_RxCpltCallback+0x820>)
 800129c:	801a      	strh	r2, [r3, #0]
	 		 if(pwm_compare6 >= 560)
 800129e:	4b69      	ldr	r3, [pc, #420]	; (8001444 <HAL_UART_RxCpltCallback+0x820>)
 80012a0:	881b      	ldrh	r3, [r3, #0]
 80012a2:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 80012a6:	f0c0 8122 	bcc.w	80014ee <HAL_UART_RxCpltCallback+0x8ca>
	 		 {
	 			__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_4, pwm_compare6);
 80012aa:	4b66      	ldr	r3, [pc, #408]	; (8001444 <HAL_UART_RxCpltCallback+0x820>)
 80012ac:	881a      	ldrh	r2, [r3, #0]
 80012ae:	4b63      	ldr	r3, [pc, #396]	; (800143c <HAL_UART_RxCpltCallback+0x818>)
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	641a      	str	r2, [r3, #64]	; 0x40
	 		 }
	 		break;
 80012b4:	e11b      	b.n	80014ee <HAL_UART_RxCpltCallback+0x8ca>
	 	 case 0x37://PWM4、PWM5 向后缩进
	 		pwm_compare4 += 20;
 80012b6:	4b64      	ldr	r3, [pc, #400]	; (8001448 <HAL_UART_RxCpltCallback+0x824>)
 80012b8:	881b      	ldrh	r3, [r3, #0]
 80012ba:	3314      	adds	r3, #20
 80012bc:	b29a      	uxth	r2, r3
 80012be:	4b62      	ldr	r3, [pc, #392]	; (8001448 <HAL_UART_RxCpltCallback+0x824>)
 80012c0:	801a      	strh	r2, [r3, #0]
	 		pwm_compare5 += 20;
 80012c2:	4b62      	ldr	r3, [pc, #392]	; (800144c <HAL_UART_RxCpltCallback+0x828>)
 80012c4:	881b      	ldrh	r3, [r3, #0]
 80012c6:	3314      	adds	r3, #20
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	4b60      	ldr	r3, [pc, #384]	; (800144c <HAL_UART_RxCpltCallback+0x828>)
 80012cc:	801a      	strh	r2, [r3, #0]
	 		if(pwm_compare5 <= 2400)
 80012ce:	4b5f      	ldr	r3, [pc, #380]	; (800144c <HAL_UART_RxCpltCallback+0x828>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 80012d6:	f200 810c 	bhi.w	80014f2 <HAL_UART_RxCpltCallback+0x8ce>
	 		{
	 			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, pwm_compare4);
 80012da:	4b5b      	ldr	r3, [pc, #364]	; (8001448 <HAL_UART_RxCpltCallback+0x824>)
 80012dc:	881a      	ldrh	r2, [r3, #0]
 80012de:	4b5c      	ldr	r3, [pc, #368]	; (8001450 <HAL_UART_RxCpltCallback+0x82c>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	635a      	str	r2, [r3, #52]	; 0x34
	 			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, pwm_compare5);
 80012e4:	4b59      	ldr	r3, [pc, #356]	; (800144c <HAL_UART_RxCpltCallback+0x828>)
 80012e6:	881a      	ldrh	r2, [r3, #0]
 80012e8:	4b59      	ldr	r3, [pc, #356]	; (8001450 <HAL_UART_RxCpltCallback+0x82c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	639a      	str	r2, [r3, #56]	; 0x38
	 	    }
	 		break;
 80012ee:	e100      	b.n	80014f2 <HAL_UART_RxCpltCallback+0x8ce>

	 	 case 0x38://向前推进
	 		 pwm_compare4 -= 20;
 80012f0:	4b55      	ldr	r3, [pc, #340]	; (8001448 <HAL_UART_RxCpltCallback+0x824>)
 80012f2:	881b      	ldrh	r3, [r3, #0]
 80012f4:	3b14      	subs	r3, #20
 80012f6:	b29a      	uxth	r2, r3
 80012f8:	4b53      	ldr	r3, [pc, #332]	; (8001448 <HAL_UART_RxCpltCallback+0x824>)
 80012fa:	801a      	strh	r2, [r3, #0]
	 		 pwm_compare5 -= 20;
 80012fc:	4b53      	ldr	r3, [pc, #332]	; (800144c <HAL_UART_RxCpltCallback+0x828>)
 80012fe:	881b      	ldrh	r3, [r3, #0]
 8001300:	3b14      	subs	r3, #20
 8001302:	b29a      	uxth	r2, r3
 8001304:	4b51      	ldr	r3, [pc, #324]	; (800144c <HAL_UART_RxCpltCallback+0x828>)
 8001306:	801a      	strh	r2, [r3, #0]
	 		 if(pwm_compare4 >= 60)
 8001308:	4b4f      	ldr	r3, [pc, #316]	; (8001448 <HAL_UART_RxCpltCallback+0x824>)
 800130a:	881b      	ldrh	r3, [r3, #0]
 800130c:	2b3b      	cmp	r3, #59	; 0x3b
 800130e:	f240 80f2 	bls.w	80014f6 <HAL_UART_RxCpltCallback+0x8d2>
	 		 {
	 			 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_1, pwm_compare4);
 8001312:	4b4d      	ldr	r3, [pc, #308]	; (8001448 <HAL_UART_RxCpltCallback+0x824>)
 8001314:	881a      	ldrh	r2, [r3, #0]
 8001316:	4b4e      	ldr	r3, [pc, #312]	; (8001450 <HAL_UART_RxCpltCallback+0x82c>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	635a      	str	r2, [r3, #52]	; 0x34
	 			 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, pwm_compare5);
 800131c:	4b4b      	ldr	r3, [pc, #300]	; (800144c <HAL_UART_RxCpltCallback+0x828>)
 800131e:	881a      	ldrh	r2, [r3, #0]
 8001320:	4b4b      	ldr	r3, [pc, #300]	; (8001450 <HAL_UART_RxCpltCallback+0x82c>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	639a      	str	r2, [r3, #56]	; 0x38
	 		 }
	 			break;
 8001326:	e0e6      	b.n	80014f6 <HAL_UART_RxCpltCallback+0x8d2>

	 	 case 0x53://PWM9 摄像头左转
	 		 pwm_compare9 += 10;
 8001328:	4b4a      	ldr	r3, [pc, #296]	; (8001454 <HAL_UART_RxCpltCallback+0x830>)
 800132a:	881b      	ldrh	r3, [r3, #0]
 800132c:	330a      	adds	r3, #10
 800132e:	b29a      	uxth	r2, r3
 8001330:	4b48      	ldr	r3, [pc, #288]	; (8001454 <HAL_UART_RxCpltCallback+0x830>)
 8001332:	801a      	strh	r2, [r3, #0]
	 		 if(pwm_compare9 <= 2400)
 8001334:	4b47      	ldr	r3, [pc, #284]	; (8001454 <HAL_UART_RxCpltCallback+0x830>)
 8001336:	881b      	ldrh	r3, [r3, #0]
 8001338:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 800133c:	f200 80dd 	bhi.w	80014fa <HAL_UART_RxCpltCallback+0x8d6>
	 		 {
	 			 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwm_compare9);
 8001340:	4b44      	ldr	r3, [pc, #272]	; (8001454 <HAL_UART_RxCpltCallback+0x830>)
 8001342:	881a      	ldrh	r2, [r3, #0]
 8001344:	4b42      	ldr	r3, [pc, #264]	; (8001450 <HAL_UART_RxCpltCallback+0x82c>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	63da      	str	r2, [r3, #60]	; 0x3c
	 		 }
	 		 			 break;
 800134a:	e0d6      	b.n	80014fa <HAL_UART_RxCpltCallback+0x8d6>
	 	 case 0x54://摄像头右转
	 		 pwm_compare9 -= 10;
 800134c:	4b41      	ldr	r3, [pc, #260]	; (8001454 <HAL_UART_RxCpltCallback+0x830>)
 800134e:	881b      	ldrh	r3, [r3, #0]
 8001350:	3b0a      	subs	r3, #10
 8001352:	b29a      	uxth	r2, r3
 8001354:	4b3f      	ldr	r3, [pc, #252]	; (8001454 <HAL_UART_RxCpltCallback+0x830>)
 8001356:	801a      	strh	r2, [r3, #0]
	 		 if(pwm_compare9 >= 60)
 8001358:	4b3e      	ldr	r3, [pc, #248]	; (8001454 <HAL_UART_RxCpltCallback+0x830>)
 800135a:	881b      	ldrh	r3, [r3, #0]
 800135c:	2b3b      	cmp	r3, #59	; 0x3b
 800135e:	f240 80ce 	bls.w	80014fe <HAL_UART_RxCpltCallback+0x8da>
	 		 {
	 		 	 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwm_compare9);
 8001362:	4b3c      	ldr	r3, [pc, #240]	; (8001454 <HAL_UART_RxCpltCallback+0x830>)
 8001364:	881a      	ldrh	r2, [r3, #0]
 8001366:	4b3a      	ldr	r3, [pc, #232]	; (8001450 <HAL_UART_RxCpltCallback+0x82c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	63da      	str	r2, [r3, #60]	; 0x3c
	 		 }
	 		 			 break;
 800136c:	e0c7      	b.n	80014fe <HAL_UART_RxCpltCallback+0x8da>
	 	 case 0x57:
	 		 	 pwm_compare9 = 1500;
 800136e:	4b39      	ldr	r3, [pc, #228]	; (8001454 <HAL_UART_RxCpltCallback+0x830>)
 8001370:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8001374:	801a      	strh	r2, [r3, #0]
	 		 	 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_3, pwm_compare9);
 8001376:	4b37      	ldr	r3, [pc, #220]	; (8001454 <HAL_UART_RxCpltCallback+0x830>)
 8001378:	881a      	ldrh	r2, [r3, #0]
 800137a:	4b35      	ldr	r3, [pc, #212]	; (8001450 <HAL_UART_RxCpltCallback+0x82c>)
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	63da      	str	r2, [r3, #60]	; 0x3c
	 		 	 break;
 8001380:	e0c2      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>

	 	 case 0x55://PWM10摄像头向下转
	 		 pwm_compare10 += 10;
 8001382:	4b35      	ldr	r3, [pc, #212]	; (8001458 <HAL_UART_RxCpltCallback+0x834>)
 8001384:	881b      	ldrh	r3, [r3, #0]
 8001386:	330a      	adds	r3, #10
 8001388:	b29a      	uxth	r2, r3
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <HAL_UART_RxCpltCallback+0x834>)
 800138c:	801a      	strh	r2, [r3, #0]
	 		 if(pwm_compare10 <= 2400)
 800138e:	4b32      	ldr	r3, [pc, #200]	; (8001458 <HAL_UART_RxCpltCallback+0x834>)
 8001390:	881b      	ldrh	r3, [r3, #0]
 8001392:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
 8001396:	f200 80b4 	bhi.w	8001502 <HAL_UART_RxCpltCallback+0x8de>
	 		 {
	 			 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, pwm_compare10);
 800139a:	4b2f      	ldr	r3, [pc, #188]	; (8001458 <HAL_UART_RxCpltCallback+0x834>)
 800139c:	881a      	ldrh	r2, [r3, #0]
 800139e:	4b2c      	ldr	r3, [pc, #176]	; (8001450 <HAL_UART_RxCpltCallback+0x82c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	641a      	str	r2, [r3, #64]	; 0x40
	 	     }
	 			 break;
 80013a4:	e0ad      	b.n	8001502 <HAL_UART_RxCpltCallback+0x8de>
	 	 case 0x56://摄像头向上转
	 		 pwm_compare10 -= 10;
 80013a6:	4b2c      	ldr	r3, [pc, #176]	; (8001458 <HAL_UART_RxCpltCallback+0x834>)
 80013a8:	881b      	ldrh	r3, [r3, #0]
 80013aa:	3b0a      	subs	r3, #10
 80013ac:	b29a      	uxth	r2, r3
 80013ae:	4b2a      	ldr	r3, [pc, #168]	; (8001458 <HAL_UART_RxCpltCallback+0x834>)
 80013b0:	801a      	strh	r2, [r3, #0]
	 		 if(pwm_compare10 >= 60)
 80013b2:	4b29      	ldr	r3, [pc, #164]	; (8001458 <HAL_UART_RxCpltCallback+0x834>)
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	2b3b      	cmp	r3, #59	; 0x3b
 80013b8:	f240 80a5 	bls.w	8001506 <HAL_UART_RxCpltCallback+0x8e2>
	 		 {
	 			 __HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_4, pwm_compare10);
 80013bc:	4b26      	ldr	r3, [pc, #152]	; (8001458 <HAL_UART_RxCpltCallback+0x834>)
 80013be:	881a      	ldrh	r2, [r3, #0]
 80013c0:	4b23      	ldr	r3, [pc, #140]	; (8001450 <HAL_UART_RxCpltCallback+0x82c>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
	 		 }
	 			 break;
 80013c6:	e09e      	b.n	8001506 <HAL_UART_RxCpltCallback+0x8e2>
	 	 case 0x43://前进
	 		 //IN1<=1; IN2<=0; IN3<=0; IN4<=1;
	 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3, GPIO_PIN_SET);
 80013c8:	2201      	movs	r2, #1
 80013ca:	f44f 6181 	mov.w	r1, #1032	; 0x408
 80013ce:	4823      	ldr	r0, [pc, #140]	; (800145c <HAL_UART_RxCpltCallback+0x838>)
 80013d0:	f000 fe36 	bl	8002040 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80013d4:	2200      	movs	r2, #0
 80013d6:	2130      	movs	r1, #48	; 0x30
 80013d8:	4820      	ldr	r0, [pc, #128]	; (800145c <HAL_UART_RxCpltCallback+0x838>)
 80013da:	f000 fe31 	bl	8002040 <HAL_GPIO_WritePin>
	 		 break;
 80013de:	e093      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 	 case 0x44://后退
	 //			 IN1<=0; IN2<=1; IN3<=1; IN4<=0;
	 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_SET);
 80013e0:	2201      	movs	r2, #1
 80013e2:	2130      	movs	r1, #48	; 0x30
 80013e4:	481d      	ldr	r0, [pc, #116]	; (800145c <HAL_UART_RxCpltCallback+0x838>)
 80013e6:	f000 fe2b 	bl	8002040 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3, GPIO_PIN_RESET);
 80013ea:	2200      	movs	r2, #0
 80013ec:	f44f 6181 	mov.w	r1, #1032	; 0x408
 80013f0:	481a      	ldr	r0, [pc, #104]	; (800145c <HAL_UART_RxCpltCallback+0x838>)
 80013f2:	f000 fe25 	bl	8002040 <HAL_GPIO_WritePin>
	 		 break;
 80013f6:	e087      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 	 case 0x45://右转
	 		 //IN1<=1; IN2<=0; IN3<=1; IN4<=0;
	 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_SET);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2118      	movs	r1, #24
 80013fc:	4817      	ldr	r0, [pc, #92]	; (800145c <HAL_UART_RxCpltCallback+0x838>)
 80013fe:	f000 fe1f 	bl	8002040 <HAL_GPIO_WritePin>
	 		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_RESET);
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001408:	4814      	ldr	r0, [pc, #80]	; (800145c <HAL_UART_RxCpltCallback+0x838>)
 800140a:	f000 fe19 	bl	8002040 <HAL_GPIO_WritePin>
	 		break;
 800140e:	e07b      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 	 case 0x46://左转
	 		//IN1<=0; IN2<=1; IN3<=0; IN4<=1;
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5|GPIO_PIN_10, GPIO_PIN_SET);
 8001410:	2201      	movs	r2, #1
 8001412:	f44f 6184 	mov.w	r1, #1056	; 0x420
 8001416:	4811      	ldr	r0, [pc, #68]	; (800145c <HAL_UART_RxCpltCallback+0x838>)
 8001418:	f000 fe12 	bl	8002040 <HAL_GPIO_WritePin>
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 800141c:	2200      	movs	r2, #0
 800141e:	2118      	movs	r1, #24
 8001420:	480e      	ldr	r0, [pc, #56]	; (800145c <HAL_UART_RxCpltCallback+0x838>)
 8001422:	f000 fe0d 	bl	8002040 <HAL_GPIO_WritePin>
	 		break;
 8001426:	e06f      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 	 case 0x47://停止
	 		//IN1<=0; IN2<=0; IN3<=0; IN4<=0;
	 		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 6187 	mov.w	r1, #1080	; 0x438
 800142e:	480b      	ldr	r0, [pc, #44]	; (800145c <HAL_UART_RxCpltCallback+0x838>)
 8001430:	f000 fe06 	bl	8002040 <HAL_GPIO_WritePin>
	 		break;
 8001434:	e068      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
 8001436:	bf00      	nop
 8001438:	20000002 	.word	0x20000002
 800143c:	20000150 	.word	0x20000150
 8001440:	20000004 	.word	0x20000004
 8001444:	20000006 	.word	0x20000006
 8001448:	20000008 	.word	0x20000008
 800144c:	2000000a 	.word	0x2000000a
 8001450:	20000080 	.word	0x20000080
 8001454:	2000000c 	.word	0x2000000c
 8001458:	2000000e 	.word	0x2000000e
 800145c:	48000400 	.word	0x48000400

	 	 case 0x48://高速
	 		 pwm_compare7 = 2500;
 8001460:	4b2b      	ldr	r3, [pc, #172]	; (8001510 <HAL_UART_RxCpltCallback+0x8ec>)
 8001462:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8001466:	801a      	strh	r2, [r3, #0]
	 		 pwm_compare8 = 2500;
 8001468:	4b2a      	ldr	r3, [pc, #168]	; (8001514 <HAL_UART_RxCpltCallback+0x8f0>)
 800146a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800146e:	801a      	strh	r2, [r3, #0]
	 		 __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwm_compare7);
 8001470:	4b27      	ldr	r3, [pc, #156]	; (8001510 <HAL_UART_RxCpltCallback+0x8ec>)
 8001472:	881a      	ldrh	r2, [r3, #0]
 8001474:	4b28      	ldr	r3, [pc, #160]	; (8001518 <HAL_UART_RxCpltCallback+0x8f4>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	635a      	str	r2, [r3, #52]	; 0x34
	 		 __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, pwm_compare8);
 800147a:	4b26      	ldr	r3, [pc, #152]	; (8001514 <HAL_UART_RxCpltCallback+0x8f0>)
 800147c:	881a      	ldrh	r2, [r3, #0]
 800147e:	4b26      	ldr	r3, [pc, #152]	; (8001518 <HAL_UART_RxCpltCallback+0x8f4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	639a      	str	r2, [r3, #56]	; 0x38
	 		 break;
 8001484:	e040      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 	 case 0x49://中速
	 		 pwm_compare7 = 2000;
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <HAL_UART_RxCpltCallback+0x8ec>)
 8001488:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800148c:	801a      	strh	r2, [r3, #0]
	 		 pwm_compare8 = 2000;
 800148e:	4b21      	ldr	r3, [pc, #132]	; (8001514 <HAL_UART_RxCpltCallback+0x8f0>)
 8001490:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001494:	801a      	strh	r2, [r3, #0]
	 		 __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwm_compare7);
 8001496:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <HAL_UART_RxCpltCallback+0x8ec>)
 8001498:	881a      	ldrh	r2, [r3, #0]
 800149a:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <HAL_UART_RxCpltCallback+0x8f4>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	635a      	str	r2, [r3, #52]	; 0x34
	 		 __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, pwm_compare8);
 80014a0:	4b1c      	ldr	r3, [pc, #112]	; (8001514 <HAL_UART_RxCpltCallback+0x8f0>)
 80014a2:	881a      	ldrh	r2, [r3, #0]
 80014a4:	4b1c      	ldr	r3, [pc, #112]	; (8001518 <HAL_UART_RxCpltCallback+0x8f4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	639a      	str	r2, [r3, #56]	; 0x38
	 		 break;
 80014aa:	e02d      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>

	 	 case 0x52://慢速
	 		 pwm_compare7 = 1500;
 80014ac:	4b18      	ldr	r3, [pc, #96]	; (8001510 <HAL_UART_RxCpltCallback+0x8ec>)
 80014ae:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014b2:	801a      	strh	r2, [r3, #0]
	 		 pwm_compare8 = 1500;
 80014b4:	4b17      	ldr	r3, [pc, #92]	; (8001514 <HAL_UART_RxCpltCallback+0x8f0>)
 80014b6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80014ba:	801a      	strh	r2, [r3, #0]
	 		 __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, pwm_compare7);
 80014bc:	4b14      	ldr	r3, [pc, #80]	; (8001510 <HAL_UART_RxCpltCallback+0x8ec>)
 80014be:	881a      	ldrh	r2, [r3, #0]
 80014c0:	4b15      	ldr	r3, [pc, #84]	; (8001518 <HAL_UART_RxCpltCallback+0x8f4>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	635a      	str	r2, [r3, #52]	; 0x34
	 		 __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, pwm_compare8);
 80014c6:	4b13      	ldr	r3, [pc, #76]	; (8001514 <HAL_UART_RxCpltCallback+0x8f0>)
 80014c8:	881a      	ldrh	r2, [r3, #0]
 80014ca:	4b13      	ldr	r3, [pc, #76]	; (8001518 <HAL_UART_RxCpltCallback+0x8f4>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	639a      	str	r2, [r3, #56]	; 0x38
	 		 break;
 80014d0:	e01a      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 		 break;
 80014d2:	bf00      	nop
 80014d4:	e018      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 		 break;
 80014d6:	bf00      	nop
 80014d8:	e016      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 		break;
 80014da:	bf00      	nop
 80014dc:	e014      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 		break;
 80014de:	bf00      	nop
 80014e0:	e012      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 		break;
 80014e2:	bf00      	nop
 80014e4:	e010      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 	     break;
 80014e6:	bf00      	nop
 80014e8:	e00e      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 		break;
 80014ea:	bf00      	nop
 80014ec:	e00c      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 		break;
 80014ee:	bf00      	nop
 80014f0:	e00a      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 		break;
 80014f2:	bf00      	nop
 80014f4:	e008      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 			break;
 80014f6:	bf00      	nop
 80014f8:	e006      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 		 			 break;
 80014fa:	bf00      	nop
 80014fc:	e004      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 		 			 break;
 80014fe:	bf00      	nop
 8001500:	e002      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 			 break;
 8001502:	bf00      	nop
 8001504:	e000      	b.n	8001508 <HAL_UART_RxCpltCallback+0x8e4>
	 			 break;
 8001506:	bf00      	nop
	 }
}
 8001508:	bf00      	nop
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20000010 	.word	0x20000010
 8001514:	20000012 	.word	0x20000012
 8001518:	20000040 	.word	0x20000040

0800151c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001520:	bf00      	nop
 8001522:	46bd      	mov	sp, r7
 8001524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001528:	4770      	bx	lr
	...

0800152c <LL_PWR_DisableDeadBatteryPD>:
  * @brief  Disable USB Type-C and Power Delivery Dead Battery disable
  * @rmtoll CR3          UCPD_DBDIS          LL_PWR_DisableDeadBatteryPD
  * @retval None
  */
__STATIC_INLINE void LL_PWR_DisableDeadBatteryPD(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  CLEAR_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8001532:	689b      	ldr	r3, [r3, #8]
 8001534:	4a04      	ldr	r2, [pc, #16]	; (8001548 <LL_PWR_DisableDeadBatteryPD+0x1c>)
 8001536:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800153a:	6093      	str	r3, [r2, #8]
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001544:	4770      	bx	lr
 8001546:	bf00      	nop
 8001548:	40007000 	.word	0x40007000

0800154c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                            /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001552:	4b0f      	ldr	r3, [pc, #60]	; (8001590 <HAL_MspInit+0x44>)
 8001554:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001556:	4a0e      	ldr	r2, [pc, #56]	; (8001590 <HAL_MspInit+0x44>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6613      	str	r3, [r2, #96]	; 0x60
 800155e:	4b0c      	ldr	r3, [pc, #48]	; (8001590 <HAL_MspInit+0x44>)
 8001560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800156a:	4b09      	ldr	r3, [pc, #36]	; (8001590 <HAL_MspInit+0x44>)
 800156c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <HAL_MspInit+0x44>)
 8001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001574:	6593      	str	r3, [r2, #88]	; 0x58
 8001576:	4b06      	ldr	r3, [pc, #24]	; (8001590 <HAL_MspInit+0x44>)
 8001578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800157a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800157e:	603b      	str	r3, [r7, #0]
 8001580:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral 
  */
  LL_PWR_DisableDeadBatteryPD();
 8001582:	f7ff ffd3 	bl	800152c <LL_PWR_DisableDeadBatteryPD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
 800158e:	bf00      	nop
 8001590:	40021000 	.word	0x40021000

08001594 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001594:	b480      	push	{r7}
 8001596:	b087      	sub	sp, #28
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015a4:	d10c      	bne.n	80015c0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80015a6:	4b1b      	ldr	r3, [pc, #108]	; (8001614 <HAL_TIM_PWM_MspInit+0x80>)
 80015a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015aa:	4a1a      	ldr	r2, [pc, #104]	; (8001614 <HAL_TIM_PWM_MspInit+0x80>)
 80015ac:	f043 0301 	orr.w	r3, r3, #1
 80015b0:	6593      	str	r3, [r2, #88]	; 0x58
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_TIM_PWM_MspInit+0x80>)
 80015b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015b6:	f003 0301 	and.w	r3, r3, #1
 80015ba:	617b      	str	r3, [r7, #20]
 80015bc:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80015be:	e022      	b.n	8001606 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM3)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a14      	ldr	r2, [pc, #80]	; (8001618 <HAL_TIM_PWM_MspInit+0x84>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d10c      	bne.n	80015e4 <HAL_TIM_PWM_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ca:	4b12      	ldr	r3, [pc, #72]	; (8001614 <HAL_TIM_PWM_MspInit+0x80>)
 80015cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ce:	4a11      	ldr	r2, [pc, #68]	; (8001614 <HAL_TIM_PWM_MspInit+0x80>)
 80015d0:	f043 0302 	orr.w	r3, r3, #2
 80015d4:	6593      	str	r3, [r2, #88]	; 0x58
 80015d6:	4b0f      	ldr	r3, [pc, #60]	; (8001614 <HAL_TIM_PWM_MspInit+0x80>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	f003 0302 	and.w	r3, r3, #2
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
}
 80015e2:	e010      	b.n	8001606 <HAL_TIM_PWM_MspInit+0x72>
  else if(htim_pwm->Instance==TIM4)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a0c      	ldr	r2, [pc, #48]	; (800161c <HAL_TIM_PWM_MspInit+0x88>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d10b      	bne.n	8001606 <HAL_TIM_PWM_MspInit+0x72>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80015ee:	4b09      	ldr	r3, [pc, #36]	; (8001614 <HAL_TIM_PWM_MspInit+0x80>)
 80015f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015f2:	4a08      	ldr	r2, [pc, #32]	; (8001614 <HAL_TIM_PWM_MspInit+0x80>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6593      	str	r3, [r2, #88]	; 0x58
 80015fa:	4b06      	ldr	r3, [pc, #24]	; (8001614 <HAL_TIM_PWM_MspInit+0x80>)
 80015fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	68fb      	ldr	r3, [r7, #12]
}
 8001606:	bf00      	nop
 8001608:	371c      	adds	r7, #28
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40021000 	.word	0x40021000
 8001618:	40000400 	.word	0x40000400
 800161c:	40000800 	.word	0x40000800

08001620 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08c      	sub	sp, #48	; 0x30
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 031c 	add.w	r3, r7, #28
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001640:	d12f      	bne.n	80016a2 <HAL_TIM_MspPostInit+0x82>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	4b4b      	ldr	r3, [pc, #300]	; (8001770 <HAL_TIM_MspPostInit+0x150>)
 8001644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001646:	4a4a      	ldr	r2, [pc, #296]	; (8001770 <HAL_TIM_MspPostInit+0x150>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800164e:	4b48      	ldr	r3, [pc, #288]	; (8001770 <HAL_TIM_MspPostInit+0x150>)
 8001650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	61bb      	str	r3, [r7, #24]
 8001658:	69bb      	ldr	r3, [r7, #24]
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA9     ------> TIM2_CH3
    PA10     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800165a:	2303      	movs	r3, #3
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001666:	2300      	movs	r3, #0
 8001668:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800166a:	2301      	movs	r3, #1
 800166c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	4619      	mov	r1, r3
 8001674:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001678:	f000 fb60 	bl	8001d3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800167c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001680:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM2;
 800168e:	230a      	movs	r3, #10
 8001690:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 031c 	add.w	r3, r7, #28
 8001696:	4619      	mov	r1, r3
 8001698:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800169c:	f000 fb4e 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80016a0:	e061      	b.n	8001766 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM3)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a33      	ldr	r2, [pc, #204]	; (8001774 <HAL_TIM_MspPostInit+0x154>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d139      	bne.n	8001720 <HAL_TIM_MspPostInit+0x100>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016ac:	4b30      	ldr	r3, [pc, #192]	; (8001770 <HAL_TIM_MspPostInit+0x150>)
 80016ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016b0:	4a2f      	ldr	r2, [pc, #188]	; (8001770 <HAL_TIM_MspPostInit+0x150>)
 80016b2:	f043 0301 	orr.w	r3, r3, #1
 80016b6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016b8:	4b2d      	ldr	r3, [pc, #180]	; (8001770 <HAL_TIM_MspPostInit+0x150>)
 80016ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	617b      	str	r3, [r7, #20]
 80016c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c4:	4b2a      	ldr	r3, [pc, #168]	; (8001770 <HAL_TIM_MspPostInit+0x150>)
 80016c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016c8:	4a29      	ldr	r2, [pc, #164]	; (8001770 <HAL_TIM_MspPostInit+0x150>)
 80016ca:	f043 0302 	orr.w	r3, r3, #2
 80016ce:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016d0:	4b27      	ldr	r3, [pc, #156]	; (8001770 <HAL_TIM_MspPostInit+0x150>)
 80016d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016d4:	f003 0302 	and.w	r3, r3, #2
 80016d8:	613b      	str	r3, [r7, #16]
 80016da:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 80016dc:	2350      	movs	r3, #80	; 0x50
 80016de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e0:	2302      	movs	r3, #2
 80016e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e4:	2300      	movs	r3, #0
 80016e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ec:	2302      	movs	r3, #2
 80016ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016f0:	f107 031c 	add.w	r3, r7, #28
 80016f4:	4619      	mov	r1, r3
 80016f6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016fa:	f000 fb1f 	bl	8001d3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80016fe:	2303      	movs	r3, #3
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800170e:	2302      	movs	r3, #2
 8001710:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001712:	f107 031c 	add.w	r3, r7, #28
 8001716:	4619      	mov	r1, r3
 8001718:	4817      	ldr	r0, [pc, #92]	; (8001778 <HAL_TIM_MspPostInit+0x158>)
 800171a:	f000 fb0f 	bl	8001d3c <HAL_GPIO_Init>
}
 800171e:	e022      	b.n	8001766 <HAL_TIM_MspPostInit+0x146>
  else if(htim->Instance==TIM4)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a15      	ldr	r2, [pc, #84]	; (800177c <HAL_TIM_MspPostInit+0x15c>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d11d      	bne.n	8001766 <HAL_TIM_MspPostInit+0x146>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172a:	4b11      	ldr	r3, [pc, #68]	; (8001770 <HAL_TIM_MspPostInit+0x150>)
 800172c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800172e:	4a10      	ldr	r2, [pc, #64]	; (8001770 <HAL_TIM_MspPostInit+0x150>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001736:	4b0e      	ldr	r3, [pc, #56]	; (8001770 <HAL_TIM_MspPostInit+0x150>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800173a:	f003 0301 	and.w	r3, r3, #1
 800173e:	60fb      	str	r3, [r7, #12]
 8001740:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8001742:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001748:	2302      	movs	r3, #2
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	2300      	movs	r3, #0
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2300      	movs	r3, #0
 8001752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_TIM4;
 8001754:	230a      	movs	r3, #10
 8001756:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001758:	f107 031c 	add.w	r3, r7, #28
 800175c:	4619      	mov	r1, r3
 800175e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001762:	f000 faeb 	bl	8001d3c <HAL_GPIO_Init>
}
 8001766:	bf00      	nop
 8001768:	3730      	adds	r7, #48	; 0x30
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40021000 	.word	0x40021000
 8001774:	40000400 	.word	0x40000400
 8001778:	48000400 	.word	0x48000400
 800177c:	40000800 	.word	0x40000800

08001780 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08c      	sub	sp, #48	; 0x30
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	4a2f      	ldr	r2, [pc, #188]	; (800185c <HAL_UART_MspInit+0xdc>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d128      	bne.n	80017f4 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80017a2:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <HAL_UART_MspInit+0xe0>)
 80017a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017a6:	4a2e      	ldr	r2, [pc, #184]	; (8001860 <HAL_UART_MspInit+0xe0>)
 80017a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017ac:	6613      	str	r3, [r2, #96]	; 0x60
 80017ae:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <HAL_UART_MspInit+0xe0>)
 80017b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ba:	4b29      	ldr	r3, [pc, #164]	; (8001860 <HAL_UART_MspInit+0xe0>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017be:	4a28      	ldr	r2, [pc, #160]	; (8001860 <HAL_UART_MspInit+0xe0>)
 80017c0:	f043 0304 	orr.w	r3, r3, #4
 80017c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80017c6:	4b26      	ldr	r3, [pc, #152]	; (8001860 <HAL_UART_MspInit+0xe0>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80017ca:	f003 0304 	and.w	r3, r3, #4
 80017ce:	617b      	str	r3, [r7, #20]
 80017d0:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80017d2:	2330      	movs	r3, #48	; 0x30
 80017d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017e2:	2307      	movs	r3, #7
 80017e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017e6:	f107 031c 	add.w	r3, r7, #28
 80017ea:	4619      	mov	r1, r3
 80017ec:	481d      	ldr	r0, [pc, #116]	; (8001864 <HAL_UART_MspInit+0xe4>)
 80017ee:	f000 faa5 	bl	8001d3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017f2:	e02e      	b.n	8001852 <HAL_UART_MspInit+0xd2>
  else if(huart->Instance==USART2)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4a1b      	ldr	r2, [pc, #108]	; (8001868 <HAL_UART_MspInit+0xe8>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d129      	bne.n	8001852 <HAL_UART_MspInit+0xd2>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017fe:	4b18      	ldr	r3, [pc, #96]	; (8001860 <HAL_UART_MspInit+0xe0>)
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001802:	4a17      	ldr	r2, [pc, #92]	; (8001860 <HAL_UART_MspInit+0xe0>)
 8001804:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001808:	6593      	str	r3, [r2, #88]	; 0x58
 800180a:	4b15      	ldr	r3, [pc, #84]	; (8001860 <HAL_UART_MspInit+0xe0>)
 800180c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800180e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001812:	613b      	str	r3, [r7, #16]
 8001814:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001816:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_UART_MspInit+0xe0>)
 8001818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800181a:	4a11      	ldr	r2, [pc, #68]	; (8001860 <HAL_UART_MspInit+0xe0>)
 800181c:	f043 0301 	orr.w	r3, r3, #1
 8001820:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001822:	4b0f      	ldr	r3, [pc, #60]	; (8001860 <HAL_UART_MspInit+0xe0>)
 8001824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	60fb      	str	r3, [r7, #12]
 800182c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800182e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001834:	2302      	movs	r3, #2
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001838:	2300      	movs	r3, #0
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800183c:	2300      	movs	r3, #0
 800183e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001840:	2307      	movs	r3, #7
 8001842:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001844:	f107 031c 	add.w	r3, r7, #28
 8001848:	4619      	mov	r1, r3
 800184a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800184e:	f000 fa75 	bl	8001d3c <HAL_GPIO_Init>
}
 8001852:	bf00      	nop
 8001854:	3730      	adds	r7, #48	; 0x30
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	40013800 	.word	0x40013800
 8001860:	40021000 	.word	0x40021000
 8001864:	48000800 	.word	0x48000800
 8001868:	40004400 	.word	0x40004400

0800186c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800186c:	b480      	push	{r7}
 800186e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001870:	bf00      	nop
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr

0800187a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800187a:	b480      	push	{r7}
 800187c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187e:	e7fe      	b.n	800187e <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	e7fe      	b.n	8001884 <MemManage_Handler+0x4>

08001886 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001886:	b480      	push	{r7}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188a:	e7fe      	b.n	800188a <BusFault_Handler+0x4>

0800188c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001890:	e7fe      	b.n	8001890 <UsageFault_Handler+0x4>

08001892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001892:	b480      	push	{r7}
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001896:	bf00      	nop
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr

080018ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c0:	f000 f8a8 	bl	8001a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c4:	bf00      	nop
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80018cc:	4802      	ldr	r0, [pc, #8]	; (80018d8 <USART1_IRQHandler+0x10>)
 80018ce:	f002 fb41 	bl	8003f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80018d2:	bf00      	nop
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	200000c0 	.word	0x200000c0

080018dc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80018e0:	4802      	ldr	r0, [pc, #8]	; (80018ec <USART2_IRQHandler+0x10>)
 80018e2:	f002 fb37 	bl	8003f54 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80018e6:	bf00      	nop
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	20000190 	.word	0x20000190

080018f0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80018f0:	b480      	push	{r7}
 80018f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <SystemInit+0x28>)
 80018f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018fa:	4a07      	ldr	r2, [pc, #28]	; (8001918 <SystemInit+0x28>)
 80018fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001900:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <SystemInit+0x28>)
 8001906:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800190a:	609a      	str	r2, [r3, #8]
#endif
}
 800190c:	bf00      	nop
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800191c:	480d      	ldr	r0, [pc, #52]	; (8001954 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800191e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001920:	480d      	ldr	r0, [pc, #52]	; (8001958 <LoopForever+0x6>)
  ldr r1, =_edata
 8001922:	490e      	ldr	r1, [pc, #56]	; (800195c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001924:	4a0e      	ldr	r2, [pc, #56]	; (8001960 <LoopForever+0xe>)
  movs r3, #0
 8001926:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001928:	e002      	b.n	8001930 <LoopCopyDataInit>

0800192a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800192a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800192c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800192e:	3304      	adds	r3, #4

08001930 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001930:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001932:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001934:	d3f9      	bcc.n	800192a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001936:	4a0b      	ldr	r2, [pc, #44]	; (8001964 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001938:	4c0b      	ldr	r4, [pc, #44]	; (8001968 <LoopForever+0x16>)
  movs r3, #0
 800193a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800193c:	e001      	b.n	8001942 <LoopFillZerobss>

0800193e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800193e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001940:	3204      	adds	r2, #4

08001942 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001942:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001944:	d3fb      	bcc.n	800193e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001946:	f7ff ffd3 	bl	80018f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800194a:	f004 faad 	bl	8005ea8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800194e:	f7fe fde3 	bl	8000518 <main>

08001952 <LoopForever>:

LoopForever:
    b LoopForever
 8001952:	e7fe      	b.n	8001952 <LoopForever>
  ldr   r0, =_estack
 8001954:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001958:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800195c:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8001960:	08005f50 	.word	0x08005f50
  ldr r2, =_sbss
 8001964:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8001968:	20000220 	.word	0x20000220

0800196c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800196c:	e7fe      	b.n	800196c <ADC1_2_IRQHandler>

0800196e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800196e:	b580      	push	{r7, lr}
 8001970:	b082      	sub	sp, #8
 8001972:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001974:	2300      	movs	r3, #0
 8001976:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001978:	2003      	movs	r0, #3
 800197a:	f000 f939 	bl	8001bf0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800197e:	2000      	movs	r0, #0
 8001980:	f000 f80e 	bl	80019a0 <HAL_InitTick>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d002      	beq.n	8001990 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	71fb      	strb	r3, [r7, #7]
 800198e:	e001      	b.n	8001994 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001990:	f7ff fddc 	bl	800154c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001994:	79fb      	ldrb	r3, [r7, #7]

}
 8001996:	4618      	mov	r0, r3
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
	...

080019a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80019a8:	2300      	movs	r3, #0
 80019aa:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80019ac:	4b16      	ldr	r3, [pc, #88]	; (8001a08 <HAL_InitTick+0x68>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d022      	beq.n	80019fa <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80019b4:	4b15      	ldr	r3, [pc, #84]	; (8001a0c <HAL_InitTick+0x6c>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4b13      	ldr	r3, [pc, #76]	; (8001a08 <HAL_InitTick+0x68>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80019c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80019c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f944 	bl	8001c56 <HAL_SYSTICK_Config>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10f      	bne.n	80019f4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2b0f      	cmp	r3, #15
 80019d8:	d809      	bhi.n	80019ee <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019da:	2200      	movs	r2, #0
 80019dc:	6879      	ldr	r1, [r7, #4]
 80019de:	f04f 30ff 	mov.w	r0, #4294967295
 80019e2:	f000 f910 	bl	8001c06 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80019e6:	4a0a      	ldr	r2, [pc, #40]	; (8001a10 <HAL_InitTick+0x70>)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6013      	str	r3, [r2, #0]
 80019ec:	e007      	b.n	80019fe <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	73fb      	strb	r3, [r7, #15]
 80019f2:	e004      	b.n	80019fe <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	73fb      	strb	r3, [r7, #15]
 80019f8:	e001      	b.n	80019fe <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80019fa:	2301      	movs	r3, #1
 80019fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80019fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	2000001c 	.word	0x2000001c
 8001a0c:	20000014 	.word	0x20000014
 8001a10:	20000018 	.word	0x20000018

08001a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a18:	4b05      	ldr	r3, [pc, #20]	; (8001a30 <HAL_IncTick+0x1c>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <HAL_IncTick+0x20>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4413      	add	r3, r2
 8001a22:	4a03      	ldr	r2, [pc, #12]	; (8001a30 <HAL_IncTick+0x1c>)
 8001a24:	6013      	str	r3, [r2, #0]
}
 8001a26:	bf00      	nop
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2e:	4770      	bx	lr
 8001a30:	2000021c 	.word	0x2000021c
 8001a34:	2000001c 	.word	0x2000001c

08001a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001a3c:	4b03      	ldr	r3, [pc, #12]	; (8001a4c <HAL_GetTick+0x14>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
}
 8001a40:	4618      	mov	r0, r3
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	2000021c 	.word	0x2000021c

08001a50 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	f003 0307 	and.w	r3, r3, #7
 8001a5e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a66:	68ba      	ldr	r2, [r7, #8]
 8001a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a82:	4a04      	ldr	r2, [pc, #16]	; (8001a94 <__NVIC_SetPriorityGrouping+0x44>)
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	60d3      	str	r3, [r2, #12]
}
 8001a88:	bf00      	nop
 8001a8a:	3714      	adds	r7, #20
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	e000ed00 	.word	0xe000ed00

08001a98 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	0a1b      	lsrs	r3, r3, #8
 8001aa2:	f003 0307 	and.w	r3, r3, #7
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db0b      	blt.n	8001ade <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	f003 021f 	and.w	r2, r3, #31
 8001acc:	4907      	ldr	r1, [pc, #28]	; (8001aec <__NVIC_EnableIRQ+0x38>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	095b      	lsrs	r3, r3, #5
 8001ad4:	2001      	movs	r0, #1
 8001ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8001ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	4603      	mov	r3, r0
 8001af8:	6039      	str	r1, [r7, #0]
 8001afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	db0a      	blt.n	8001b1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	490c      	ldr	r1, [pc, #48]	; (8001b3c <__NVIC_SetPriority+0x4c>)
 8001b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0e:	0112      	lsls	r2, r2, #4
 8001b10:	b2d2      	uxtb	r2, r2
 8001b12:	440b      	add	r3, r1
 8001b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b18:	e00a      	b.n	8001b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	b2da      	uxtb	r2, r3
 8001b1e:	4908      	ldr	r1, [pc, #32]	; (8001b40 <__NVIC_SetPriority+0x50>)
 8001b20:	79fb      	ldrb	r3, [r7, #7]
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	3b04      	subs	r3, #4
 8001b28:	0112      	lsls	r2, r2, #4
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	761a      	strb	r2, [r3, #24]
}
 8001b30:	bf00      	nop
 8001b32:	370c      	adds	r7, #12
 8001b34:	46bd      	mov	sp, r7
 8001b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3a:	4770      	bx	lr
 8001b3c:	e000e100 	.word	0xe000e100
 8001b40:	e000ed00 	.word	0xe000ed00

08001b44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	; 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	f003 0307 	and.w	r3, r3, #7
 8001b56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	f1c3 0307 	rsb	r3, r3, #7
 8001b5e:	2b04      	cmp	r3, #4
 8001b60:	bf28      	it	cs
 8001b62:	2304      	movcs	r3, #4
 8001b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b66:	69fb      	ldr	r3, [r7, #28]
 8001b68:	3304      	adds	r3, #4
 8001b6a:	2b06      	cmp	r3, #6
 8001b6c:	d902      	bls.n	8001b74 <NVIC_EncodePriority+0x30>
 8001b6e:	69fb      	ldr	r3, [r7, #28]
 8001b70:	3b03      	subs	r3, #3
 8001b72:	e000      	b.n	8001b76 <NVIC_EncodePriority+0x32>
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b78:	f04f 32ff 	mov.w	r2, #4294967295
 8001b7c:	69bb      	ldr	r3, [r7, #24]
 8001b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b82:	43da      	mvns	r2, r3
 8001b84:	68bb      	ldr	r3, [r7, #8]
 8001b86:	401a      	ands	r2, r3
 8001b88:	697b      	ldr	r3, [r7, #20]
 8001b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	fa01 f303 	lsl.w	r3, r1, r3
 8001b96:	43d9      	mvns	r1, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b9c:	4313      	orrs	r3, r2
         );
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3724      	adds	r7, #36	; 0x24
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba8:	4770      	bx	lr
	...

08001bac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b082      	sub	sp, #8
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	3b01      	subs	r3, #1
 8001bb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bbc:	d301      	bcc.n	8001bc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e00f      	b.n	8001be2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001bc2:	4a0a      	ldr	r2, [pc, #40]	; (8001bec <SysTick_Config+0x40>)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	3b01      	subs	r3, #1
 8001bc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001bca:	210f      	movs	r1, #15
 8001bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd0:	f7ff ff8e 	bl	8001af0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <SysTick_Config+0x40>)
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bda:	4b04      	ldr	r3, [pc, #16]	; (8001bec <SysTick_Config+0x40>)
 8001bdc:	2207      	movs	r2, #7
 8001bde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3708      	adds	r7, #8
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	e000e010 	.word	0xe000e010

08001bf0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f7ff ff29 	bl	8001a50 <__NVIC_SetPriorityGrouping>
}
 8001bfe:	bf00      	nop
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b086      	sub	sp, #24
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
 8001c12:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001c14:	f7ff ff40 	bl	8001a98 <__NVIC_GetPriorityGrouping>
 8001c18:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68b9      	ldr	r1, [r7, #8]
 8001c1e:	6978      	ldr	r0, [r7, #20]
 8001c20:	f7ff ff90 	bl	8001b44 <NVIC_EncodePriority>
 8001c24:	4602      	mov	r2, r0
 8001c26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c2a:	4611      	mov	r1, r2
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff5f 	bl	8001af0 <__NVIC_SetPriority>
}
 8001c32:	bf00      	nop
 8001c34:	3718      	adds	r7, #24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	4603      	mov	r3, r0
 8001c42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f7ff ff33 	bl	8001ab4 <__NVIC_EnableIRQ>
}
 8001c4e:	bf00      	nop
 8001c50:	3708      	adds	r7, #8
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}

08001c56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c56:	b580      	push	{r7, lr}
 8001c58:	b082      	sub	sp, #8
 8001c5a:	af00      	add	r7, sp, #0
 8001c5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f7ff ffa4 	bl	8001bac <SysTick_Config>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3708      	adds	r7, #8
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b084      	sub	sp, #16
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c76:	2300      	movs	r3, #0
 8001c78:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d00d      	beq.n	8001ca2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	2204      	movs	r2, #4
 8001c8a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2201      	movs	r2, #1
 8001c90:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	2200      	movs	r2, #0
 8001c98:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	73fb      	strb	r3, [r7, #15]
 8001ca0:	e047      	b.n	8001d32 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	681a      	ldr	r2, [r3, #0]
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f022 020e 	bic.w	r2, r2, #14
 8001cb0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 0201 	bic.w	r2, r2, #1
 8001cc0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ccc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001cd0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cd6:	f003 021f 	and.w	r2, r3, #31
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cde:	2101      	movs	r1, #1
 8001ce0:	fa01 f202 	lsl.w	r2, r1, r2
 8001ce4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001cea:	687a      	ldr	r2, [r7, #4]
 8001cec:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001cee:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d00c      	beq.n	8001d12 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d02:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001d06:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001d10:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2201      	movs	r2, #1
 8001d16:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d003      	beq.n	8001d32 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2e:	6878      	ldr	r0, [r7, #4]
 8001d30:	4798      	blx	r3
    }
  }
  return status;
 8001d32:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3710      	adds	r7, #16
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001d46:	2300      	movs	r3, #0
 8001d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d4a:	e15a      	b.n	8002002 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	2101      	movs	r1, #1
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	fa01 f303 	lsl.w	r3, r1, r3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	f000 814c 	beq.w	8001ffc <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d64:	683b      	ldr	r3, [r7, #0]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	2b02      	cmp	r3, #2
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x38>
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b12      	cmp	r3, #18
 8001d72:	d123      	bne.n	8001dbc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	08da      	lsrs	r2, r3, #3
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3208      	adds	r2, #8
 8001d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d80:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f003 0307 	and.w	r3, r3, #7
 8001d88:	009b      	lsls	r3, r3, #2
 8001d8a:	220f      	movs	r2, #15
 8001d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d90:	43db      	mvns	r3, r3
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	4013      	ands	r3, r2
 8001d96:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	691a      	ldr	r2, [r3, #16]
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	f003 0307 	and.w	r3, r3, #7
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	fa02 f303 	lsl.w	r3, r2, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	08da      	lsrs	r2, r3, #3
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	3208      	adds	r2, #8
 8001db6:	6939      	ldr	r1, [r7, #16]
 8001db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001dc2:	697b      	ldr	r3, [r7, #20]
 8001dc4:	005b      	lsls	r3, r3, #1
 8001dc6:	2203      	movs	r2, #3
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	693a      	ldr	r2, [r7, #16]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f003 0203 	and.w	r2, r3, #3
 8001ddc:	697b      	ldr	r3, [r7, #20]
 8001dde:	005b      	lsls	r3, r3, #1
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	693a      	ldr	r2, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d00b      	beq.n	8001e10 <HAL_GPIO_Init+0xd4>
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d007      	beq.n	8001e10 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e04:	2b11      	cmp	r3, #17
 8001e06:	d003      	beq.n	8001e10 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	2b12      	cmp	r3, #18
 8001e0e:	d130      	bne.n	8001e72 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	005b      	lsls	r3, r3, #1
 8001e1a:	2203      	movs	r2, #3
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	43db      	mvns	r3, r3
 8001e22:	693a      	ldr	r2, [r7, #16]
 8001e24:	4013      	ands	r3, r2
 8001e26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	68da      	ldr	r2, [r3, #12]
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	005b      	lsls	r3, r3, #1
 8001e30:	fa02 f303 	lsl.w	r3, r2, r3
 8001e34:	693a      	ldr	r2, [r7, #16]
 8001e36:	4313      	orrs	r3, r2
 8001e38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	693a      	ldr	r2, [r7, #16]
 8001e3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001e46:	2201      	movs	r2, #1
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e4e:	43db      	mvns	r3, r3
 8001e50:	693a      	ldr	r2, [r7, #16]
 8001e52:	4013      	ands	r3, r2
 8001e54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	091b      	lsrs	r3, r3, #4
 8001e5c:	f003 0201 	and.w	r2, r3, #1
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	fa02 f303 	lsl.w	r3, r2, r3
 8001e66:	693a      	ldr	r2, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	693a      	ldr	r2, [r7, #16]
 8001e70:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	2203      	movs	r2, #3
 8001e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e82:	43db      	mvns	r3, r3
 8001e84:	693a      	ldr	r2, [r7, #16]
 8001e86:	4013      	ands	r3, r2
 8001e88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	689a      	ldr	r2, [r3, #8]
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	005b      	lsls	r3, r3, #1
 8001e92:	fa02 f303 	lsl.w	r3, r2, r3
 8001e96:	693a      	ldr	r2, [r7, #16]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	693a      	ldr	r2, [r7, #16]
 8001ea0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ea2:	683b      	ldr	r3, [r7, #0]
 8001ea4:	685b      	ldr	r3, [r3, #4]
 8001ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	f000 80a6 	beq.w	8001ffc <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eb0:	4b5b      	ldr	r3, [pc, #364]	; (8002020 <HAL_GPIO_Init+0x2e4>)
 8001eb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eb4:	4a5a      	ldr	r2, [pc, #360]	; (8002020 <HAL_GPIO_Init+0x2e4>)
 8001eb6:	f043 0301 	orr.w	r3, r3, #1
 8001eba:	6613      	str	r3, [r2, #96]	; 0x60
 8001ebc:	4b58      	ldr	r3, [pc, #352]	; (8002020 <HAL_GPIO_Init+0x2e4>)
 8001ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec0:	f003 0301 	and.w	r3, r3, #1
 8001ec4:	60bb      	str	r3, [r7, #8]
 8001ec6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ec8:	4a56      	ldr	r2, [pc, #344]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	089b      	lsrs	r3, r3, #2
 8001ece:	3302      	adds	r3, #2
 8001ed0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	f003 0303 	and.w	r3, r3, #3
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	220f      	movs	r2, #15
 8001ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee4:	43db      	mvns	r3, r3
 8001ee6:	693a      	ldr	r2, [r7, #16]
 8001ee8:	4013      	ands	r3, r2
 8001eea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001ef2:	d01f      	beq.n	8001f34 <HAL_GPIO_Init+0x1f8>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	4a4c      	ldr	r2, [pc, #304]	; (8002028 <HAL_GPIO_Init+0x2ec>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d019      	beq.n	8001f30 <HAL_GPIO_Init+0x1f4>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4a4b      	ldr	r2, [pc, #300]	; (800202c <HAL_GPIO_Init+0x2f0>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d013      	beq.n	8001f2c <HAL_GPIO_Init+0x1f0>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4a4a      	ldr	r2, [pc, #296]	; (8002030 <HAL_GPIO_Init+0x2f4>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	d00d      	beq.n	8001f28 <HAL_GPIO_Init+0x1ec>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	4a49      	ldr	r2, [pc, #292]	; (8002034 <HAL_GPIO_Init+0x2f8>)
 8001f10:	4293      	cmp	r3, r2
 8001f12:	d007      	beq.n	8001f24 <HAL_GPIO_Init+0x1e8>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	4a48      	ldr	r2, [pc, #288]	; (8002038 <HAL_GPIO_Init+0x2fc>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	d101      	bne.n	8001f20 <HAL_GPIO_Init+0x1e4>
 8001f1c:	2305      	movs	r3, #5
 8001f1e:	e00a      	b.n	8001f36 <HAL_GPIO_Init+0x1fa>
 8001f20:	2306      	movs	r3, #6
 8001f22:	e008      	b.n	8001f36 <HAL_GPIO_Init+0x1fa>
 8001f24:	2304      	movs	r3, #4
 8001f26:	e006      	b.n	8001f36 <HAL_GPIO_Init+0x1fa>
 8001f28:	2303      	movs	r3, #3
 8001f2a:	e004      	b.n	8001f36 <HAL_GPIO_Init+0x1fa>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	e002      	b.n	8001f36 <HAL_GPIO_Init+0x1fa>
 8001f30:	2301      	movs	r3, #1
 8001f32:	e000      	b.n	8001f36 <HAL_GPIO_Init+0x1fa>
 8001f34:	2300      	movs	r3, #0
 8001f36:	697a      	ldr	r2, [r7, #20]
 8001f38:	f002 0203 	and.w	r2, r2, #3
 8001f3c:	0092      	lsls	r2, r2, #2
 8001f3e:	4093      	lsls	r3, r2
 8001f40:	693a      	ldr	r2, [r7, #16]
 8001f42:	4313      	orrs	r3, r2
 8001f44:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f46:	4937      	ldr	r1, [pc, #220]	; (8002024 <HAL_GPIO_Init+0x2e8>)
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	089b      	lsrs	r3, r3, #2
 8001f4c:	3302      	adds	r3, #2
 8001f4e:	693a      	ldr	r2, [r7, #16]
 8001f50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f54:	4b39      	ldr	r3, [pc, #228]	; (800203c <HAL_GPIO_Init+0x300>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f78:	4a30      	ldr	r2, [pc, #192]	; (800203c <HAL_GPIO_Init+0x300>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8001f7e:	4b2f      	ldr	r3, [pc, #188]	; (800203c <HAL_GPIO_Init+0x300>)
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001fa2:	4a26      	ldr	r2, [pc, #152]	; (800203c <HAL_GPIO_Init+0x300>)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001fa8:	4b24      	ldr	r3, [pc, #144]	; (800203c <HAL_GPIO_Init+0x300>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	693a      	ldr	r2, [r7, #16]
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d003      	beq.n	8001fcc <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001fc4:	693a      	ldr	r2, [r7, #16]
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fcc:	4a1b      	ldr	r2, [pc, #108]	; (800203c <HAL_GPIO_Init+0x300>)
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fd2:	4b1a      	ldr	r3, [pc, #104]	; (800203c <HAL_GPIO_Init+0x300>)
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	43db      	mvns	r3, r3
 8001fdc:	693a      	ldr	r2, [r7, #16]
 8001fde:	4013      	ands	r3, r2
 8001fe0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d003      	beq.n	8001ff6 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001fee:	693a      	ldr	r2, [r7, #16]
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	4313      	orrs	r3, r2
 8001ff4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ff6:	4a11      	ldr	r2, [pc, #68]	; (800203c <HAL_GPIO_Init+0x300>)
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	3301      	adds	r3, #1
 8002000:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	697b      	ldr	r3, [r7, #20]
 8002008:	fa22 f303 	lsr.w	r3, r2, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	f47f ae9d 	bne.w	8001d4c <HAL_GPIO_Init+0x10>
  }
}
 8002012:	bf00      	nop
 8002014:	371c      	adds	r7, #28
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40021000 	.word	0x40021000
 8002024:	40010000 	.word	0x40010000
 8002028:	48000400 	.word	0x48000400
 800202c:	48000800 	.word	0x48000800
 8002030:	48000c00 	.word	0x48000c00
 8002034:	48001000 	.word	0x48001000
 8002038:	48001400 	.word	0x48001400
 800203c:	40010400 	.word	0x40010400

08002040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	460b      	mov	r3, r1
 800204a:	807b      	strh	r3, [r7, #2]
 800204c:	4613      	mov	r3, r2
 800204e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002050:	787b      	ldrb	r3, [r7, #1]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d003      	beq.n	800205e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002056:	887a      	ldrh	r2, [r7, #2]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800205c:	e002      	b.n	8002064 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800205e:	887a      	ldrh	r2, [r7, #2]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002064:	bf00      	nop
 8002066:	370c      	adds	r7, #12
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002070:	b480      	push	{r7}
 8002072:	b085      	sub	sp, #20
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d141      	bne.n	8002102 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800207e:	4b4b      	ldr	r3, [pc, #300]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002086:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800208a:	d131      	bne.n	80020f0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800208c:	4b47      	ldr	r3, [pc, #284]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002092:	4a46      	ldr	r2, [pc, #280]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002098:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800209c:	4b43      	ldr	r3, [pc, #268]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020a4:	4a41      	ldr	r2, [pc, #260]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020aa:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020ac:	4b40      	ldr	r3, [pc, #256]	; (80021b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	2232      	movs	r2, #50	; 0x32
 80020b2:	fb02 f303 	mul.w	r3, r2, r3
 80020b6:	4a3f      	ldr	r2, [pc, #252]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80020b8:	fba2 2303 	umull	r2, r3, r2, r3
 80020bc:	0c9b      	lsrs	r3, r3, #18
 80020be:	3301      	adds	r3, #1
 80020c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020c2:	e002      	b.n	80020ca <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	3b01      	subs	r3, #1
 80020c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80020ca:	4b38      	ldr	r3, [pc, #224]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d6:	d102      	bne.n	80020de <HAL_PWREx_ControlVoltageScaling+0x6e>
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f2      	bne.n	80020c4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80020de:	4b33      	ldr	r3, [pc, #204]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020e0:	695b      	ldr	r3, [r3, #20]
 80020e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020ea:	d158      	bne.n	800219e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e057      	b.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80020f0:	4b2e      	ldr	r3, [pc, #184]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80020f6:	4a2d      	ldr	r2, [pc, #180]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80020f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020fc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8002100:	e04d      	b.n	800219e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002108:	d141      	bne.n	800218e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800210a:	4b28      	ldr	r3, [pc, #160]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002112:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002116:	d131      	bne.n	800217c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002118:	4b24      	ldr	r3, [pc, #144]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800211a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800211e:	4a23      	ldr	r2, [pc, #140]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002120:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002124:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002128:	4b20      	ldr	r3, [pc, #128]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002130:	4a1e      	ldr	r2, [pc, #120]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002136:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002138:	4b1d      	ldr	r3, [pc, #116]	; (80021b0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2232      	movs	r2, #50	; 0x32
 800213e:	fb02 f303 	mul.w	r3, r2, r3
 8002142:	4a1c      	ldr	r2, [pc, #112]	; (80021b4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002144:	fba2 2303 	umull	r2, r3, r2, r3
 8002148:	0c9b      	lsrs	r3, r3, #18
 800214a:	3301      	adds	r3, #1
 800214c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800214e:	e002      	b.n	8002156 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	3b01      	subs	r3, #1
 8002154:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800215e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002162:	d102      	bne.n	800216a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d1f2      	bne.n	8002150 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800216a:	4b10      	ldr	r3, [pc, #64]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800216c:	695b      	ldr	r3, [r3, #20]
 800216e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002172:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002176:	d112      	bne.n	800219e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e011      	b.n	80021a0 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800217c:	4b0b      	ldr	r3, [pc, #44]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800217e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002182:	4a0a      	ldr	r2, [pc, #40]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002184:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002188:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800218c:	e007      	b.n	800219e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800218e:	4b07      	ldr	r3, [pc, #28]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002196:	4a05      	ldr	r2, [pc, #20]	; (80021ac <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002198:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800219c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	40007000 	.word	0x40007000
 80021b0:	20000014 	.word	0x20000014
 80021b4:	431bde83 	.word	0x431bde83

080021b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e308      	b.n	80027dc <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d075      	beq.n	80022c2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021d6:	4ba3      	ldr	r3, [pc, #652]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	f003 030c 	and.w	r3, r3, #12
 80021de:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021e0:	4ba0      	ldr	r3, [pc, #640]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f003 0303 	and.w	r3, r3, #3
 80021e8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80021ea:	69bb      	ldr	r3, [r7, #24]
 80021ec:	2b0c      	cmp	r3, #12
 80021ee:	d102      	bne.n	80021f6 <HAL_RCC_OscConfig+0x3e>
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2b03      	cmp	r3, #3
 80021f4:	d002      	beq.n	80021fc <HAL_RCC_OscConfig+0x44>
 80021f6:	69bb      	ldr	r3, [r7, #24]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d10b      	bne.n	8002214 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021fc:	4b99      	ldr	r3, [pc, #612]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002204:	2b00      	cmp	r3, #0
 8002206:	d05b      	beq.n	80022c0 <HAL_RCC_OscConfig+0x108>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d157      	bne.n	80022c0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e2e3      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800221c:	d106      	bne.n	800222c <HAL_RCC_OscConfig+0x74>
 800221e:	4b91      	ldr	r3, [pc, #580]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4a90      	ldr	r2, [pc, #576]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002224:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002228:	6013      	str	r3, [r2, #0]
 800222a:	e01d      	b.n	8002268 <HAL_RCC_OscConfig+0xb0>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002234:	d10c      	bne.n	8002250 <HAL_RCC_OscConfig+0x98>
 8002236:	4b8b      	ldr	r3, [pc, #556]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	4a8a      	ldr	r2, [pc, #552]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 800223c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002240:	6013      	str	r3, [r2, #0]
 8002242:	4b88      	ldr	r3, [pc, #544]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a87      	ldr	r2, [pc, #540]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002248:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	e00b      	b.n	8002268 <HAL_RCC_OscConfig+0xb0>
 8002250:	4b84      	ldr	r3, [pc, #528]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a83      	ldr	r2, [pc, #524]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800225a:	6013      	str	r3, [r2, #0]
 800225c:	4b81      	ldr	r3, [pc, #516]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a80      	ldr	r2, [pc, #512]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002262:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002266:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d013      	beq.n	8002298 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002270:	f7ff fbe2 	bl	8001a38 <HAL_GetTick>
 8002274:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002276:	e008      	b.n	800228a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002278:	f7ff fbde 	bl	8001a38 <HAL_GetTick>
 800227c:	4602      	mov	r2, r0
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	2b64      	cmp	r3, #100	; 0x64
 8002284:	d901      	bls.n	800228a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002286:	2303      	movs	r3, #3
 8002288:	e2a8      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800228a:	4b76      	ldr	r3, [pc, #472]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d0f0      	beq.n	8002278 <HAL_RCC_OscConfig+0xc0>
 8002296:	e014      	b.n	80022c2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002298:	f7ff fbce 	bl	8001a38 <HAL_GetTick>
 800229c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800229e:	e008      	b.n	80022b2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a0:	f7ff fbca 	bl	8001a38 <HAL_GetTick>
 80022a4:	4602      	mov	r2, r0
 80022a6:	693b      	ldr	r3, [r7, #16]
 80022a8:	1ad3      	subs	r3, r2, r3
 80022aa:	2b64      	cmp	r3, #100	; 0x64
 80022ac:	d901      	bls.n	80022b2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e294      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022b2:	4b6c      	ldr	r3, [pc, #432]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1f0      	bne.n	80022a0 <HAL_RCC_OscConfig+0xe8>
 80022be:	e000      	b.n	80022c2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0302 	and.w	r3, r3, #2
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d075      	beq.n	80023ba <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80022ce:	4b65      	ldr	r3, [pc, #404]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f003 030c 	and.w	r3, r3, #12
 80022d6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80022d8:	4b62      	ldr	r3, [pc, #392]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 80022da:	68db      	ldr	r3, [r3, #12]
 80022dc:	f003 0303 	and.w	r3, r3, #3
 80022e0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	2b0c      	cmp	r3, #12
 80022e6:	d102      	bne.n	80022ee <HAL_RCC_OscConfig+0x136>
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d002      	beq.n	80022f4 <HAL_RCC_OscConfig+0x13c>
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	2b04      	cmp	r3, #4
 80022f2:	d11f      	bne.n	8002334 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022f4:	4b5b      	ldr	r3, [pc, #364]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d005      	beq.n	800230c <HAL_RCC_OscConfig+0x154>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d101      	bne.n	800230c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e267      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800230c:	4b55      	ldr	r3, [pc, #340]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	691b      	ldr	r3, [r3, #16]
 8002318:	061b      	lsls	r3, r3, #24
 800231a:	4952      	ldr	r1, [pc, #328]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002320:	4b51      	ldr	r3, [pc, #324]	; (8002468 <HAL_RCC_OscConfig+0x2b0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4618      	mov	r0, r3
 8002326:	f7ff fb3b 	bl	80019a0 <HAL_InitTick>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d043      	beq.n	80023b8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002330:	2301      	movs	r3, #1
 8002332:	e253      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d023      	beq.n	8002384 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800233c:	4b49      	ldr	r3, [pc, #292]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a48      	ldr	r2, [pc, #288]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002342:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002346:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002348:	f7ff fb76 	bl	8001a38 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002350:	f7ff fb72 	bl	8001a38 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e23c      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002362:	4b40      	ldr	r3, [pc, #256]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800236a:	2b00      	cmp	r3, #0
 800236c:	d0f0      	beq.n	8002350 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800236e:	4b3d      	ldr	r3, [pc, #244]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002370:	685b      	ldr	r3, [r3, #4]
 8002372:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	691b      	ldr	r3, [r3, #16]
 800237a:	061b      	lsls	r3, r3, #24
 800237c:	4939      	ldr	r1, [pc, #228]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 800237e:	4313      	orrs	r3, r2
 8002380:	604b      	str	r3, [r1, #4]
 8002382:	e01a      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002384:	4b37      	ldr	r3, [pc, #220]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a36      	ldr	r2, [pc, #216]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 800238a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800238e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002390:	f7ff fb52 	bl	8001a38 <HAL_GetTick>
 8002394:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002396:	e008      	b.n	80023aa <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002398:	f7ff fb4e 	bl	8001a38 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	693b      	ldr	r3, [r7, #16]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d901      	bls.n	80023aa <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80023a6:	2303      	movs	r3, #3
 80023a8:	e218      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023aa:	4b2e      	ldr	r3, [pc, #184]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d1f0      	bne.n	8002398 <HAL_RCC_OscConfig+0x1e0>
 80023b6:	e000      	b.n	80023ba <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023b8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d03c      	beq.n	8002440 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	695b      	ldr	r3, [r3, #20]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d01c      	beq.n	8002408 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023ce:	4b25      	ldr	r3, [pc, #148]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 80023d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023d4:	4a23      	ldr	r2, [pc, #140]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023de:	f7ff fb2b 	bl	8001a38 <HAL_GetTick>
 80023e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023e4:	e008      	b.n	80023f8 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023e6:	f7ff fb27 	bl	8001a38 <HAL_GetTick>
 80023ea:	4602      	mov	r2, r0
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	1ad3      	subs	r3, r2, r3
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d901      	bls.n	80023f8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023f4:	2303      	movs	r3, #3
 80023f6:	e1f1      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80023f8:	4b1a      	ldr	r3, [pc, #104]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 80023fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	2b00      	cmp	r3, #0
 8002404:	d0ef      	beq.n	80023e6 <HAL_RCC_OscConfig+0x22e>
 8002406:	e01b      	b.n	8002440 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002408:	4b16      	ldr	r3, [pc, #88]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 800240a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800240e:	4a15      	ldr	r2, [pc, #84]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002410:	f023 0301 	bic.w	r3, r3, #1
 8002414:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002418:	f7ff fb0e 	bl	8001a38 <HAL_GetTick>
 800241c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800241e:	e008      	b.n	8002432 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002420:	f7ff fb0a 	bl	8001a38 <HAL_GetTick>
 8002424:	4602      	mov	r2, r0
 8002426:	693b      	ldr	r3, [r7, #16]
 8002428:	1ad3      	subs	r3, r2, r3
 800242a:	2b02      	cmp	r3, #2
 800242c:	d901      	bls.n	8002432 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800242e:	2303      	movs	r3, #3
 8002430:	e1d4      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002432:	4b0c      	ldr	r3, [pc, #48]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002434:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d1ef      	bne.n	8002420 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0304 	and.w	r3, r3, #4
 8002448:	2b00      	cmp	r3, #0
 800244a:	f000 80ab 	beq.w	80025a4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800244e:	2300      	movs	r3, #0
 8002450:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002452:	4b04      	ldr	r3, [pc, #16]	; (8002464 <HAL_RCC_OscConfig+0x2ac>)
 8002454:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002456:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800245a:	2b00      	cmp	r3, #0
 800245c:	d106      	bne.n	800246c <HAL_RCC_OscConfig+0x2b4>
 800245e:	2301      	movs	r3, #1
 8002460:	e005      	b.n	800246e <HAL_RCC_OscConfig+0x2b6>
 8002462:	bf00      	nop
 8002464:	40021000 	.word	0x40021000
 8002468:	20000018 	.word	0x20000018
 800246c:	2300      	movs	r3, #0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00d      	beq.n	800248e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002472:	4baf      	ldr	r3, [pc, #700]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002476:	4aae      	ldr	r2, [pc, #696]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002478:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800247c:	6593      	str	r3, [r2, #88]	; 0x58
 800247e:	4bac      	ldr	r3, [pc, #688]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002482:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800248a:	2301      	movs	r3, #1
 800248c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800248e:	4ba9      	ldr	r3, [pc, #676]	; (8002734 <HAL_RCC_OscConfig+0x57c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002496:	2b00      	cmp	r3, #0
 8002498:	d118      	bne.n	80024cc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800249a:	4ba6      	ldr	r3, [pc, #664]	; (8002734 <HAL_RCC_OscConfig+0x57c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4aa5      	ldr	r2, [pc, #660]	; (8002734 <HAL_RCC_OscConfig+0x57c>)
 80024a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024a6:	f7ff fac7 	bl	8001a38 <HAL_GetTick>
 80024aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ac:	e008      	b.n	80024c0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024ae:	f7ff fac3 	bl	8001a38 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b02      	cmp	r3, #2
 80024ba:	d901      	bls.n	80024c0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80024bc:	2303      	movs	r3, #3
 80024be:	e18d      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024c0:	4b9c      	ldr	r3, [pc, #624]	; (8002734 <HAL_RCC_OscConfig+0x57c>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d0f0      	beq.n	80024ae <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d108      	bne.n	80024e6 <HAL_RCC_OscConfig+0x32e>
 80024d4:	4b96      	ldr	r3, [pc, #600]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80024d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024da:	4a95      	ldr	r2, [pc, #596]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024e4:	e024      	b.n	8002530 <HAL_RCC_OscConfig+0x378>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	689b      	ldr	r3, [r3, #8]
 80024ea:	2b05      	cmp	r3, #5
 80024ec:	d110      	bne.n	8002510 <HAL_RCC_OscConfig+0x358>
 80024ee:	4b90      	ldr	r3, [pc, #576]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80024f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024f4:	4a8e      	ldr	r2, [pc, #568]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80024f6:	f043 0304 	orr.w	r3, r3, #4
 80024fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024fe:	4b8c      	ldr	r3, [pc, #560]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002500:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002504:	4a8a      	ldr	r2, [pc, #552]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002506:	f043 0301 	orr.w	r3, r3, #1
 800250a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800250e:	e00f      	b.n	8002530 <HAL_RCC_OscConfig+0x378>
 8002510:	4b87      	ldr	r3, [pc, #540]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002516:	4a86      	ldr	r2, [pc, #536]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002518:	f023 0301 	bic.w	r3, r3, #1
 800251c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002520:	4b83      	ldr	r3, [pc, #524]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002522:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002526:	4a82      	ldr	r2, [pc, #520]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002528:	f023 0304 	bic.w	r3, r3, #4
 800252c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	689b      	ldr	r3, [r3, #8]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d016      	beq.n	8002566 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002538:	f7ff fa7e 	bl	8001a38 <HAL_GetTick>
 800253c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800253e:	e00a      	b.n	8002556 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002540:	f7ff fa7a 	bl	8001a38 <HAL_GetTick>
 8002544:	4602      	mov	r2, r0
 8002546:	693b      	ldr	r3, [r7, #16]
 8002548:	1ad3      	subs	r3, r2, r3
 800254a:	f241 3288 	movw	r2, #5000	; 0x1388
 800254e:	4293      	cmp	r3, r2
 8002550:	d901      	bls.n	8002556 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002552:	2303      	movs	r3, #3
 8002554:	e142      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002556:	4b76      	ldr	r3, [pc, #472]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002558:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0ed      	beq.n	8002540 <HAL_RCC_OscConfig+0x388>
 8002564:	e015      	b.n	8002592 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7ff fa67 	bl	8001a38 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7ff fa63 	bl	8001a38 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e12b      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002584:	4b6a      	ldr	r3, [pc, #424]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d1ed      	bne.n	800256e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002592:	7ffb      	ldrb	r3, [r7, #31]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d105      	bne.n	80025a4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002598:	4b65      	ldr	r3, [pc, #404]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 800259a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800259c:	4a64      	ldr	r2, [pc, #400]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 800259e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f003 0320 	and.w	r3, r3, #32
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d03c      	beq.n	800262a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	699b      	ldr	r3, [r3, #24]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01c      	beq.n	80025f2 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025b8:	4b5d      	ldr	r3, [pc, #372]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80025ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025be:	4a5c      	ldr	r2, [pc, #368]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80025c0:	f043 0301 	orr.w	r3, r3, #1
 80025c4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c8:	f7ff fa36 	bl	8001a38 <HAL_GetTick>
 80025cc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025ce:	e008      	b.n	80025e2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025d0:	f7ff fa32 	bl	8001a38 <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	693b      	ldr	r3, [r7, #16]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d901      	bls.n	80025e2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e0fc      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025e2:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80025e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ef      	beq.n	80025d0 <HAL_RCC_OscConfig+0x418>
 80025f0:	e01b      	b.n	800262a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80025f2:	4b4f      	ldr	r3, [pc, #316]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80025f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025f8:	4a4d      	ldr	r2, [pc, #308]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80025fa:	f023 0301 	bic.w	r3, r3, #1
 80025fe:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002602:	f7ff fa19 	bl	8001a38 <HAL_GetTick>
 8002606:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002608:	e008      	b.n	800261c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800260a:	f7ff fa15 	bl	8001a38 <HAL_GetTick>
 800260e:	4602      	mov	r2, r0
 8002610:	693b      	ldr	r3, [r7, #16]
 8002612:	1ad3      	subs	r3, r2, r3
 8002614:	2b02      	cmp	r3, #2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e0df      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800261c:	4b44      	ldr	r3, [pc, #272]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 800261e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002622:	f003 0302 	and.w	r3, r3, #2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d1ef      	bne.n	800260a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	69db      	ldr	r3, [r3, #28]
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 80d3 	beq.w	80027da <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002634:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002636:	689b      	ldr	r3, [r3, #8]
 8002638:	f003 030c 	and.w	r3, r3, #12
 800263c:	2b0c      	cmp	r3, #12
 800263e:	f000 808d 	beq.w	800275c <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	69db      	ldr	r3, [r3, #28]
 8002646:	2b02      	cmp	r3, #2
 8002648:	d15a      	bne.n	8002700 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800264a:	4b39      	ldr	r3, [pc, #228]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a38      	ldr	r2, [pc, #224]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002650:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002654:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002656:	f7ff f9ef 	bl	8001a38 <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265e:	f7ff f9eb 	bl	8001a38 <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b02      	cmp	r3, #2
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e0b5      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002670:	4b2f      	ldr	r3, [pc, #188]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002678:	2b00      	cmp	r3, #0
 800267a:	d1f0      	bne.n	800265e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800267c:	4b2c      	ldr	r3, [pc, #176]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 800267e:	68da      	ldr	r2, [r3, #12]
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <HAL_RCC_OscConfig+0x580>)
 8002682:	4013      	ands	r3, r2
 8002684:	687a      	ldr	r2, [r7, #4]
 8002686:	6a11      	ldr	r1, [r2, #32]
 8002688:	687a      	ldr	r2, [r7, #4]
 800268a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800268c:	3a01      	subs	r2, #1
 800268e:	0112      	lsls	r2, r2, #4
 8002690:	4311      	orrs	r1, r2
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8002696:	0212      	lsls	r2, r2, #8
 8002698:	4311      	orrs	r1, r2
 800269a:	687a      	ldr	r2, [r7, #4]
 800269c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800269e:	0852      	lsrs	r2, r2, #1
 80026a0:	3a01      	subs	r2, #1
 80026a2:	0552      	lsls	r2, r2, #21
 80026a4:	4311      	orrs	r1, r2
 80026a6:	687a      	ldr	r2, [r7, #4]
 80026a8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80026aa:	0852      	lsrs	r2, r2, #1
 80026ac:	3a01      	subs	r2, #1
 80026ae:	0652      	lsls	r2, r2, #25
 80026b0:	4311      	orrs	r1, r2
 80026b2:	687a      	ldr	r2, [r7, #4]
 80026b4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80026b6:	06d2      	lsls	r2, r2, #27
 80026b8:	430a      	orrs	r2, r1
 80026ba:	491d      	ldr	r1, [pc, #116]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1a      	ldr	r2, [pc, #104]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80026c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026ca:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026cc:	4b18      	ldr	r3, [pc, #96]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	4a17      	ldr	r2, [pc, #92]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80026d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026d6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026d8:	f7ff f9ae 	bl	8001a38 <HAL_GetTick>
 80026dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026de:	e008      	b.n	80026f2 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026e0:	f7ff f9aa 	bl	8001a38 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	2b02      	cmp	r3, #2
 80026ec:	d901      	bls.n	80026f2 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80026ee:	2303      	movs	r3, #3
 80026f0:	e074      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026f2:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d0f0      	beq.n	80026e0 <HAL_RCC_OscConfig+0x528>
 80026fe:	e06c      	b.n	80027da <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002700:	4b0b      	ldr	r3, [pc, #44]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0a      	ldr	r2, [pc, #40]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002706:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800270a:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	4a07      	ldr	r2, [pc, #28]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 8002712:	f023 0303 	bic.w	r3, r3, #3
 8002716:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002718:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	4a04      	ldr	r2, [pc, #16]	; (8002730 <HAL_RCC_OscConfig+0x578>)
 800271e:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002722:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002726:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002728:	f7ff f986 	bl	8001a38 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800272e:	e00e      	b.n	800274e <HAL_RCC_OscConfig+0x596>
 8002730:	40021000 	.word	0x40021000
 8002734:	40007000 	.word	0x40007000
 8002738:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800273c:	f7ff f97c 	bl	8001a38 <HAL_GetTick>
 8002740:	4602      	mov	r2, r0
 8002742:	693b      	ldr	r3, [r7, #16]
 8002744:	1ad3      	subs	r3, r2, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d901      	bls.n	800274e <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800274a:	2303      	movs	r3, #3
 800274c:	e046      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800274e:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <HAL_RCC_OscConfig+0x62c>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002756:	2b00      	cmp	r3, #0
 8002758:	d1f0      	bne.n	800273c <HAL_RCC_OscConfig+0x584>
 800275a:	e03e      	b.n	80027da <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	69db      	ldr	r3, [r3, #28]
 8002760:	2b01      	cmp	r3, #1
 8002762:	d101      	bne.n	8002768 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e039      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002768:	4b1e      	ldr	r3, [pc, #120]	; (80027e4 <HAL_RCC_OscConfig+0x62c>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	f003 0203 	and.w	r2, r3, #3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6a1b      	ldr	r3, [r3, #32]
 8002778:	429a      	cmp	r2, r3
 800277a:	d12c      	bne.n	80027d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002786:	3b01      	subs	r3, #1
 8002788:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278a:	429a      	cmp	r2, r3
 800278c:	d123      	bne.n	80027d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002798:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800279a:	429a      	cmp	r2, r3
 800279c:	d11b      	bne.n	80027d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80027aa:	429a      	cmp	r2, r3
 80027ac:	d113      	bne.n	80027d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b8:	085b      	lsrs	r3, r3, #1
 80027ba:	3b01      	subs	r3, #1
 80027bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027be:	429a      	cmp	r2, r3
 80027c0:	d109      	bne.n	80027d6 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027cc:	085b      	lsrs	r3, r3, #1
 80027ce:	3b01      	subs	r3, #1
 80027d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027d2:	429a      	cmp	r2, r3
 80027d4:	d001      	beq.n	80027da <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e000      	b.n	80027dc <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	3720      	adds	r7, #32
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40021000 	.word	0x40021000

080027e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b086      	sub	sp, #24
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80027f2:	2300      	movs	r3, #0
 80027f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d101      	bne.n	8002800 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80027fc:	2301      	movs	r3, #1
 80027fe:	e11e      	b.n	8002a3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002800:	4b91      	ldr	r3, [pc, #580]	; (8002a48 <HAL_RCC_ClockConfig+0x260>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 030f 	and.w	r3, r3, #15
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	429a      	cmp	r2, r3
 800280c:	d910      	bls.n	8002830 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800280e:	4b8e      	ldr	r3, [pc, #568]	; (8002a48 <HAL_RCC_ClockConfig+0x260>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f023 020f 	bic.w	r2, r3, #15
 8002816:	498c      	ldr	r1, [pc, #560]	; (8002a48 <HAL_RCC_ClockConfig+0x260>)
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	4313      	orrs	r3, r2
 800281c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800281e:	4b8a      	ldr	r3, [pc, #552]	; (8002a48 <HAL_RCC_ClockConfig+0x260>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f003 030f 	and.w	r3, r3, #15
 8002826:	683a      	ldr	r2, [r7, #0]
 8002828:	429a      	cmp	r2, r3
 800282a:	d001      	beq.n	8002830 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800282c:	2301      	movs	r3, #1
 800282e:	e106      	b.n	8002a3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f003 0301 	and.w	r3, r3, #1
 8002838:	2b00      	cmp	r3, #0
 800283a:	d073      	beq.n	8002924 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	2b03      	cmp	r3, #3
 8002842:	d129      	bne.n	8002898 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002844:	4b81      	ldr	r3, [pc, #516]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d101      	bne.n	8002854 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002850:	2301      	movs	r3, #1
 8002852:	e0f4      	b.n	8002a3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002854:	f000 f99e 	bl	8002b94 <RCC_GetSysClockFreqFromPLLSource>
 8002858:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	4a7c      	ldr	r2, [pc, #496]	; (8002a50 <HAL_RCC_ClockConfig+0x268>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d93f      	bls.n	80028e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002862:	4b7a      	ldr	r3, [pc, #488]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d009      	beq.n	8002882 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002876:	2b00      	cmp	r3, #0
 8002878:	d033      	beq.n	80028e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800287e:	2b00      	cmp	r3, #0
 8002880:	d12f      	bne.n	80028e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002882:	4b72      	ldr	r3, [pc, #456]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800288a:	4a70      	ldr	r2, [pc, #448]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 800288c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002890:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002892:	2380      	movs	r3, #128	; 0x80
 8002894:	617b      	str	r3, [r7, #20]
 8002896:	e024      	b.n	80028e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	2b02      	cmp	r3, #2
 800289e:	d107      	bne.n	80028b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028a0:	4b6a      	ldr	r3, [pc, #424]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d109      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	e0c6      	b.n	8002a3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028b0:	4b66      	ldr	r3, [pc, #408]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d101      	bne.n	80028c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80028bc:	2301      	movs	r3, #1
 80028be:	e0be      	b.n	8002a3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80028c0:	f000 f8ce 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 80028c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4a61      	ldr	r2, [pc, #388]	; (8002a50 <HAL_RCC_ClockConfig+0x268>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d909      	bls.n	80028e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80028ce:	4b5f      	ldr	r3, [pc, #380]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 80028d0:	689b      	ldr	r3, [r3, #8]
 80028d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028d6:	4a5d      	ldr	r2, [pc, #372]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 80028d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80028de:	2380      	movs	r3, #128	; 0x80
 80028e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80028e2:	4b5a      	ldr	r3, [pc, #360]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f023 0203 	bic.w	r2, r3, #3
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	4957      	ldr	r1, [pc, #348]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f4:	f7ff f8a0 	bl	8001a38 <HAL_GetTick>
 80028f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028fa:	e00a      	b.n	8002912 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028fc:	f7ff f89c 	bl	8001a38 <HAL_GetTick>
 8002900:	4602      	mov	r2, r0
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	1ad3      	subs	r3, r2, r3
 8002906:	f241 3288 	movw	r2, #5000	; 0x1388
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e095      	b.n	8002a3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002912:	4b4e      	ldr	r3, [pc, #312]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 8002914:	689b      	ldr	r3, [r3, #8]
 8002916:	f003 020c 	and.w	r2, r3, #12
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	685b      	ldr	r3, [r3, #4]
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	429a      	cmp	r2, r3
 8002922:	d1eb      	bne.n	80028fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d023      	beq.n	8002978 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800293c:	4b43      	ldr	r3, [pc, #268]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a42      	ldr	r2, [pc, #264]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 8002942:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002946:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d007      	beq.n	8002964 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002954:	4b3d      	ldr	r3, [pc, #244]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800295c:	4a3b      	ldr	r2, [pc, #236]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 800295e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002962:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002964:	4b39      	ldr	r3, [pc, #228]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	4936      	ldr	r1, [pc, #216]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
 8002976:	e008      	b.n	800298a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002978:	697b      	ldr	r3, [r7, #20]
 800297a:	2b80      	cmp	r3, #128	; 0x80
 800297c:	d105      	bne.n	800298a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800297e:	4b33      	ldr	r3, [pc, #204]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	4a32      	ldr	r2, [pc, #200]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 8002984:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002988:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800298a:	4b2f      	ldr	r3, [pc, #188]	; (8002a48 <HAL_RCC_ClockConfig+0x260>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 030f 	and.w	r3, r3, #15
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d21d      	bcs.n	80029d4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002998:	4b2b      	ldr	r3, [pc, #172]	; (8002a48 <HAL_RCC_ClockConfig+0x260>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 020f 	bic.w	r2, r3, #15
 80029a0:	4929      	ldr	r1, [pc, #164]	; (8002a48 <HAL_RCC_ClockConfig+0x260>)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80029a8:	f7ff f846 	bl	8001a38 <HAL_GetTick>
 80029ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ae:	e00a      	b.n	80029c6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029b0:	f7ff f842 	bl	8001a38 <HAL_GetTick>
 80029b4:	4602      	mov	r2, r0
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	1ad3      	subs	r3, r2, r3
 80029ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80029be:	4293      	cmp	r3, r2
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e03b      	b.n	8002a3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c6:	4b20      	ldr	r3, [pc, #128]	; (8002a48 <HAL_RCC_ClockConfig+0x260>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	683a      	ldr	r2, [r7, #0]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d1ed      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e0:	4b1a      	ldr	r3, [pc, #104]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4917      	ldr	r1, [pc, #92]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029fe:	4b13      	ldr	r3, [pc, #76]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	490f      	ldr	r1, [pc, #60]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002a12:	f000 f825 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8002a16:	4601      	mov	r1, r0
 8002a18:	4b0c      	ldr	r3, [pc, #48]	; (8002a4c <HAL_RCC_ClockConfig+0x264>)
 8002a1a:	689b      	ldr	r3, [r3, #8]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	4a0c      	ldr	r2, [pc, #48]	; (8002a54 <HAL_RCC_ClockConfig+0x26c>)
 8002a24:	5cd3      	ldrb	r3, [r2, r3]
 8002a26:	f003 031f 	and.w	r3, r3, #31
 8002a2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002a2e:	4a0a      	ldr	r2, [pc, #40]	; (8002a58 <HAL_RCC_ClockConfig+0x270>)
 8002a30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002a32:	4b0a      	ldr	r3, [pc, #40]	; (8002a5c <HAL_RCC_ClockConfig+0x274>)
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	4618      	mov	r0, r3
 8002a38:	f7fe ffb2 	bl	80019a0 <HAL_InitTick>
 8002a3c:	4603      	mov	r3, r0
}
 8002a3e:	4618      	mov	r0, r3
 8002a40:	3718      	adds	r7, #24
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40022000 	.word	0x40022000
 8002a4c:	40021000 	.word	0x40021000
 8002a50:	04c4b400 	.word	0x04c4b400
 8002a54:	08005f28 	.word	0x08005f28
 8002a58:	20000014 	.word	0x20000014
 8002a5c:	20000018 	.word	0x20000018

08002a60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002a66:	4b2c      	ldr	r3, [pc, #176]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	d102      	bne.n	8002a78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002a72:	4b2a      	ldr	r3, [pc, #168]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002a74:	613b      	str	r3, [r7, #16]
 8002a76:	e047      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002a78:	4b27      	ldr	r3, [pc, #156]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	f003 030c 	and.w	r3, r3, #12
 8002a80:	2b08      	cmp	r3, #8
 8002a82:	d102      	bne.n	8002a8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002a84:	4b26      	ldr	r3, [pc, #152]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002a86:	613b      	str	r3, [r7, #16]
 8002a88:	e03e      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8002a8a:	4b23      	ldr	r3, [pc, #140]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	f003 030c 	and.w	r3, r3, #12
 8002a92:	2b0c      	cmp	r3, #12
 8002a94:	d136      	bne.n	8002b04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a96:	4b20      	ldr	r3, [pc, #128]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002a98:	68db      	ldr	r3, [r3, #12]
 8002a9a:	f003 0303 	and.w	r3, r3, #3
 8002a9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002aa0:	4b1d      	ldr	r3, [pc, #116]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aa2:	68db      	ldr	r3, [r3, #12]
 8002aa4:	091b      	lsrs	r3, r3, #4
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	3301      	adds	r3, #1
 8002aac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2b03      	cmp	r3, #3
 8002ab2:	d10c      	bne.n	8002ace <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ab4:	4a1a      	ldr	r2, [pc, #104]	; (8002b20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002abc:	4a16      	ldr	r2, [pc, #88]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002abe:	68d2      	ldr	r2, [r2, #12]
 8002ac0:	0a12      	lsrs	r2, r2, #8
 8002ac2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ac6:	fb02 f303 	mul.w	r3, r2, r3
 8002aca:	617b      	str	r3, [r7, #20]
      break;
 8002acc:	e00c      	b.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ace:	4a13      	ldr	r2, [pc, #76]	; (8002b1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	4a10      	ldr	r2, [pc, #64]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ad8:	68d2      	ldr	r2, [r2, #12]
 8002ada:	0a12      	lsrs	r2, r2, #8
 8002adc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ae0:	fb02 f303 	mul.w	r3, r2, r3
 8002ae4:	617b      	str	r3, [r7, #20]
      break;
 8002ae6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002ae8:	4b0b      	ldr	r3, [pc, #44]	; (8002b18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002aea:	68db      	ldr	r3, [r3, #12]
 8002aec:	0e5b      	lsrs	r3, r3, #25
 8002aee:	f003 0303 	and.w	r3, r3, #3
 8002af2:	3301      	adds	r3, #1
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002af8:	697a      	ldr	r2, [r7, #20]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b00:	613b      	str	r3, [r7, #16]
 8002b02:	e001      	b.n	8002b08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002b04:	2300      	movs	r3, #0
 8002b06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002b08:	693b      	ldr	r3, [r7, #16]
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr
 8002b16:	bf00      	nop
 8002b18:	40021000 	.word	0x40021000
 8002b1c:	00f42400 	.word	0x00f42400
 8002b20:	016e3600 	.word	0x016e3600

08002b24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b28:	4b03      	ldr	r3, [pc, #12]	; (8002b38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr
 8002b36:	bf00      	nop
 8002b38:	20000014 	.word	0x20000014

08002b3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b40:	f7ff fff0 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b44:	4601      	mov	r1, r0
 8002b46:	4b06      	ldr	r3, [pc, #24]	; (8002b60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	0a1b      	lsrs	r3, r3, #8
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4a04      	ldr	r2, [pc, #16]	; (8002b64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b52:	5cd3      	ldrb	r3, [r2, r3]
 8002b54:	f003 031f 	and.w	r3, r3, #31
 8002b58:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40021000 	.word	0x40021000
 8002b64:	08005f38 	.word	0x08005f38

08002b68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002b6c:	f7ff ffda 	bl	8002b24 <HAL_RCC_GetHCLKFreq>
 8002b70:	4601      	mov	r1, r0
 8002b72:	4b06      	ldr	r3, [pc, #24]	; (8002b8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b74:	689b      	ldr	r3, [r3, #8]
 8002b76:	0adb      	lsrs	r3, r3, #11
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	f003 031f 	and.w	r3, r3, #31
 8002b84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002b88:	4618      	mov	r0, r3
 8002b8a:	bd80      	pop	{r7, pc}
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08005f38 	.word	0x08005f38

08002b94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b087      	sub	sp, #28
 8002b98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b9a:	4b1e      	ldr	r3, [pc, #120]	; (8002c14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002b9c:	68db      	ldr	r3, [r3, #12]
 8002b9e:	f003 0303 	and.w	r3, r3, #3
 8002ba2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ba4:	4b1b      	ldr	r3, [pc, #108]	; (8002c14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	091b      	lsrs	r3, r3, #4
 8002baa:	f003 030f 	and.w	r3, r3, #15
 8002bae:	3301      	adds	r3, #1
 8002bb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	2b03      	cmp	r3, #3
 8002bb6:	d10c      	bne.n	8002bd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bb8:	4a17      	ldr	r2, [pc, #92]	; (8002c18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bc0:	4a14      	ldr	r2, [pc, #80]	; (8002c14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bc2:	68d2      	ldr	r2, [r2, #12]
 8002bc4:	0a12      	lsrs	r2, r2, #8
 8002bc6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	617b      	str	r3, [r7, #20]
    break;
 8002bd0:	e00c      	b.n	8002bec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002bd2:	4a12      	ldr	r2, [pc, #72]	; (8002c1c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bda:	4a0e      	ldr	r2, [pc, #56]	; (8002c14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bdc:	68d2      	ldr	r2, [r2, #12]
 8002bde:	0a12      	lsrs	r2, r2, #8
 8002be0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002be4:	fb02 f303 	mul.w	r3, r2, r3
 8002be8:	617b      	str	r3, [r7, #20]
    break;
 8002bea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bec:	4b09      	ldr	r3, [pc, #36]	; (8002c14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002bee:	68db      	ldr	r3, [r3, #12]
 8002bf0:	0e5b      	lsrs	r3, r3, #25
 8002bf2:	f003 0303 	and.w	r3, r3, #3
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	005b      	lsls	r3, r3, #1
 8002bfa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002bfc:	697a      	ldr	r2, [r7, #20]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002c06:	687b      	ldr	r3, [r7, #4]
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	371c      	adds	r7, #28
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr
 8002c14:	40021000 	.word	0x40021000
 8002c18:	016e3600 	.word	0x016e3600
 8002c1c:	00f42400 	.word	0x00f42400

08002c20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b086      	sub	sp, #24
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002c28:	2300      	movs	r3, #0
 8002c2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	f000 8098 	beq.w	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c42:	4b43      	ldr	r3, [pc, #268]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d10d      	bne.n	8002c6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c4e:	4b40      	ldr	r3, [pc, #256]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c52:	4a3f      	ldr	r2, [pc, #252]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c58:	6593      	str	r3, [r2, #88]	; 0x58
 8002c5a:	4b3d      	ldr	r3, [pc, #244]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c62:	60bb      	str	r3, [r7, #8]
 8002c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c66:	2301      	movs	r3, #1
 8002c68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c6a:	4b3a      	ldr	r3, [pc, #232]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a39      	ldr	r2, [pc, #228]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c76:	f7fe fedf 	bl	8001a38 <HAL_GetTick>
 8002c7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c7c:	e009      	b.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c7e:	f7fe fedb 	bl	8001a38 <HAL_GetTick>
 8002c82:	4602      	mov	r2, r0
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1ad3      	subs	r3, r2, r3
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d902      	bls.n	8002c92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002c8c:	2303      	movs	r3, #3
 8002c8e:	74fb      	strb	r3, [r7, #19]
        break;
 8002c90:	e005      	b.n	8002c9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002c92:	4b30      	ldr	r3, [pc, #192]	; (8002d54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0ef      	beq.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002c9e:	7cfb      	ldrb	r3, [r7, #19]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d159      	bne.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ca4:	4b2a      	ldr	r3, [pc, #168]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d01e      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cba:	697a      	ldr	r2, [r7, #20]
 8002cbc:	429a      	cmp	r2, r3
 8002cbe:	d019      	beq.n	8002cf4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002cc0:	4b23      	ldr	r3, [pc, #140]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cc6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002ccc:	4b20      	ldr	r3, [pc, #128]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cd2:	4a1f      	ldr	r2, [pc, #124]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cd8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cdc:	4b1c      	ldr	r3, [pc, #112]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ce2:	4a1b      	ldr	r2, [pc, #108]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002ce4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ce8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cec:	4a18      	ldr	r2, [pc, #96]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cf4:	697b      	ldr	r3, [r7, #20]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d016      	beq.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfe:	f7fe fe9b 	bl	8001a38 <HAL_GetTick>
 8002d02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d04:	e00b      	b.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d06:	f7fe fe97 	bl	8001a38 <HAL_GetTick>
 8002d0a:	4602      	mov	r2, r0
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d902      	bls.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002d18:	2303      	movs	r3, #3
 8002d1a:	74fb      	strb	r3, [r7, #19]
            break;
 8002d1c:	e006      	b.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002d1e:	4b0c      	ldr	r3, [pc, #48]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d0ec      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d10b      	bne.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d32:	4b07      	ldr	r3, [pc, #28]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d38:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d40:	4903      	ldr	r1, [pc, #12]	; (8002d50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d48:	e008      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d4a:	7cfb      	ldrb	r3, [r7, #19]
 8002d4c:	74bb      	strb	r3, [r7, #18]
 8002d4e:	e005      	b.n	8002d5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002d50:	40021000 	.word	0x40021000
 8002d54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d58:	7cfb      	ldrb	r3, [r7, #19]
 8002d5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d5c:	7c7b      	ldrb	r3, [r7, #17]
 8002d5e:	2b01      	cmp	r3, #1
 8002d60:	d105      	bne.n	8002d6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d62:	4ba6      	ldr	r3, [pc, #664]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	4aa5      	ldr	r2, [pc, #660]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d00a      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d7a:	4ba0      	ldr	r3, [pc, #640]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d80:	f023 0203 	bic.w	r2, r3, #3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	499c      	ldr	r1, [pc, #624]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d9c:	4b97      	ldr	r3, [pc, #604]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002da2:	f023 020c 	bic.w	r2, r3, #12
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	4994      	ldr	r1, [pc, #592]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f003 0304 	and.w	r3, r3, #4
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002dbe:	4b8f      	ldr	r3, [pc, #572]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dc4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	68db      	ldr	r3, [r3, #12]
 8002dcc:	498b      	ldr	r1, [pc, #556]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 0308 	and.w	r3, r3, #8
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002de0:	4b86      	ldr	r3, [pc, #536]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	691b      	ldr	r3, [r3, #16]
 8002dee:	4983      	ldr	r1, [pc, #524]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002e02:	4b7e      	ldr	r3, [pc, #504]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e08:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	497a      	ldr	r1, [pc, #488]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e24:	4b75      	ldr	r3, [pc, #468]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e2a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	699b      	ldr	r3, [r3, #24]
 8002e32:	4972      	ldr	r1, [pc, #456]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002e46:	4b6d      	ldr	r3, [pc, #436]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	69db      	ldr	r3, [r3, #28]
 8002e54:	4969      	ldr	r1, [pc, #420]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e68:	4b64      	ldr	r3, [pc, #400]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e6e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	4961      	ldr	r1, [pc, #388]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002e8a:	4b5c      	ldr	r3, [pc, #368]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e90:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e98:	4958      	ldr	r1, [pc, #352]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d015      	beq.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002eac:	4b53      	ldr	r3, [pc, #332]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eba:	4950      	ldr	r1, [pc, #320]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ecc:	4b4b      	ldr	r3, [pc, #300]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ece:	68db      	ldr	r3, [r3, #12]
 8002ed0:	4a4a      	ldr	r2, [pc, #296]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ed2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ed6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d015      	beq.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002ee4:	4b45      	ldr	r3, [pc, #276]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ee6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ef2:	4942      	ldr	r1, [pc, #264]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002efe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f02:	d105      	bne.n	8002f10 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f04:	4b3d      	ldr	r3, [pc, #244]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	4a3c      	ldr	r2, [pc, #240]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f0a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f0e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d015      	beq.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002f1c:	4b37      	ldr	r3, [pc, #220]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f22:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f2a:	4934      	ldr	r1, [pc, #208]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f3a:	d105      	bne.n	8002f48 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f3c:	4b2f      	ldr	r3, [pc, #188]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f3e:	68db      	ldr	r3, [r3, #12]
 8002f40:	4a2e      	ldr	r2, [pc, #184]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f46:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d015      	beq.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002f54:	4b29      	ldr	r3, [pc, #164]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f62:	4926      	ldr	r1, [pc, #152]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f64:	4313      	orrs	r3, r2
 8002f66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f72:	d105      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f74:	4b21      	ldr	r3, [pc, #132]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f76:	68db      	ldr	r3, [r3, #12]
 8002f78:	4a20      	ldr	r2, [pc, #128]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f7e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d015      	beq.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f8c:	4b1b      	ldr	r3, [pc, #108]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f92:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f9a:	4918      	ldr	r1, [pc, #96]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fa6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002faa:	d105      	bne.n	8002fb8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fac:	4b13      	ldr	r3, [pc, #76]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fb6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d015      	beq.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fc4:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fd2:	490a      	ldr	r1, [pc, #40]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fde:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002fe2:	d105      	bne.n	8002ff0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002fe4:	4b05      	ldr	r3, [pc, #20]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	4a04      	ldr	r2, [pc, #16]	; (8002ffc <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fee:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002ff0:	7cbb      	ldrb	r3, [r7, #18]
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	3718      	adds	r7, #24
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	bd80      	pop	{r7, pc}
 8002ffa:	bf00      	nop
 8002ffc:	40021000 	.word	0x40021000

08003000 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b082      	sub	sp, #8
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e01d      	b.n	800304e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003018:	b2db      	uxtb	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d106      	bne.n	800302c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003026:	6878      	ldr	r0, [r7, #4]
 8003028:	f7fe fab4 	bl	8001594 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2202      	movs	r2, #2
 8003030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681a      	ldr	r2, [r3, #0]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3304      	adds	r3, #4
 800303c:	4619      	mov	r1, r3
 800303e:	4610      	mov	r0, r2
 8003040:	f000 f9c0 	bl	80033c4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2201      	movs	r2, #1
 8003048:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800304c:	2300      	movs	r3, #0
}
 800304e:	4618      	mov	r0, r3
 8003050:	3708      	adds	r7, #8
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
	...

08003058 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	2b0c      	cmp	r3, #12
 8003066:	d841      	bhi.n	80030ec <HAL_TIM_PWM_Start_IT+0x94>
 8003068:	a201      	add	r2, pc, #4	; (adr r2, 8003070 <HAL_TIM_PWM_Start_IT+0x18>)
 800306a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800306e:	bf00      	nop
 8003070:	080030a5 	.word	0x080030a5
 8003074:	080030ed 	.word	0x080030ed
 8003078:	080030ed 	.word	0x080030ed
 800307c:	080030ed 	.word	0x080030ed
 8003080:	080030b7 	.word	0x080030b7
 8003084:	080030ed 	.word	0x080030ed
 8003088:	080030ed 	.word	0x080030ed
 800308c:	080030ed 	.word	0x080030ed
 8003090:	080030c9 	.word	0x080030c9
 8003094:	080030ed 	.word	0x080030ed
 8003098:	080030ed 	.word	0x080030ed
 800309c:	080030ed 	.word	0x080030ed
 80030a0:	080030db 	.word	0x080030db
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0202 	orr.w	r2, r2, #2
 80030b2:	60da      	str	r2, [r3, #12]
      break;
 80030b4:	e01b      	b.n	80030ee <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	68da      	ldr	r2, [r3, #12]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f042 0204 	orr.w	r2, r2, #4
 80030c4:	60da      	str	r2, [r3, #12]
      break;
 80030c6:	e012      	b.n	80030ee <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	68da      	ldr	r2, [r3, #12]
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f042 0208 	orr.w	r2, r2, #8
 80030d6:	60da      	str	r2, [r3, #12]
      break;
 80030d8:	e009      	b.n	80030ee <HAL_TIM_PWM_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68da      	ldr	r2, [r3, #12]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f042 0210 	orr.w	r2, r2, #16
 80030e8:	60da      	str	r2, [r3, #12]
      break;
 80030ea:	e000      	b.n	80030ee <HAL_TIM_PWM_Start_IT+0x96>
    }

    default:
      break;
 80030ec:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2201      	movs	r2, #1
 80030f4:	6839      	ldr	r1, [r7, #0]
 80030f6:	4618      	mov	r0, r3
 80030f8:	f000 fcea 	bl	8003ad0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a1e      	ldr	r2, [pc, #120]	; (800317c <HAL_TIM_PWM_Start_IT+0x124>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d013      	beq.n	800312e <HAL_TIM_PWM_Start_IT+0xd6>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	4a1d      	ldr	r2, [pc, #116]	; (8003180 <HAL_TIM_PWM_Start_IT+0x128>)
 800310c:	4293      	cmp	r3, r2
 800310e:	d00e      	beq.n	800312e <HAL_TIM_PWM_Start_IT+0xd6>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	4a1b      	ldr	r2, [pc, #108]	; (8003184 <HAL_TIM_PWM_Start_IT+0x12c>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d009      	beq.n	800312e <HAL_TIM_PWM_Start_IT+0xd6>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a1a      	ldr	r2, [pc, #104]	; (8003188 <HAL_TIM_PWM_Start_IT+0x130>)
 8003120:	4293      	cmp	r3, r2
 8003122:	d004      	beq.n	800312e <HAL_TIM_PWM_Start_IT+0xd6>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4a18      	ldr	r2, [pc, #96]	; (800318c <HAL_TIM_PWM_Start_IT+0x134>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d101      	bne.n	8003132 <HAL_TIM_PWM_Start_IT+0xda>
 800312e:	2301      	movs	r3, #1
 8003130:	e000      	b.n	8003134 <HAL_TIM_PWM_Start_IT+0xdc>
 8003132:	2300      	movs	r3, #0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <HAL_TIM_PWM_Start_IT+0xf0>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003146:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_TIM_PWM_Start_IT+0x138>)
 8003150:	4013      	ands	r3, r2
 8003152:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2b06      	cmp	r3, #6
 8003158:	d00b      	beq.n	8003172 <HAL_TIM_PWM_Start_IT+0x11a>
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003160:	d007      	beq.n	8003172 <HAL_TIM_PWM_Start_IT+0x11a>
  {
    __HAL_TIM_ENABLE(htim);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681a      	ldr	r2, [r3, #0]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f042 0201 	orr.w	r2, r2, #1
 8003170:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003172:	2300      	movs	r3, #0
}
 8003174:	4618      	mov	r0, r3
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}
 800317c:	40012c00 	.word	0x40012c00
 8003180:	40013400 	.word	0x40013400
 8003184:	40014000 	.word	0x40014000
 8003188:	40014400 	.word	0x40014400
 800318c:	40014800 	.word	0x40014800
 8003190:	00010007 	.word	0x00010007

08003194 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	60f8      	str	r0, [r7, #12]
 800319c:	60b9      	str	r1, [r7, #8]
 800319e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031a6:	2b01      	cmp	r3, #1
 80031a8:	d101      	bne.n	80031ae <HAL_TIM_PWM_ConfigChannel+0x1a>
 80031aa:	2302      	movs	r3, #2
 80031ac:	e105      	b.n	80033ba <HAL_TIM_PWM_ConfigChannel+0x226>
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2201      	movs	r2, #1
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2202      	movs	r2, #2
 80031ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b14      	cmp	r3, #20
 80031c2:	f200 80f0 	bhi.w	80033a6 <HAL_TIM_PWM_ConfigChannel+0x212>
 80031c6:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <HAL_TIM_PWM_ConfigChannel+0x38>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	08003221 	.word	0x08003221
 80031d0:	080033a7 	.word	0x080033a7
 80031d4:	080033a7 	.word	0x080033a7
 80031d8:	080033a7 	.word	0x080033a7
 80031dc:	08003261 	.word	0x08003261
 80031e0:	080033a7 	.word	0x080033a7
 80031e4:	080033a7 	.word	0x080033a7
 80031e8:	080033a7 	.word	0x080033a7
 80031ec:	080032a3 	.word	0x080032a3
 80031f0:	080033a7 	.word	0x080033a7
 80031f4:	080033a7 	.word	0x080033a7
 80031f8:	080033a7 	.word	0x080033a7
 80031fc:	080032e3 	.word	0x080032e3
 8003200:	080033a7 	.word	0x080033a7
 8003204:	080033a7 	.word	0x080033a7
 8003208:	080033a7 	.word	0x080033a7
 800320c:	08003325 	.word	0x08003325
 8003210:	080033a7 	.word	0x080033a7
 8003214:	080033a7 	.word	0x080033a7
 8003218:	080033a7 	.word	0x080033a7
 800321c:	08003365 	.word	0x08003365
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68b9      	ldr	r1, [r7, #8]
 8003226:	4618      	mov	r0, r3
 8003228:	f000 f95c 	bl	80034e4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	699a      	ldr	r2, [r3, #24]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0208 	orr.w	r2, r2, #8
 800323a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	699a      	ldr	r2, [r3, #24]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f022 0204 	bic.w	r2, r2, #4
 800324a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	6999      	ldr	r1, [r3, #24]
 8003252:	68bb      	ldr	r3, [r7, #8]
 8003254:	691a      	ldr	r2, [r3, #16]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	430a      	orrs	r2, r1
 800325c:	619a      	str	r2, [r3, #24]
      break;
 800325e:	e0a3      	b.n	80033a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	68b9      	ldr	r1, [r7, #8]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f9cc 	bl	8003604 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	699a      	ldr	r2, [r3, #24]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800327a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	699a      	ldr	r2, [r3, #24]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800328a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	6999      	ldr	r1, [r3, #24]
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	691b      	ldr	r3, [r3, #16]
 8003296:	021a      	lsls	r2, r3, #8
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	619a      	str	r2, [r3, #24]
      break;
 80032a0:	e082      	b.n	80033a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	68b9      	ldr	r1, [r7, #8]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f000 fa35 	bl	8003718 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69da      	ldr	r2, [r3, #28]
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0208 	orr.w	r2, r2, #8
 80032bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	69da      	ldr	r2, [r3, #28]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f022 0204 	bic.w	r2, r2, #4
 80032cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69d9      	ldr	r1, [r3, #28]
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	691a      	ldr	r2, [r3, #16]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	61da      	str	r2, [r3, #28]
      break;
 80032e0:	e062      	b.n	80033a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68b9      	ldr	r1, [r7, #8]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fa9d 	bl	8003828 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69da      	ldr	r2, [r3, #28]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	69da      	ldr	r2, [r3, #28]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	69d9      	ldr	r1, [r3, #28]
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	691b      	ldr	r3, [r3, #16]
 8003318:	021a      	lsls	r2, r3, #8
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	430a      	orrs	r2, r1
 8003320:	61da      	str	r2, [r3, #28]
      break;
 8003322:	e041      	b.n	80033a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68b9      	ldr	r1, [r7, #8]
 800332a:	4618      	mov	r0, r3
 800332c:	f000 fb06 	bl	800393c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f042 0208 	orr.w	r2, r2, #8
 800333e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f022 0204 	bic.w	r2, r2, #4
 800334e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	691a      	ldr	r2, [r3, #16]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	430a      	orrs	r2, r1
 8003360:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8003362:	e021      	b.n	80033a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	68b9      	ldr	r1, [r7, #8]
 800336a:	4618      	mov	r0, r3
 800336c:	f000 fb4a 	bl	8003a04 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800337e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	691b      	ldr	r3, [r3, #16]
 800339a:	021a      	lsls	r2, r3, #8
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	430a      	orrs	r2, r1
 80033a2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80033a4:	e000      	b.n	80033a8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 80033a6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3710      	adds	r7, #16
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}
 80033c2:	bf00      	nop

080033c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	4a3c      	ldr	r2, [pc, #240]	; (80034c8 <TIM_Base_SetConfig+0x104>)
 80033d8:	4293      	cmp	r3, r2
 80033da:	d00f      	beq.n	80033fc <TIM_Base_SetConfig+0x38>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e2:	d00b      	beq.n	80033fc <TIM_Base_SetConfig+0x38>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	4a39      	ldr	r2, [pc, #228]	; (80034cc <TIM_Base_SetConfig+0x108>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d007      	beq.n	80033fc <TIM_Base_SetConfig+0x38>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	4a38      	ldr	r2, [pc, #224]	; (80034d0 <TIM_Base_SetConfig+0x10c>)
 80033f0:	4293      	cmp	r3, r2
 80033f2:	d003      	beq.n	80033fc <TIM_Base_SetConfig+0x38>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	4a37      	ldr	r2, [pc, #220]	; (80034d4 <TIM_Base_SetConfig+0x110>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d108      	bne.n	800340e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003402:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	68fa      	ldr	r2, [r7, #12]
 800340a:	4313      	orrs	r3, r2
 800340c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a2d      	ldr	r2, [pc, #180]	; (80034c8 <TIM_Base_SetConfig+0x104>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d01b      	beq.n	800344e <TIM_Base_SetConfig+0x8a>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800341c:	d017      	beq.n	800344e <TIM_Base_SetConfig+0x8a>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a2a      	ldr	r2, [pc, #168]	; (80034cc <TIM_Base_SetConfig+0x108>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d013      	beq.n	800344e <TIM_Base_SetConfig+0x8a>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a29      	ldr	r2, [pc, #164]	; (80034d0 <TIM_Base_SetConfig+0x10c>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00f      	beq.n	800344e <TIM_Base_SetConfig+0x8a>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a28      	ldr	r2, [pc, #160]	; (80034d4 <TIM_Base_SetConfig+0x110>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d00b      	beq.n	800344e <TIM_Base_SetConfig+0x8a>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a27      	ldr	r2, [pc, #156]	; (80034d8 <TIM_Base_SetConfig+0x114>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d007      	beq.n	800344e <TIM_Base_SetConfig+0x8a>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a26      	ldr	r2, [pc, #152]	; (80034dc <TIM_Base_SetConfig+0x118>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d003      	beq.n	800344e <TIM_Base_SetConfig+0x8a>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	4a25      	ldr	r2, [pc, #148]	; (80034e0 <TIM_Base_SetConfig+0x11c>)
 800344a:	4293      	cmp	r3, r2
 800344c:	d108      	bne.n	8003460 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68db      	ldr	r3, [r3, #12]
 800345a:	68fa      	ldr	r2, [r7, #12]
 800345c:	4313      	orrs	r3, r2
 800345e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68fa      	ldr	r2, [r7, #12]
 8003472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a10      	ldr	r2, [pc, #64]	; (80034c8 <TIM_Base_SetConfig+0x104>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d00f      	beq.n	80034ac <TIM_Base_SetConfig+0xe8>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	4a11      	ldr	r2, [pc, #68]	; (80034d4 <TIM_Base_SetConfig+0x110>)
 8003490:	4293      	cmp	r3, r2
 8003492:	d00b      	beq.n	80034ac <TIM_Base_SetConfig+0xe8>
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	4a10      	ldr	r2, [pc, #64]	; (80034d8 <TIM_Base_SetConfig+0x114>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d007      	beq.n	80034ac <TIM_Base_SetConfig+0xe8>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	4a0f      	ldr	r2, [pc, #60]	; (80034dc <TIM_Base_SetConfig+0x118>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d003      	beq.n	80034ac <TIM_Base_SetConfig+0xe8>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	4a0e      	ldr	r2, [pc, #56]	; (80034e0 <TIM_Base_SetConfig+0x11c>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d103      	bne.n	80034b4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2201      	movs	r2, #1
 80034b8:	615a      	str	r2, [r3, #20]
}
 80034ba:	bf00      	nop
 80034bc:	3714      	adds	r7, #20
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40012c00 	.word	0x40012c00
 80034cc:	40000400 	.word	0x40000400
 80034d0:	40000800 	.word	0x40000800
 80034d4:	40013400 	.word	0x40013400
 80034d8:	40014000 	.word	0x40014000
 80034dc:	40014400 	.word	0x40014400
 80034e0:	40014800 	.word	0x40014800

080034e4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b087      	sub	sp, #28
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	f023 0201 	bic.w	r2, r3, #1
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	699b      	ldr	r3, [r3, #24]
 800350a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003516:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0303 	bic.w	r3, r3, #3
 800351e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	f023 0302 	bic.w	r3, r3, #2
 8003530:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	689b      	ldr	r3, [r3, #8]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	4313      	orrs	r3, r2
 800353a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	4a2c      	ldr	r2, [pc, #176]	; (80035f0 <TIM_OC1_SetConfig+0x10c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d00f      	beq.n	8003564 <TIM_OC1_SetConfig+0x80>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <TIM_OC1_SetConfig+0x110>)
 8003548:	4293      	cmp	r3, r2
 800354a:	d00b      	beq.n	8003564 <TIM_OC1_SetConfig+0x80>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	4a2a      	ldr	r2, [pc, #168]	; (80035f8 <TIM_OC1_SetConfig+0x114>)
 8003550:	4293      	cmp	r3, r2
 8003552:	d007      	beq.n	8003564 <TIM_OC1_SetConfig+0x80>
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	4a29      	ldr	r2, [pc, #164]	; (80035fc <TIM_OC1_SetConfig+0x118>)
 8003558:	4293      	cmp	r3, r2
 800355a:	d003      	beq.n	8003564 <TIM_OC1_SetConfig+0x80>
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a28      	ldr	r2, [pc, #160]	; (8003600 <TIM_OC1_SetConfig+0x11c>)
 8003560:	4293      	cmp	r3, r2
 8003562:	d10c      	bne.n	800357e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	f023 0308 	bic.w	r3, r3, #8
 800356a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	68db      	ldr	r3, [r3, #12]
 8003570:	697a      	ldr	r2, [r7, #20]
 8003572:	4313      	orrs	r3, r2
 8003574:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003576:	697b      	ldr	r3, [r7, #20]
 8003578:	f023 0304 	bic.w	r3, r3, #4
 800357c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	4a1b      	ldr	r2, [pc, #108]	; (80035f0 <TIM_OC1_SetConfig+0x10c>)
 8003582:	4293      	cmp	r3, r2
 8003584:	d00f      	beq.n	80035a6 <TIM_OC1_SetConfig+0xc2>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a1a      	ldr	r2, [pc, #104]	; (80035f4 <TIM_OC1_SetConfig+0x110>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d00b      	beq.n	80035a6 <TIM_OC1_SetConfig+0xc2>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a19      	ldr	r2, [pc, #100]	; (80035f8 <TIM_OC1_SetConfig+0x114>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d007      	beq.n	80035a6 <TIM_OC1_SetConfig+0xc2>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a18      	ldr	r2, [pc, #96]	; (80035fc <TIM_OC1_SetConfig+0x118>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d003      	beq.n	80035a6 <TIM_OC1_SetConfig+0xc2>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a17      	ldr	r2, [pc, #92]	; (8003600 <TIM_OC1_SetConfig+0x11c>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d111      	bne.n	80035ca <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80035b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80035b6:	683b      	ldr	r3, [r7, #0]
 80035b8:	695b      	ldr	r3, [r3, #20]
 80035ba:	693a      	ldr	r2, [r7, #16]
 80035bc:	4313      	orrs	r3, r2
 80035be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	693a      	ldr	r2, [r7, #16]
 80035c6:	4313      	orrs	r3, r2
 80035c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	693a      	ldr	r2, [r7, #16]
 80035ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	68fa      	ldr	r2, [r7, #12]
 80035d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685a      	ldr	r2, [r3, #4]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	697a      	ldr	r2, [r7, #20]
 80035e2:	621a      	str	r2, [r3, #32]
}
 80035e4:	bf00      	nop
 80035e6:	371c      	adds	r7, #28
 80035e8:	46bd      	mov	sp, r7
 80035ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ee:	4770      	bx	lr
 80035f0:	40012c00 	.word	0x40012c00
 80035f4:	40013400 	.word	0x40013400
 80035f8:	40014000 	.word	0x40014000
 80035fc:	40014400 	.word	0x40014400
 8003600:	40014800 	.word	0x40014800

08003604 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003604:	b480      	push	{r7}
 8003606:	b087      	sub	sp, #28
 8003608:	af00      	add	r7, sp, #0
 800360a:	6078      	str	r0, [r7, #4]
 800360c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6a1b      	ldr	r3, [r3, #32]
 8003612:	f023 0210 	bic.w	r2, r3, #16
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6a1b      	ldr	r3, [r3, #32]
 800361e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	699b      	ldr	r3, [r3, #24]
 800362a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003632:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003636:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800363e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	021b      	lsls	r3, r3, #8
 8003646:	68fa      	ldr	r2, [r7, #12]
 8003648:	4313      	orrs	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	f023 0320 	bic.w	r3, r3, #32
 8003652:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	011b      	lsls	r3, r3, #4
 800365a:	697a      	ldr	r2, [r7, #20]
 800365c:	4313      	orrs	r3, r2
 800365e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	4a28      	ldr	r2, [pc, #160]	; (8003704 <TIM_OC2_SetConfig+0x100>)
 8003664:	4293      	cmp	r3, r2
 8003666:	d003      	beq.n	8003670 <TIM_OC2_SetConfig+0x6c>
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a27      	ldr	r2, [pc, #156]	; (8003708 <TIM_OC2_SetConfig+0x104>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d10d      	bne.n	800368c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003676:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800368a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a1d      	ldr	r2, [pc, #116]	; (8003704 <TIM_OC2_SetConfig+0x100>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00f      	beq.n	80036b4 <TIM_OC2_SetConfig+0xb0>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a1c      	ldr	r2, [pc, #112]	; (8003708 <TIM_OC2_SetConfig+0x104>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d00b      	beq.n	80036b4 <TIM_OC2_SetConfig+0xb0>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	4a1b      	ldr	r2, [pc, #108]	; (800370c <TIM_OC2_SetConfig+0x108>)
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d007      	beq.n	80036b4 <TIM_OC2_SetConfig+0xb0>
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	4a1a      	ldr	r2, [pc, #104]	; (8003710 <TIM_OC2_SetConfig+0x10c>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d003      	beq.n	80036b4 <TIM_OC2_SetConfig+0xb0>
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a19      	ldr	r2, [pc, #100]	; (8003714 <TIM_OC2_SetConfig+0x110>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	d113      	bne.n	80036dc <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80036c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	693a      	ldr	r2, [r7, #16]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	699b      	ldr	r3, [r3, #24]
 80036d4:	009b      	lsls	r3, r3, #2
 80036d6:	693a      	ldr	r2, [r7, #16]
 80036d8:	4313      	orrs	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	693a      	ldr	r2, [r7, #16]
 80036e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68fa      	ldr	r2, [r7, #12]
 80036e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	685a      	ldr	r2, [r3, #4]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	697a      	ldr	r2, [r7, #20]
 80036f4:	621a      	str	r2, [r3, #32]
}
 80036f6:	bf00      	nop
 80036f8:	371c      	adds	r7, #28
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	40012c00 	.word	0x40012c00
 8003708:	40013400 	.word	0x40013400
 800370c:	40014000 	.word	0x40014000
 8003710:	40014400 	.word	0x40014400
 8003714:	40014800 	.word	0x40014800

08003718 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003718:	b480      	push	{r7}
 800371a:	b087      	sub	sp, #28
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	6a1b      	ldr	r3, [r3, #32]
 8003726:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6a1b      	ldr	r3, [r3, #32]
 8003732:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	69db      	ldr	r3, [r3, #28]
 800373e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003746:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800374a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	f023 0303 	bic.w	r3, r3, #3
 8003752:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	68fa      	ldr	r2, [r7, #12]
 800375a:	4313      	orrs	r3, r2
 800375c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003764:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	689b      	ldr	r3, [r3, #8]
 800376a:	021b      	lsls	r3, r3, #8
 800376c:	697a      	ldr	r2, [r7, #20]
 800376e:	4313      	orrs	r3, r2
 8003770:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	4a27      	ldr	r2, [pc, #156]	; (8003814 <TIM_OC3_SetConfig+0xfc>)
 8003776:	4293      	cmp	r3, r2
 8003778:	d003      	beq.n	8003782 <TIM_OC3_SetConfig+0x6a>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	4a26      	ldr	r2, [pc, #152]	; (8003818 <TIM_OC3_SetConfig+0x100>)
 800377e:	4293      	cmp	r3, r2
 8003780:	d10d      	bne.n	800379e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003788:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800378a:	683b      	ldr	r3, [r7, #0]
 800378c:	68db      	ldr	r3, [r3, #12]
 800378e:	021b      	lsls	r3, r3, #8
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800379c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a1c      	ldr	r2, [pc, #112]	; (8003814 <TIM_OC3_SetConfig+0xfc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d00f      	beq.n	80037c6 <TIM_OC3_SetConfig+0xae>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a1b      	ldr	r2, [pc, #108]	; (8003818 <TIM_OC3_SetConfig+0x100>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d00b      	beq.n	80037c6 <TIM_OC3_SetConfig+0xae>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a1a      	ldr	r2, [pc, #104]	; (800381c <TIM_OC3_SetConfig+0x104>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d007      	beq.n	80037c6 <TIM_OC3_SetConfig+0xae>
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	4a19      	ldr	r2, [pc, #100]	; (8003820 <TIM_OC3_SetConfig+0x108>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d003      	beq.n	80037c6 <TIM_OC3_SetConfig+0xae>
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	4a18      	ldr	r2, [pc, #96]	; (8003824 <TIM_OC3_SetConfig+0x10c>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d113      	bne.n	80037ee <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80037cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	011b      	lsls	r3, r3, #4
 80037dc:	693a      	ldr	r2, [r7, #16]
 80037de:	4313      	orrs	r3, r2
 80037e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	699b      	ldr	r3, [r3, #24]
 80037e6:	011b      	lsls	r3, r3, #4
 80037e8:	693a      	ldr	r2, [r7, #16]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	693a      	ldr	r2, [r7, #16]
 80037f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	621a      	str	r2, [r3, #32]
}
 8003808:	bf00      	nop
 800380a:	371c      	adds	r7, #28
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr
 8003814:	40012c00 	.word	0x40012c00
 8003818:	40013400 	.word	0x40013400
 800381c:	40014000 	.word	0x40014000
 8003820:	40014400 	.word	0x40014400
 8003824:	40014800 	.word	0x40014800

08003828 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003828:	b480      	push	{r7}
 800382a:	b087      	sub	sp, #28
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
 8003830:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a1b      	ldr	r3, [r3, #32]
 8003842:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003856:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003862:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	021b      	lsls	r3, r3, #8
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003876:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	031b      	lsls	r3, r3, #12
 800387e:	697a      	ldr	r2, [r7, #20]
 8003880:	4313      	orrs	r3, r2
 8003882:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	4a28      	ldr	r2, [pc, #160]	; (8003928 <TIM_OC4_SetConfig+0x100>)
 8003888:	4293      	cmp	r3, r2
 800388a:	d003      	beq.n	8003894 <TIM_OC4_SetConfig+0x6c>
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	4a27      	ldr	r2, [pc, #156]	; (800392c <TIM_OC4_SetConfig+0x104>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d10d      	bne.n	80038b0 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800389a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800389c:	683b      	ldr	r3, [r7, #0]
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	031b      	lsls	r3, r3, #12
 80038a2:	697a      	ldr	r2, [r7, #20]
 80038a4:	4313      	orrs	r3, r2
 80038a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 80038a8:	697b      	ldr	r3, [r7, #20]
 80038aa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038ae:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	4a1d      	ldr	r2, [pc, #116]	; (8003928 <TIM_OC4_SetConfig+0x100>)
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d00f      	beq.n	80038d8 <TIM_OC4_SetConfig+0xb0>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	4a1c      	ldr	r2, [pc, #112]	; (800392c <TIM_OC4_SetConfig+0x104>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d00b      	beq.n	80038d8 <TIM_OC4_SetConfig+0xb0>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	4a1b      	ldr	r2, [pc, #108]	; (8003930 <TIM_OC4_SetConfig+0x108>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d007      	beq.n	80038d8 <TIM_OC4_SetConfig+0xb0>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	4a1a      	ldr	r2, [pc, #104]	; (8003934 <TIM_OC4_SetConfig+0x10c>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d003      	beq.n	80038d8 <TIM_OC4_SetConfig+0xb0>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4a19      	ldr	r2, [pc, #100]	; (8003938 <TIM_OC4_SetConfig+0x110>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d113      	bne.n	8003900 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80038de:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80038e6:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	695b      	ldr	r3, [r3, #20]
 80038ec:	019b      	lsls	r3, r3, #6
 80038ee:	693a      	ldr	r2, [r7, #16]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	699b      	ldr	r3, [r3, #24]
 80038f8:	019b      	lsls	r3, r3, #6
 80038fa:	693a      	ldr	r2, [r7, #16]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	693a      	ldr	r2, [r7, #16]
 8003904:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	685a      	ldr	r2, [r3, #4]
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	621a      	str	r2, [r3, #32]
}
 800391a:	bf00      	nop
 800391c:	371c      	adds	r7, #28
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr
 8003926:	bf00      	nop
 8003928:	40012c00 	.word	0x40012c00
 800392c:	40013400 	.word	0x40013400
 8003930:	40014000 	.word	0x40014000
 8003934:	40014400 	.word	0x40014400
 8003938:	40014800 	.word	0x40014800

0800393c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800393c:	b480      	push	{r7}
 800393e:	b087      	sub	sp, #28
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6a1b      	ldr	r3, [r3, #32]
 8003956:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800396a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800396e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	68fa      	ldr	r2, [r7, #12]
 8003976:	4313      	orrs	r3, r2
 8003978:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003980:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	689b      	ldr	r3, [r3, #8]
 8003986:	041b      	lsls	r3, r3, #16
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	4313      	orrs	r3, r2
 800398c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a17      	ldr	r2, [pc, #92]	; (80039f0 <TIM_OC5_SetConfig+0xb4>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00f      	beq.n	80039b6 <TIM_OC5_SetConfig+0x7a>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a16      	ldr	r2, [pc, #88]	; (80039f4 <TIM_OC5_SetConfig+0xb8>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00b      	beq.n	80039b6 <TIM_OC5_SetConfig+0x7a>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a15      	ldr	r2, [pc, #84]	; (80039f8 <TIM_OC5_SetConfig+0xbc>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d007      	beq.n	80039b6 <TIM_OC5_SetConfig+0x7a>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a14      	ldr	r2, [pc, #80]	; (80039fc <TIM_OC5_SetConfig+0xc0>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d003      	beq.n	80039b6 <TIM_OC5_SetConfig+0x7a>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a13      	ldr	r2, [pc, #76]	; (8003a00 <TIM_OC5_SetConfig+0xc4>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d109      	bne.n	80039ca <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80039bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	021b      	lsls	r3, r3, #8
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	697a      	ldr	r2, [r7, #20]
 80039ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68fa      	ldr	r2, [r7, #12]
 80039d4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	685a      	ldr	r2, [r3, #4]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	621a      	str	r2, [r3, #32]
}
 80039e4:	bf00      	nop
 80039e6:	371c      	adds	r7, #28
 80039e8:	46bd      	mov	sp, r7
 80039ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ee:	4770      	bx	lr
 80039f0:	40012c00 	.word	0x40012c00
 80039f4:	40013400 	.word	0x40013400
 80039f8:	40014000 	.word	0x40014000
 80039fc:	40014400 	.word	0x40014400
 8003a00:	40014800 	.word	0x40014800

08003a04 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8003a04:	b480      	push	{r7}
 8003a06:	b087      	sub	sp, #28
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a1b      	ldr	r3, [r3, #32]
 8003a12:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a1b      	ldr	r3, [r3, #32]
 8003a1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	685b      	ldr	r3, [r3, #4]
 8003a24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003a32:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	021b      	lsls	r3, r3, #8
 8003a3e:	68fa      	ldr	r2, [r7, #12]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003a44:	693b      	ldr	r3, [r7, #16]
 8003a46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	051b      	lsls	r3, r3, #20
 8003a52:	693a      	ldr	r2, [r7, #16]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	4a18      	ldr	r2, [pc, #96]	; (8003abc <TIM_OC6_SetConfig+0xb8>)
 8003a5c:	4293      	cmp	r3, r2
 8003a5e:	d00f      	beq.n	8003a80 <TIM_OC6_SetConfig+0x7c>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a17      	ldr	r2, [pc, #92]	; (8003ac0 <TIM_OC6_SetConfig+0xbc>)
 8003a64:	4293      	cmp	r3, r2
 8003a66:	d00b      	beq.n	8003a80 <TIM_OC6_SetConfig+0x7c>
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4a16      	ldr	r2, [pc, #88]	; (8003ac4 <TIM_OC6_SetConfig+0xc0>)
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d007      	beq.n	8003a80 <TIM_OC6_SetConfig+0x7c>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	4a15      	ldr	r2, [pc, #84]	; (8003ac8 <TIM_OC6_SetConfig+0xc4>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d003      	beq.n	8003a80 <TIM_OC6_SetConfig+0x7c>
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a14      	ldr	r2, [pc, #80]	; (8003acc <TIM_OC6_SetConfig+0xc8>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d109      	bne.n	8003a94 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a86:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	029b      	lsls	r3, r3, #10
 8003a8e:	697a      	ldr	r2, [r7, #20]
 8003a90:	4313      	orrs	r3, r2
 8003a92:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	697a      	ldr	r2, [r7, #20]
 8003a98:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685a      	ldr	r2, [r3, #4]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	693a      	ldr	r2, [r7, #16]
 8003aac:	621a      	str	r2, [r3, #32]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab8:	4770      	bx	lr
 8003aba:	bf00      	nop
 8003abc:	40012c00 	.word	0x40012c00
 8003ac0:	40013400 	.word	0x40013400
 8003ac4:	40014000 	.word	0x40014000
 8003ac8:	40014400 	.word	0x40014400
 8003acc:	40014800 	.word	0x40014800

08003ad0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ad0:	b480      	push	{r7}
 8003ad2:	b087      	sub	sp, #28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	60f8      	str	r0, [r7, #12]
 8003ad8:	60b9      	str	r1, [r7, #8]
 8003ada:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003adc:	68bb      	ldr	r3, [r7, #8]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	2201      	movs	r2, #1
 8003ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a1a      	ldr	r2, [r3, #32]
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	43db      	mvns	r3, r3
 8003af2:	401a      	ands	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a1a      	ldr	r2, [r3, #32]
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	f003 031f 	and.w	r3, r3, #31
 8003b02:	6879      	ldr	r1, [r7, #4]
 8003b04:	fa01 f303 	lsl.w	r3, r1, r3
 8003b08:	431a      	orrs	r2, r3
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	621a      	str	r2, [r3, #32]
}
 8003b0e:	bf00      	nop
 8003b10:	371c      	adds	r7, #28
 8003b12:	46bd      	mov	sp, r7
 8003b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b18:	4770      	bx	lr
	...

08003b1c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b1c:	b480      	push	{r7}
 8003b1e:	b085      	sub	sp, #20
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
 8003b24:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d101      	bne.n	8003b34 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b30:	2302      	movs	r3, #2
 8003b32:	e047      	b.n	8003bc4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	685b      	ldr	r3, [r3, #4]
 8003b4a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d004      	beq.n	8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a1c      	ldr	r2, [pc, #112]	; (8003bd4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d108      	bne.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b6e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	68fa      	ldr	r2, [r7, #12]
 8003b76:	4313      	orrs	r3, r2
 8003b78:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8003b80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b84:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	68fa      	ldr	r2, [r7, #12]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b96:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	68ba      	ldr	r2, [r7, #8]
 8003b9e:	4313      	orrs	r3, r2
 8003ba0:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	68fa      	ldr	r2, [r7, #12]
 8003ba8:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	40012c00 	.word	0x40012c00
 8003bd4:	40013400 	.word	0x40013400

08003bd8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003be6:	2301      	movs	r3, #1
 8003be8:	e042      	b.n	8003c70 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d106      	bne.n	8003c02 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bfc:	6878      	ldr	r0, [r7, #4]
 8003bfe:	f7fd fdbf 	bl	8001780 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2224      	movs	r2, #36	; 0x24
 8003c06:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f022 0201 	bic.w	r2, r2, #1
 8003c18:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fb14 	bl	8004248 <UART_SetConfig>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	d101      	bne.n	8003c2a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	e022      	b.n	8003c70 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d002      	beq.n	8003c38 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003c32:	6878      	ldr	r0, [r7, #4]
 8003c34:	f001 fcc2 	bl	80055bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c46:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	689a      	ldr	r2, [r3, #8]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c56:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f042 0201 	orr.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f001 fd49 	bl	8005700 <UART_CheckIdleState>
 8003c6e:	4603      	mov	r3, r0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08a      	sub	sp, #40	; 0x28
 8003c7c:	af02      	add	r7, sp, #8
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	603b      	str	r3, [r7, #0]
 8003c84:	4613      	mov	r3, r2
 8003c86:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c8e:	2b20      	cmp	r3, #32
 8003c90:	f040 8083 	bne.w	8003d9a <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d002      	beq.n	8003ca0 <HAL_UART_Transmit+0x28>
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003ca0:	2301      	movs	r3, #1
 8003ca2:	e07b      	b.n	8003d9c <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d101      	bne.n	8003cb2 <HAL_UART_Transmit+0x3a>
 8003cae:	2302      	movs	r3, #2
 8003cb0:	e074      	b.n	8003d9c <HAL_UART_Transmit+0x124>
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2221      	movs	r2, #33	; 0x21
 8003cc6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003cca:	f7fd feb5 	bl	8001a38 <HAL_GetTick>
 8003cce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	88fa      	ldrh	r2, [r7, #6]
 8003cd4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	88fa      	ldrh	r2, [r7, #6]
 8003cdc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ce8:	d108      	bne.n	8003cfc <HAL_UART_Transmit+0x84>
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d104      	bne.n	8003cfc <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003cf6:	68bb      	ldr	r3, [r7, #8]
 8003cf8:	61bb      	str	r3, [r7, #24]
 8003cfa:	e003      	b.n	8003d04 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003d04:	e02c      	b.n	8003d60 <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	9300      	str	r3, [sp, #0]
 8003d0a:	697b      	ldr	r3, [r7, #20]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	2180      	movs	r1, #128	; 0x80
 8003d10:	68f8      	ldr	r0, [r7, #12]
 8003d12:	f001 fd3d 	bl	8005790 <UART_WaitOnFlagUntilTimeout>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d001      	beq.n	8003d20 <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e03d      	b.n	8003d9c <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8003d20:	69fb      	ldr	r3, [r7, #28]
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d10b      	bne.n	8003d3e <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	881b      	ldrh	r3, [r3, #0]
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d34:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003d36:	69bb      	ldr	r3, [r7, #24]
 8003d38:	3302      	adds	r3, #2
 8003d3a:	61bb      	str	r3, [r7, #24]
 8003d3c:	e007      	b.n	8003d4e <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	781a      	ldrb	r2, [r3, #0]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003d48:	69fb      	ldr	r3, [r7, #28]
 8003d4a:	3301      	adds	r3, #1
 8003d4c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d54:	b29b      	uxth	r3, r3
 8003d56:	3b01      	subs	r3, #1
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003d66:	b29b      	uxth	r3, r3
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1cc      	bne.n	8003d06 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	9300      	str	r3, [sp, #0]
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	2200      	movs	r2, #0
 8003d74:	2140      	movs	r1, #64	; 0x40
 8003d76:	68f8      	ldr	r0, [r7, #12]
 8003d78:	f001 fd0a 	bl	8005790 <UART_WaitOnFlagUntilTimeout>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e00a      	b.n	8003d9c <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2220      	movs	r2, #32
 8003d8a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    __HAL_UNLOCK(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003d96:	2300      	movs	r3, #0
 8003d98:	e000      	b.n	8003d9c <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8003d9a:	2302      	movs	r3, #2
  }
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3720      	adds	r7, #32
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	60f8      	str	r0, [r7, #12]
 8003dac:	60b9      	str	r1, [r7, #8]
 8003dae:	4613      	mov	r3, r2
 8003db0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003db8:	2b20      	cmp	r3, #32
 8003dba:	f040 80bc 	bne.w	8003f36 <HAL_UART_Receive_IT+0x192>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dbe:	68bb      	ldr	r3, [r7, #8]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d002      	beq.n	8003dca <HAL_UART_Receive_IT+0x26>
 8003dc4:	88fb      	ldrh	r3, [r7, #6]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e0b4      	b.n	8003f38 <HAL_UART_Receive_IT+0x194>
    }

    __HAL_LOCK(huart);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_UART_Receive_IT+0x38>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e0ad      	b.n	8003f38 <HAL_UART_Receive_IT+0x194>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    huart->pRxBuffPtr  = pData;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	68ba      	ldr	r2, [r7, #8]
 8003de8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferSize  = Size;
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	88fa      	ldrh	r2, [r7, #6]
 8003dee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	88fa      	ldrh	r2, [r7, #6]
 8003df6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    huart->RxISR       = NULL;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e08:	d10e      	bne.n	8003e28 <HAL_UART_Receive_IT+0x84>
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	691b      	ldr	r3, [r3, #16]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d105      	bne.n	8003e1e <HAL_UART_Receive_IT+0x7a>
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003e18:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e1c:	e02d      	b.n	8003e7a <HAL_UART_Receive_IT+0xd6>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	22ff      	movs	r2, #255	; 0xff
 8003e22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e26:	e028      	b.n	8003e7a <HAL_UART_Receive_IT+0xd6>
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	689b      	ldr	r3, [r3, #8]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10d      	bne.n	8003e4c <HAL_UART_Receive_IT+0xa8>
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	691b      	ldr	r3, [r3, #16]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d104      	bne.n	8003e42 <HAL_UART_Receive_IT+0x9e>
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	22ff      	movs	r2, #255	; 0xff
 8003e3c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e40:	e01b      	b.n	8003e7a <HAL_UART_Receive_IT+0xd6>
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	227f      	movs	r2, #127	; 0x7f
 8003e46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e4a:	e016      	b.n	8003e7a <HAL_UART_Receive_IT+0xd6>
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e54:	d10d      	bne.n	8003e72 <HAL_UART_Receive_IT+0xce>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <HAL_UART_Receive_IT+0xc4>
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	227f      	movs	r2, #127	; 0x7f
 8003e62:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e66:	e008      	b.n	8003e7a <HAL_UART_Receive_IT+0xd6>
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	223f      	movs	r2, #63	; 0x3f
 8003e6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8003e70:	e003      	b.n	8003e7a <HAL_UART_Receive_IT+0xd6>
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2222      	movs	r2, #34	; 0x22
 8003e86:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	689a      	ldr	r2, [r3, #8]
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0201 	orr.w	r2, r2, #1
 8003e98:	609a      	str	r2, [r3, #8]

    /* Configure Rx interrupt processing*/
    if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ea2:	d12a      	bne.n	8003efa <HAL_UART_Receive_IT+0x156>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8003eaa:	88fa      	ldrh	r2, [r7, #6]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d324      	bcc.n	8003efa <HAL_UART_Receive_IT+0x156>
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eb8:	d107      	bne.n	8003eca <HAL_UART_Receive_IT+0x126>
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	691b      	ldr	r3, [r3, #16]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d103      	bne.n	8003eca <HAL_UART_Receive_IT+0x126>
      {
        huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	4a1f      	ldr	r2, [pc, #124]	; (8003f44 <HAL_UART_Receive_IT+0x1a0>)
 8003ec6:	66da      	str	r2, [r3, #108]	; 0x6c
 8003ec8:	e002      	b.n	8003ed0 <HAL_UART_Receive_IT+0x12c>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a1e      	ldr	r2, [pc, #120]	; (8003f48 <HAL_UART_Receive_IT+0x1a4>)
 8003ece:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ee6:	601a      	str	r2, [r3, #0]
      SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689a      	ldr	r2, [r3, #8]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003ef6:	609a      	str	r2, [r3, #8]
 8003ef8:	e01b      	b.n	8003f32 <HAL_UART_Receive_IT+0x18e>
    }
    else
    {
      /* Set the Rx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f02:	d107      	bne.n	8003f14 <HAL_UART_Receive_IT+0x170>
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d103      	bne.n	8003f14 <HAL_UART_Receive_IT+0x170>
      {
        huart->RxISR = UART_RxISR_16BIT;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	4a0f      	ldr	r2, [pc, #60]	; (8003f4c <HAL_UART_Receive_IT+0x1a8>)
 8003f10:	66da      	str	r2, [r3, #108]	; 0x6c
 8003f12:	e002      	b.n	8003f1a <HAL_UART_Receive_IT+0x176>
      }
      else
      {
        huart->RxISR = UART_RxISR_8BIT;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4a0e      	ldr	r2, [pc, #56]	; (8003f50 <HAL_UART_Receive_IT+0x1ac>)
 8003f18:	66da      	str	r2, [r3, #108]	; 0x6c
      }

      __HAL_UNLOCK(huart);
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

      /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003f30:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e000      	b.n	8003f38 <HAL_UART_Receive_IT+0x194>
  }
  else
  {
    return HAL_BUSY;
 8003f36:	2302      	movs	r3, #2
  }
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3714      	adds	r7, #20
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f42:	4770      	bx	lr
 8003f44:	08005b29 	.word	0x08005b29
 8003f48:	08005a21 	.word	0x08005a21
 8003f4c:	08005975 	.word	0x08005975
 8003f50:	080058cb 	.word	0x080058cb

08003f54 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b088      	sub	sp, #32
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003f74:	69fb      	ldr	r3, [r7, #28]
 8003f76:	f003 030f 	and.w	r3, r3, #15
 8003f7a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d118      	bne.n	8003fb4 <HAL_UART_IRQHandler+0x60>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	f003 0320 	and.w	r3, r3, #32
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d013      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x60>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	f003 0320 	and.w	r3, r3, #32
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d104      	bne.n	8003fa0 <HAL_UART_IRQHandler+0x4c>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003f96:	697b      	ldr	r3, [r7, #20]
 8003f98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d009      	beq.n	8003fb4 <HAL_UART_IRQHandler+0x60>
    {
      if (huart->RxISR != NULL)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	f000 812e 	beq.w	8004206 <HAL_UART_IRQHandler+0x2b2>
      {
        huart->RxISR(huart);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	4798      	blx	r3
      }
      return;
 8003fb2:	e128      	b.n	8004206 <HAL_UART_IRQHandler+0x2b2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	f000 80d1 	beq.w	800415e <HAL_UART_IRQHandler+0x20a>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	4b96      	ldr	r3, [pc, #600]	; (8004218 <HAL_UART_IRQHandler+0x2c4>)
 8003fc0:	4013      	ands	r3, r2
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d105      	bne.n	8003fd2 <HAL_UART_IRQHandler+0x7e>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	f000 80c6 	beq.w	800415e <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003fd2:	69fb      	ldr	r3, [r7, #28]
 8003fd4:	f003 0301 	and.w	r3, r3, #1
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d010      	beq.n	8003ffe <HAL_UART_IRQHandler+0xaa>
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <HAL_UART_IRQHandler+0xaa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	2201      	movs	r2, #1
 8003fec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff4:	f043 0201 	orr.w	r2, r3, #1
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	f003 0302 	and.w	r3, r3, #2
 8004004:	2b00      	cmp	r3, #0
 8004006:	d010      	beq.n	800402a <HAL_UART_IRQHandler+0xd6>
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d00b      	beq.n	800402a <HAL_UART_IRQHandler+0xd6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	2202      	movs	r2, #2
 8004018:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004020:	f043 0204 	orr.w	r2, r3, #4
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	d010      	beq.n	8004056 <HAL_UART_IRQHandler+0x102>
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d00b      	beq.n	8004056 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	2204      	movs	r2, #4
 8004044:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800404c:	f043 0202 	orr.w	r2, r3, #2
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	f003 0308 	and.w	r3, r3, #8
 800405c:	2b00      	cmp	r3, #0
 800405e:	d015      	beq.n	800408c <HAL_UART_IRQHandler+0x138>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	f003 0320 	and.w	r3, r3, #32
 8004066:	2b00      	cmp	r3, #0
 8004068:	d104      	bne.n	8004074 <HAL_UART_IRQHandler+0x120>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800406a:	697a      	ldr	r2, [r7, #20]
 800406c:	4b6a      	ldr	r3, [pc, #424]	; (8004218 <HAL_UART_IRQHandler+0x2c4>)
 800406e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004070:	2b00      	cmp	r3, #0
 8004072:	d00b      	beq.n	800408c <HAL_UART_IRQHandler+0x138>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2208      	movs	r2, #8
 800407a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004082:	f043 0208 	orr.w	r2, r3, #8
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004092:	2b00      	cmp	r3, #0
 8004094:	f000 80b9 	beq.w	800420a <HAL_UART_IRQHandler+0x2b6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d011      	beq.n	80040c6 <HAL_UART_IRQHandler+0x172>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80040a2:	69bb      	ldr	r3, [r7, #24]
 80040a4:	f003 0320 	and.w	r3, r3, #32
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d104      	bne.n	80040b6 <HAL_UART_IRQHandler+0x162>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80040ac:	697b      	ldr	r3, [r7, #20]
 80040ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d007      	beq.n	80040c6 <HAL_UART_IRQHandler+0x172>
      {
        if (huart->RxISR != NULL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_UART_IRQHandler+0x172>
        {
          huart->RxISR(huart);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040cc:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	689b      	ldr	r3, [r3, #8]
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	2b40      	cmp	r3, #64	; 0x40
 80040da:	d004      	beq.n	80040e6 <HAL_UART_IRQHandler+0x192>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	f003 0308 	and.w	r3, r3, #8
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d031      	beq.n	800414a <HAL_UART_IRQHandler+0x1f6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f001 fb9c 	bl	8005824 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	d123      	bne.n	8004142 <HAL_UART_IRQHandler+0x1ee>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	689a      	ldr	r2, [r3, #8]
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004108:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800410e:	2b00      	cmp	r3, #0
 8004110:	d013      	beq.n	800413a <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004116:	4a41      	ldr	r2, [pc, #260]	; (800421c <HAL_UART_IRQHandler+0x2c8>)
 8004118:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800411e:	4618      	mov	r0, r3
 8004120:	f7fd fda5 	bl	8001c6e <HAL_DMA_Abort_IT>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d017      	beq.n	800415a <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	687a      	ldr	r2, [r7, #4]
 8004132:	6f92      	ldr	r2, [r2, #120]	; 0x78
 8004134:	4610      	mov	r0, r2
 8004136:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004138:	e00f      	b.n	800415a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f87a 	bl	8004234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004140:	e00b      	b.n	800415a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004142:	6878      	ldr	r0, [r7, #4]
 8004144:	f000 f876 	bl	8004234 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004148:	e007      	b.n	800415a <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f872 	bl	8004234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      }
    }
    return;
 8004158:	e057      	b.n	800420a <HAL_UART_IRQHandler+0x2b6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800415a:	bf00      	nop
    return;
 800415c:	e055      	b.n	800420a <HAL_UART_IRQHandler+0x2b6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800415e:	69fb      	ldr	r3, [r7, #28]
 8004160:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004164:	2b00      	cmp	r3, #0
 8004166:	d00d      	beq.n	8004184 <HAL_UART_IRQHandler+0x230>
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800416e:	2b00      	cmp	r3, #0
 8004170:	d008      	beq.n	8004184 <HAL_UART_IRQHandler+0x230>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800417a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800417c:	6878      	ldr	r0, [r7, #4]
 800417e:	f001 fd57 	bl	8005c30 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004182:	e045      	b.n	8004210 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004184:	69fb      	ldr	r3, [r7, #28]
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d012      	beq.n	80041b4 <HAL_UART_IRQHandler+0x260>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004194:	2b00      	cmp	r3, #0
 8004196:	d104      	bne.n	80041a2 <HAL_UART_IRQHandler+0x24e>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_UART_IRQHandler+0x260>
  {
    if (huart->TxISR != NULL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d031      	beq.n	800420e <HAL_UART_IRQHandler+0x2ba>
    {
      huart->TxISR(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	4798      	blx	r3
    }
    return;
 80041b2:	e02c      	b.n	800420e <HAL_UART_IRQHandler+0x2ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d008      	beq.n	80041d0 <HAL_UART_IRQHandler+0x27c>
 80041be:	69bb      	ldr	r3, [r7, #24]
 80041c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d003      	beq.n	80041d0 <HAL_UART_IRQHandler+0x27c>
  {
    UART_EndTransmit_IT(huart);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f001 fb64 	bl	8005896 <UART_EndTransmit_IT>
    return;
 80041ce:	e01f      	b.n	8004210 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d008      	beq.n	80041ec <HAL_UART_IRQHandler+0x298>
 80041da:	69bb      	ldr	r3, [r7, #24]
 80041dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_UART_IRQHandler+0x298>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f001 fd37 	bl	8005c58 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041ea:	e011      	b.n	8004210 <HAL_UART_IRQHandler+0x2bc>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d00c      	beq.n	8004210 <HAL_UART_IRQHandler+0x2bc>
 80041f6:	69bb      	ldr	r3, [r7, #24]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	da09      	bge.n	8004210 <HAL_UART_IRQHandler+0x2bc>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f001 fd21 	bl	8005c44 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004202:	bf00      	nop
 8004204:	e004      	b.n	8004210 <HAL_UART_IRQHandler+0x2bc>
      return;
 8004206:	bf00      	nop
 8004208:	e002      	b.n	8004210 <HAL_UART_IRQHandler+0x2bc>
    return;
 800420a:	bf00      	nop
 800420c:	e000      	b.n	8004210 <HAL_UART_IRQHandler+0x2bc>
    return;
 800420e:	bf00      	nop
  }
}
 8004210:	3720      	adds	r7, #32
 8004212:	46bd      	mov	sp, r7
 8004214:	bd80      	pop	{r7, pc}
 8004216:	bf00      	nop
 8004218:	10000001 	.word	0x10000001
 800421c:	0800586b 	.word	0x0800586b

08004220 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr

08004248 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004248:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 800424c:	b08a      	sub	sp, #40	; 0x28
 800424e:	af00      	add	r7, sp, #0
 8004250:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8004252:	2300      	movs	r3, #0
 8004254:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 800425a:	2300      	movs	r3, #0
 800425c:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689a      	ldr	r2, [r3, #8]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	691b      	ldr	r3, [r3, #16]
 8004266:	431a      	orrs	r2, r3
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	695b      	ldr	r3, [r3, #20]
 800426c:	431a      	orrs	r2, r3
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	4313      	orrs	r3, r2
 8004274:	627b      	str	r3, [r7, #36]	; 0x24
  tmpreg |= (uint32_t)huart->FifoMode;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800427a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800427c:	4313      	orrs	r3, r2
 800427e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	681a      	ldr	r2, [r3, #0]
 8004286:	4ba4      	ldr	r3, [pc, #656]	; (8004518 <UART_SetConfig+0x2d0>)
 8004288:	4013      	ands	r3, r2
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	6812      	ldr	r2, [r2, #0]
 800428e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004290:	430b      	orrs	r3, r1
 8004292:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68da      	ldr	r2, [r3, #12]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a99      	ldr	r2, [pc, #612]	; (800451c <UART_SetConfig+0x2d4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d004      	beq.n	80042c4 <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6a1b      	ldr	r3, [r3, #32]
 80042be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c0:	4313      	orrs	r3, r2
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	689b      	ldr	r3, [r3, #8]
 80042ca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80042ce:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	6812      	ldr	r2, [r2, #0]
 80042d6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80042d8:	430b      	orrs	r3, r1
 80042da:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e2:	f023 010f 	bic.w	r1, r3, #15
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	430a      	orrs	r2, r1
 80042f0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	4a8a      	ldr	r2, [pc, #552]	; (8004520 <UART_SetConfig+0x2d8>)
 80042f8:	4293      	cmp	r3, r2
 80042fa:	d126      	bne.n	800434a <UART_SetConfig+0x102>
 80042fc:	4b89      	ldr	r3, [pc, #548]	; (8004524 <UART_SetConfig+0x2dc>)
 80042fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004302:	f003 0303 	and.w	r3, r3, #3
 8004306:	2b03      	cmp	r3, #3
 8004308:	d81a      	bhi.n	8004340 <UART_SetConfig+0xf8>
 800430a:	a201      	add	r2, pc, #4	; (adr r2, 8004310 <UART_SetConfig+0xc8>)
 800430c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004310:	08004321 	.word	0x08004321
 8004314:	08004331 	.word	0x08004331
 8004318:	08004329 	.word	0x08004329
 800431c:	08004339 	.word	0x08004339
 8004320:	2301      	movs	r3, #1
 8004322:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004326:	e0d6      	b.n	80044d6 <UART_SetConfig+0x28e>
 8004328:	2302      	movs	r3, #2
 800432a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800432e:	e0d2      	b.n	80044d6 <UART_SetConfig+0x28e>
 8004330:	2304      	movs	r3, #4
 8004332:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004336:	e0ce      	b.n	80044d6 <UART_SetConfig+0x28e>
 8004338:	2308      	movs	r3, #8
 800433a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800433e:	e0ca      	b.n	80044d6 <UART_SetConfig+0x28e>
 8004340:	2310      	movs	r3, #16
 8004342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004346:	bf00      	nop
 8004348:	e0c5      	b.n	80044d6 <UART_SetConfig+0x28e>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a76      	ldr	r2, [pc, #472]	; (8004528 <UART_SetConfig+0x2e0>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d138      	bne.n	80043c6 <UART_SetConfig+0x17e>
 8004354:	4b73      	ldr	r3, [pc, #460]	; (8004524 <UART_SetConfig+0x2dc>)
 8004356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800435a:	f003 030c 	and.w	r3, r3, #12
 800435e:	2b0c      	cmp	r3, #12
 8004360:	d82c      	bhi.n	80043bc <UART_SetConfig+0x174>
 8004362:	a201      	add	r2, pc, #4	; (adr r2, 8004368 <UART_SetConfig+0x120>)
 8004364:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004368:	0800439d 	.word	0x0800439d
 800436c:	080043bd 	.word	0x080043bd
 8004370:	080043bd 	.word	0x080043bd
 8004374:	080043bd 	.word	0x080043bd
 8004378:	080043ad 	.word	0x080043ad
 800437c:	080043bd 	.word	0x080043bd
 8004380:	080043bd 	.word	0x080043bd
 8004384:	080043bd 	.word	0x080043bd
 8004388:	080043a5 	.word	0x080043a5
 800438c:	080043bd 	.word	0x080043bd
 8004390:	080043bd 	.word	0x080043bd
 8004394:	080043bd 	.word	0x080043bd
 8004398:	080043b5 	.word	0x080043b5
 800439c:	2300      	movs	r3, #0
 800439e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043a2:	e098      	b.n	80044d6 <UART_SetConfig+0x28e>
 80043a4:	2302      	movs	r3, #2
 80043a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043aa:	e094      	b.n	80044d6 <UART_SetConfig+0x28e>
 80043ac:	2304      	movs	r3, #4
 80043ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043b2:	e090      	b.n	80044d6 <UART_SetConfig+0x28e>
 80043b4:	2308      	movs	r3, #8
 80043b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043ba:	e08c      	b.n	80044d6 <UART_SetConfig+0x28e>
 80043bc:	2310      	movs	r3, #16
 80043be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043c2:	bf00      	nop
 80043c4:	e087      	b.n	80044d6 <UART_SetConfig+0x28e>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4a58      	ldr	r2, [pc, #352]	; (800452c <UART_SetConfig+0x2e4>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d125      	bne.n	800441c <UART_SetConfig+0x1d4>
 80043d0:	4b54      	ldr	r3, [pc, #336]	; (8004524 <UART_SetConfig+0x2dc>)
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80043da:	2b10      	cmp	r3, #16
 80043dc:	d011      	beq.n	8004402 <UART_SetConfig+0x1ba>
 80043de:	2b10      	cmp	r3, #16
 80043e0:	d802      	bhi.n	80043e8 <UART_SetConfig+0x1a0>
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d005      	beq.n	80043f2 <UART_SetConfig+0x1aa>
 80043e6:	e014      	b.n	8004412 <UART_SetConfig+0x1ca>
 80043e8:	2b20      	cmp	r3, #32
 80043ea:	d006      	beq.n	80043fa <UART_SetConfig+0x1b2>
 80043ec:	2b30      	cmp	r3, #48	; 0x30
 80043ee:	d00c      	beq.n	800440a <UART_SetConfig+0x1c2>
 80043f0:	e00f      	b.n	8004412 <UART_SetConfig+0x1ca>
 80043f2:	2300      	movs	r3, #0
 80043f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80043f8:	e06d      	b.n	80044d6 <UART_SetConfig+0x28e>
 80043fa:	2302      	movs	r3, #2
 80043fc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004400:	e069      	b.n	80044d6 <UART_SetConfig+0x28e>
 8004402:	2304      	movs	r3, #4
 8004404:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004408:	e065      	b.n	80044d6 <UART_SetConfig+0x28e>
 800440a:	2308      	movs	r3, #8
 800440c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004410:	e061      	b.n	80044d6 <UART_SetConfig+0x28e>
 8004412:	2310      	movs	r3, #16
 8004414:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004418:	bf00      	nop
 800441a:	e05c      	b.n	80044d6 <UART_SetConfig+0x28e>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	4a43      	ldr	r2, [pc, #268]	; (8004530 <UART_SetConfig+0x2e8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d125      	bne.n	8004472 <UART_SetConfig+0x22a>
 8004426:	4b3f      	ldr	r3, [pc, #252]	; (8004524 <UART_SetConfig+0x2dc>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004430:	2b40      	cmp	r3, #64	; 0x40
 8004432:	d011      	beq.n	8004458 <UART_SetConfig+0x210>
 8004434:	2b40      	cmp	r3, #64	; 0x40
 8004436:	d802      	bhi.n	800443e <UART_SetConfig+0x1f6>
 8004438:	2b00      	cmp	r3, #0
 800443a:	d005      	beq.n	8004448 <UART_SetConfig+0x200>
 800443c:	e014      	b.n	8004468 <UART_SetConfig+0x220>
 800443e:	2b80      	cmp	r3, #128	; 0x80
 8004440:	d006      	beq.n	8004450 <UART_SetConfig+0x208>
 8004442:	2bc0      	cmp	r3, #192	; 0xc0
 8004444:	d00c      	beq.n	8004460 <UART_SetConfig+0x218>
 8004446:	e00f      	b.n	8004468 <UART_SetConfig+0x220>
 8004448:	2300      	movs	r3, #0
 800444a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800444e:	e042      	b.n	80044d6 <UART_SetConfig+0x28e>
 8004450:	2302      	movs	r3, #2
 8004452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004456:	e03e      	b.n	80044d6 <UART_SetConfig+0x28e>
 8004458:	2304      	movs	r3, #4
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800445e:	e03a      	b.n	80044d6 <UART_SetConfig+0x28e>
 8004460:	2308      	movs	r3, #8
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004466:	e036      	b.n	80044d6 <UART_SetConfig+0x28e>
 8004468:	2310      	movs	r3, #16
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800446e:	bf00      	nop
 8004470:	e031      	b.n	80044d6 <UART_SetConfig+0x28e>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a29      	ldr	r2, [pc, #164]	; (800451c <UART_SetConfig+0x2d4>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d129      	bne.n	80044d0 <UART_SetConfig+0x288>
 800447c:	4b29      	ldr	r3, [pc, #164]	; (8004524 <UART_SetConfig+0x2dc>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004486:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800448a:	d014      	beq.n	80044b6 <UART_SetConfig+0x26e>
 800448c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004490:	d802      	bhi.n	8004498 <UART_SetConfig+0x250>
 8004492:	2b00      	cmp	r3, #0
 8004494:	d007      	beq.n	80044a6 <UART_SetConfig+0x25e>
 8004496:	e016      	b.n	80044c6 <UART_SetConfig+0x27e>
 8004498:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800449c:	d007      	beq.n	80044ae <UART_SetConfig+0x266>
 800449e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80044a2:	d00c      	beq.n	80044be <UART_SetConfig+0x276>
 80044a4:	e00f      	b.n	80044c6 <UART_SetConfig+0x27e>
 80044a6:	2300      	movs	r3, #0
 80044a8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044ac:	e013      	b.n	80044d6 <UART_SetConfig+0x28e>
 80044ae:	2302      	movs	r3, #2
 80044b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044b4:	e00f      	b.n	80044d6 <UART_SetConfig+0x28e>
 80044b6:	2304      	movs	r3, #4
 80044b8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044bc:	e00b      	b.n	80044d6 <UART_SetConfig+0x28e>
 80044be:	2308      	movs	r3, #8
 80044c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044c4:	e007      	b.n	80044d6 <UART_SetConfig+0x28e>
 80044c6:	2310      	movs	r3, #16
 80044c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80044cc:	bf00      	nop
 80044ce:	e002      	b.n	80044d6 <UART_SetConfig+0x28e>
 80044d0:	2310      	movs	r3, #16
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	4a10      	ldr	r2, [pc, #64]	; (800451c <UART_SetConfig+0x2d4>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	f040 842e 	bne.w	8004d3e <UART_SetConfig+0xaf6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80044e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80044e6:	2b08      	cmp	r3, #8
 80044e8:	f200 8169 	bhi.w	80047be <UART_SetConfig+0x576>
 80044ec:	a201      	add	r2, pc, #4	; (adr r2, 80044f4 <UART_SetConfig+0x2ac>)
 80044ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044f2:	bf00      	nop
 80044f4:	08004535 	.word	0x08004535
 80044f8:	080047bf 	.word	0x080047bf
 80044fc:	080045d7 	.word	0x080045d7
 8004500:	080047bf 	.word	0x080047bf
 8004504:	0800466f 	.word	0x0800466f
 8004508:	080047bf 	.word	0x080047bf
 800450c:	080047bf 	.word	0x080047bf
 8004510:	080047bf 	.word	0x080047bf
 8004514:	08004711 	.word	0x08004711
 8004518:	cfff69f3 	.word	0xcfff69f3
 800451c:	40008000 	.word	0x40008000
 8004520:	40013800 	.word	0x40013800
 8004524:	40021000 	.word	0x40021000
 8004528:	40004400 	.word	0x40004400
 800452c:	40004800 	.word	0x40004800
 8004530:	40004c00 	.word	0x40004c00
    {
      case UART_CLOCKSOURCE_PCLK1:
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004534:	f7fe fb02 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8004538:	4602      	mov	r2, r0
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	2b00      	cmp	r3, #0
 8004540:	d044      	beq.n	80045cc <UART_SetConfig+0x384>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004546:	2b01      	cmp	r3, #1
 8004548:	d03e      	beq.n	80045c8 <UART_SetConfig+0x380>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	2b02      	cmp	r3, #2
 8004550:	d038      	beq.n	80045c4 <UART_SetConfig+0x37c>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004556:	2b03      	cmp	r3, #3
 8004558:	d032      	beq.n	80045c0 <UART_SetConfig+0x378>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800455e:	2b04      	cmp	r3, #4
 8004560:	d02c      	beq.n	80045bc <UART_SetConfig+0x374>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004566:	2b05      	cmp	r3, #5
 8004568:	d026      	beq.n	80045b8 <UART_SetConfig+0x370>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800456e:	2b06      	cmp	r3, #6
 8004570:	d020      	beq.n	80045b4 <UART_SetConfig+0x36c>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	2b07      	cmp	r3, #7
 8004578:	d01a      	beq.n	80045b0 <UART_SetConfig+0x368>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457e:	2b08      	cmp	r3, #8
 8004580:	d014      	beq.n	80045ac <UART_SetConfig+0x364>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004586:	2b09      	cmp	r3, #9
 8004588:	d00e      	beq.n	80045a8 <UART_SetConfig+0x360>
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	2b0a      	cmp	r3, #10
 8004590:	d008      	beq.n	80045a4 <UART_SetConfig+0x35c>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	2b0b      	cmp	r3, #11
 8004598:	d102      	bne.n	80045a0 <UART_SetConfig+0x358>
 800459a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800459e:	e016      	b.n	80045ce <UART_SetConfig+0x386>
 80045a0:	2301      	movs	r3, #1
 80045a2:	e014      	b.n	80045ce <UART_SetConfig+0x386>
 80045a4:	2380      	movs	r3, #128	; 0x80
 80045a6:	e012      	b.n	80045ce <UART_SetConfig+0x386>
 80045a8:	2340      	movs	r3, #64	; 0x40
 80045aa:	e010      	b.n	80045ce <UART_SetConfig+0x386>
 80045ac:	2320      	movs	r3, #32
 80045ae:	e00e      	b.n	80045ce <UART_SetConfig+0x386>
 80045b0:	2310      	movs	r3, #16
 80045b2:	e00c      	b.n	80045ce <UART_SetConfig+0x386>
 80045b4:	230c      	movs	r3, #12
 80045b6:	e00a      	b.n	80045ce <UART_SetConfig+0x386>
 80045b8:	230a      	movs	r3, #10
 80045ba:	e008      	b.n	80045ce <UART_SetConfig+0x386>
 80045bc:	2308      	movs	r3, #8
 80045be:	e006      	b.n	80045ce <UART_SetConfig+0x386>
 80045c0:	2306      	movs	r3, #6
 80045c2:	e004      	b.n	80045ce <UART_SetConfig+0x386>
 80045c4:	2304      	movs	r3, #4
 80045c6:	e002      	b.n	80045ce <UART_SetConfig+0x386>
 80045c8:	2302      	movs	r3, #2
 80045ca:	e000      	b.n	80045ce <UART_SetConfig+0x386>
 80045cc:	2301      	movs	r3, #1
 80045ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80045d2:	617b      	str	r3, [r7, #20]
        break;
 80045d4:	e0f6      	b.n	80047c4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_HSI:
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d044      	beq.n	8004668 <UART_SetConfig+0x420>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d03e      	beq.n	8004664 <UART_SetConfig+0x41c>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2b02      	cmp	r3, #2
 80045ec:	d038      	beq.n	8004660 <UART_SetConfig+0x418>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b03      	cmp	r3, #3
 80045f4:	d032      	beq.n	800465c <UART_SetConfig+0x414>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	d02c      	beq.n	8004658 <UART_SetConfig+0x410>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b05      	cmp	r3, #5
 8004604:	d026      	beq.n	8004654 <UART_SetConfig+0x40c>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	2b06      	cmp	r3, #6
 800460c:	d020      	beq.n	8004650 <UART_SetConfig+0x408>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	2b07      	cmp	r3, #7
 8004614:	d01a      	beq.n	800464c <UART_SetConfig+0x404>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b08      	cmp	r3, #8
 800461c:	d014      	beq.n	8004648 <UART_SetConfig+0x400>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	2b09      	cmp	r3, #9
 8004624:	d00e      	beq.n	8004644 <UART_SetConfig+0x3fc>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	2b0a      	cmp	r3, #10
 800462c:	d008      	beq.n	8004640 <UART_SetConfig+0x3f8>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004632:	2b0b      	cmp	r3, #11
 8004634:	d102      	bne.n	800463c <UART_SetConfig+0x3f4>
 8004636:	f24f 4324 	movw	r3, #62500	; 0xf424
 800463a:	e016      	b.n	800466a <UART_SetConfig+0x422>
 800463c:	4ba1      	ldr	r3, [pc, #644]	; (80048c4 <UART_SetConfig+0x67c>)
 800463e:	e014      	b.n	800466a <UART_SetConfig+0x422>
 8004640:	4ba1      	ldr	r3, [pc, #644]	; (80048c8 <UART_SetConfig+0x680>)
 8004642:	e012      	b.n	800466a <UART_SetConfig+0x422>
 8004644:	4ba1      	ldr	r3, [pc, #644]	; (80048cc <UART_SetConfig+0x684>)
 8004646:	e010      	b.n	800466a <UART_SetConfig+0x422>
 8004648:	4ba1      	ldr	r3, [pc, #644]	; (80048d0 <UART_SetConfig+0x688>)
 800464a:	e00e      	b.n	800466a <UART_SetConfig+0x422>
 800464c:	4ba1      	ldr	r3, [pc, #644]	; (80048d4 <UART_SetConfig+0x68c>)
 800464e:	e00c      	b.n	800466a <UART_SetConfig+0x422>
 8004650:	4ba1      	ldr	r3, [pc, #644]	; (80048d8 <UART_SetConfig+0x690>)
 8004652:	e00a      	b.n	800466a <UART_SetConfig+0x422>
 8004654:	4ba1      	ldr	r3, [pc, #644]	; (80048dc <UART_SetConfig+0x694>)
 8004656:	e008      	b.n	800466a <UART_SetConfig+0x422>
 8004658:	4ba1      	ldr	r3, [pc, #644]	; (80048e0 <UART_SetConfig+0x698>)
 800465a:	e006      	b.n	800466a <UART_SetConfig+0x422>
 800465c:	4ba1      	ldr	r3, [pc, #644]	; (80048e4 <UART_SetConfig+0x69c>)
 800465e:	e004      	b.n	800466a <UART_SetConfig+0x422>
 8004660:	4ba1      	ldr	r3, [pc, #644]	; (80048e8 <UART_SetConfig+0x6a0>)
 8004662:	e002      	b.n	800466a <UART_SetConfig+0x422>
 8004664:	4ba1      	ldr	r3, [pc, #644]	; (80048ec <UART_SetConfig+0x6a4>)
 8004666:	e000      	b.n	800466a <UART_SetConfig+0x422>
 8004668:	4b96      	ldr	r3, [pc, #600]	; (80048c4 <UART_SetConfig+0x67c>)
 800466a:	617b      	str	r3, [r7, #20]
        break;
 800466c:	e0aa      	b.n	80047c4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_SYSCLK:
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800466e:	f7fe f9f7 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8004672:	4602      	mov	r2, r0
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004678:	2b00      	cmp	r3, #0
 800467a:	d044      	beq.n	8004706 <UART_SetConfig+0x4be>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004680:	2b01      	cmp	r3, #1
 8004682:	d03e      	beq.n	8004702 <UART_SetConfig+0x4ba>
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004688:	2b02      	cmp	r3, #2
 800468a:	d038      	beq.n	80046fe <UART_SetConfig+0x4b6>
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004690:	2b03      	cmp	r3, #3
 8004692:	d032      	beq.n	80046fa <UART_SetConfig+0x4b2>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	2b04      	cmp	r3, #4
 800469a:	d02c      	beq.n	80046f6 <UART_SetConfig+0x4ae>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a0:	2b05      	cmp	r3, #5
 80046a2:	d026      	beq.n	80046f2 <UART_SetConfig+0x4aa>
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a8:	2b06      	cmp	r3, #6
 80046aa:	d020      	beq.n	80046ee <UART_SetConfig+0x4a6>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b0:	2b07      	cmp	r3, #7
 80046b2:	d01a      	beq.n	80046ea <UART_SetConfig+0x4a2>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b8:	2b08      	cmp	r3, #8
 80046ba:	d014      	beq.n	80046e6 <UART_SetConfig+0x49e>
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c0:	2b09      	cmp	r3, #9
 80046c2:	d00e      	beq.n	80046e2 <UART_SetConfig+0x49a>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	2b0a      	cmp	r3, #10
 80046ca:	d008      	beq.n	80046de <UART_SetConfig+0x496>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	2b0b      	cmp	r3, #11
 80046d2:	d102      	bne.n	80046da <UART_SetConfig+0x492>
 80046d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80046d8:	e016      	b.n	8004708 <UART_SetConfig+0x4c0>
 80046da:	2301      	movs	r3, #1
 80046dc:	e014      	b.n	8004708 <UART_SetConfig+0x4c0>
 80046de:	2380      	movs	r3, #128	; 0x80
 80046e0:	e012      	b.n	8004708 <UART_SetConfig+0x4c0>
 80046e2:	2340      	movs	r3, #64	; 0x40
 80046e4:	e010      	b.n	8004708 <UART_SetConfig+0x4c0>
 80046e6:	2320      	movs	r3, #32
 80046e8:	e00e      	b.n	8004708 <UART_SetConfig+0x4c0>
 80046ea:	2310      	movs	r3, #16
 80046ec:	e00c      	b.n	8004708 <UART_SetConfig+0x4c0>
 80046ee:	230c      	movs	r3, #12
 80046f0:	e00a      	b.n	8004708 <UART_SetConfig+0x4c0>
 80046f2:	230a      	movs	r3, #10
 80046f4:	e008      	b.n	8004708 <UART_SetConfig+0x4c0>
 80046f6:	2308      	movs	r3, #8
 80046f8:	e006      	b.n	8004708 <UART_SetConfig+0x4c0>
 80046fa:	2306      	movs	r3, #6
 80046fc:	e004      	b.n	8004708 <UART_SetConfig+0x4c0>
 80046fe:	2304      	movs	r3, #4
 8004700:	e002      	b.n	8004708 <UART_SetConfig+0x4c0>
 8004702:	2302      	movs	r3, #2
 8004704:	e000      	b.n	8004708 <UART_SetConfig+0x4c0>
 8004706:	2301      	movs	r3, #1
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	617b      	str	r3, [r7, #20]
        break;
 800470e:	e059      	b.n	80047c4 <UART_SetConfig+0x57c>
      case UART_CLOCKSOURCE_LSE:
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004714:	2b00      	cmp	r3, #0
 8004716:	d04e      	beq.n	80047b6 <UART_SetConfig+0x56e>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471c:	2b01      	cmp	r3, #1
 800471e:	d047      	beq.n	80047b0 <UART_SetConfig+0x568>
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004724:	2b02      	cmp	r3, #2
 8004726:	d040      	beq.n	80047aa <UART_SetConfig+0x562>
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472c:	2b03      	cmp	r3, #3
 800472e:	d039      	beq.n	80047a4 <UART_SetConfig+0x55c>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004734:	2b04      	cmp	r3, #4
 8004736:	d032      	beq.n	800479e <UART_SetConfig+0x556>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800473c:	2b05      	cmp	r3, #5
 800473e:	d02b      	beq.n	8004798 <UART_SetConfig+0x550>
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004744:	2b06      	cmp	r3, #6
 8004746:	d024      	beq.n	8004792 <UART_SetConfig+0x54a>
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474c:	2b07      	cmp	r3, #7
 800474e:	d01d      	beq.n	800478c <UART_SetConfig+0x544>
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004754:	2b08      	cmp	r3, #8
 8004756:	d016      	beq.n	8004786 <UART_SetConfig+0x53e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	2b09      	cmp	r3, #9
 800475e:	d00f      	beq.n	8004780 <UART_SetConfig+0x538>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004764:	2b0a      	cmp	r3, #10
 8004766:	d008      	beq.n	800477a <UART_SetConfig+0x532>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800476c:	2b0b      	cmp	r3, #11
 800476e:	d101      	bne.n	8004774 <UART_SetConfig+0x52c>
 8004770:	2380      	movs	r3, #128	; 0x80
 8004772:	e022      	b.n	80047ba <UART_SetConfig+0x572>
 8004774:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004778:	e01f      	b.n	80047ba <UART_SetConfig+0x572>
 800477a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800477e:	e01c      	b.n	80047ba <UART_SetConfig+0x572>
 8004780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004784:	e019      	b.n	80047ba <UART_SetConfig+0x572>
 8004786:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800478a:	e016      	b.n	80047ba <UART_SetConfig+0x572>
 800478c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004790:	e013      	b.n	80047ba <UART_SetConfig+0x572>
 8004792:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004796:	e010      	b.n	80047ba <UART_SetConfig+0x572>
 8004798:	f640 43cc 	movw	r3, #3276	; 0xccc
 800479c:	e00d      	b.n	80047ba <UART_SetConfig+0x572>
 800479e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80047a2:	e00a      	b.n	80047ba <UART_SetConfig+0x572>
 80047a4:	f241 5355 	movw	r3, #5461	; 0x1555
 80047a8:	e007      	b.n	80047ba <UART_SetConfig+0x572>
 80047aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80047ae:	e004      	b.n	80047ba <UART_SetConfig+0x572>
 80047b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80047b4:	e001      	b.n	80047ba <UART_SetConfig+0x572>
 80047b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ba:	617b      	str	r3, [r7, #20]
        break;
 80047bc:	e002      	b.n	80047c4 <UART_SetConfig+0x57c>
      default:
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	76fb      	strb	r3, [r7, #27]
        break;
 80047c2:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	f000 86cd 	beq.w	8005566 <UART_SetConfig+0x131e>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	4613      	mov	r3, r2
 80047d2:	005b      	lsls	r3, r3, #1
 80047d4:	4413      	add	r3, r2
 80047d6:	697a      	ldr	r2, [r7, #20]
 80047d8:	429a      	cmp	r2, r3
 80047da:	d305      	bcc.n	80047e8 <UART_SetConfig+0x5a0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	429a      	cmp	r2, r3
 80047e6:	d903      	bls.n	80047f0 <UART_SetConfig+0x5a8>
      {
        ret = HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	76fb      	strb	r3, [r7, #27]
 80047ec:	f000 bebb 	b.w	8005566 <UART_SetConfig+0x131e>
      }
      else
      {
        switch (clocksource)
 80047f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80047f4:	2b08      	cmp	r3, #8
 80047f6:	f200 828d 	bhi.w	8004d14 <UART_SetConfig+0xacc>
 80047fa:	a201      	add	r2, pc, #4	; (adr r2, 8004800 <UART_SetConfig+0x5b8>)
 80047fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004800:	08004825 	.word	0x08004825
 8004804:	08004d15 	.word	0x08004d15
 8004808:	0800498f 	.word	0x0800498f
 800480c:	08004d15 	.word	0x08004d15
 8004810:	08004a85 	.word	0x08004a85
 8004814:	08004d15 	.word	0x08004d15
 8004818:	08004d15 	.word	0x08004d15
 800481c:	08004d15 	.word	0x08004d15
 8004820:	08004bc3 	.word	0x08004bc3
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004824:	f7fe f98a 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8004828:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	4618      	mov	r0, r3
 800482e:	f04f 0100 	mov.w	r1, #0
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004836:	2b00      	cmp	r3, #0
 8004838:	d07d      	beq.n	8004936 <UART_SetConfig+0x6ee>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	2b01      	cmp	r3, #1
 8004840:	d074      	beq.n	800492c <UART_SetConfig+0x6e4>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004846:	2b02      	cmp	r3, #2
 8004848:	d06b      	beq.n	8004922 <UART_SetConfig+0x6da>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484e:	2b03      	cmp	r3, #3
 8004850:	d062      	beq.n	8004918 <UART_SetConfig+0x6d0>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004856:	2b04      	cmp	r3, #4
 8004858:	d059      	beq.n	800490e <UART_SetConfig+0x6c6>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800485e:	2b05      	cmp	r3, #5
 8004860:	d050      	beq.n	8004904 <UART_SetConfig+0x6bc>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004866:	2b06      	cmp	r3, #6
 8004868:	d047      	beq.n	80048fa <UART_SetConfig+0x6b2>
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800486e:	2b07      	cmp	r3, #7
 8004870:	d03e      	beq.n	80048f0 <UART_SetConfig+0x6a8>
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004876:	2b08      	cmp	r3, #8
 8004878:	d01f      	beq.n	80048ba <UART_SetConfig+0x672>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	2b09      	cmp	r3, #9
 8004880:	d016      	beq.n	80048b0 <UART_SetConfig+0x668>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	2b0a      	cmp	r3, #10
 8004888:	d00d      	beq.n	80048a6 <UART_SetConfig+0x65e>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488e:	2b0b      	cmp	r3, #11
 8004890:	d104      	bne.n	800489c <UART_SetConfig+0x654>
 8004892:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004896:	f04f 0400 	mov.w	r4, #0
 800489a:	e050      	b.n	800493e <UART_SetConfig+0x6f6>
 800489c:	f04f 0301 	mov.w	r3, #1
 80048a0:	f04f 0400 	mov.w	r4, #0
 80048a4:	e04b      	b.n	800493e <UART_SetConfig+0x6f6>
 80048a6:	f04f 0380 	mov.w	r3, #128	; 0x80
 80048aa:	f04f 0400 	mov.w	r4, #0
 80048ae:	e046      	b.n	800493e <UART_SetConfig+0x6f6>
 80048b0:	f04f 0340 	mov.w	r3, #64	; 0x40
 80048b4:	f04f 0400 	mov.w	r4, #0
 80048b8:	e041      	b.n	800493e <UART_SetConfig+0x6f6>
 80048ba:	f04f 0320 	mov.w	r3, #32
 80048be:	f04f 0400 	mov.w	r4, #0
 80048c2:	e03c      	b.n	800493e <UART_SetConfig+0x6f6>
 80048c4:	00f42400 	.word	0x00f42400
 80048c8:	0001e848 	.word	0x0001e848
 80048cc:	0003d090 	.word	0x0003d090
 80048d0:	0007a120 	.word	0x0007a120
 80048d4:	000f4240 	.word	0x000f4240
 80048d8:	00145855 	.word	0x00145855
 80048dc:	00186a00 	.word	0x00186a00
 80048e0:	001e8480 	.word	0x001e8480
 80048e4:	0028b0aa 	.word	0x0028b0aa
 80048e8:	003d0900 	.word	0x003d0900
 80048ec:	007a1200 	.word	0x007a1200
 80048f0:	f04f 0310 	mov.w	r3, #16
 80048f4:	f04f 0400 	mov.w	r4, #0
 80048f8:	e021      	b.n	800493e <UART_SetConfig+0x6f6>
 80048fa:	f04f 030c 	mov.w	r3, #12
 80048fe:	f04f 0400 	mov.w	r4, #0
 8004902:	e01c      	b.n	800493e <UART_SetConfig+0x6f6>
 8004904:	f04f 030a 	mov.w	r3, #10
 8004908:	f04f 0400 	mov.w	r4, #0
 800490c:	e017      	b.n	800493e <UART_SetConfig+0x6f6>
 800490e:	f04f 0308 	mov.w	r3, #8
 8004912:	f04f 0400 	mov.w	r4, #0
 8004916:	e012      	b.n	800493e <UART_SetConfig+0x6f6>
 8004918:	f04f 0306 	mov.w	r3, #6
 800491c:	f04f 0400 	mov.w	r4, #0
 8004920:	e00d      	b.n	800493e <UART_SetConfig+0x6f6>
 8004922:	f04f 0304 	mov.w	r3, #4
 8004926:	f04f 0400 	mov.w	r4, #0
 800492a:	e008      	b.n	800493e <UART_SetConfig+0x6f6>
 800492c:	f04f 0302 	mov.w	r3, #2
 8004930:	f04f 0400 	mov.w	r4, #0
 8004934:	e003      	b.n	800493e <UART_SetConfig+0x6f6>
 8004936:	f04f 0301 	mov.w	r3, #1
 800493a:	f04f 0400 	mov.w	r4, #0
 800493e:	461a      	mov	r2, r3
 8004940:	4623      	mov	r3, r4
 8004942:	f7fb fc69 	bl	8000218 <__aeabi_uldivmod>
 8004946:	4603      	mov	r3, r0
 8004948:	460c      	mov	r4, r1
 800494a:	4619      	mov	r1, r3
 800494c:	4622      	mov	r2, r4
 800494e:	f04f 0300 	mov.w	r3, #0
 8004952:	f04f 0400 	mov.w	r4, #0
 8004956:	0214      	lsls	r4, r2, #8
 8004958:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800495c:	020b      	lsls	r3, r1, #8
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	6852      	ldr	r2, [r2, #4]
 8004962:	0852      	lsrs	r2, r2, #1
 8004964:	4611      	mov	r1, r2
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	eb13 0b01 	adds.w	fp, r3, r1
 800496e:	eb44 0c02 	adc.w	ip, r4, r2
 8004972:	4658      	mov	r0, fp
 8004974:	4661      	mov	r1, ip
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	685b      	ldr	r3, [r3, #4]
 800497a:	f04f 0400 	mov.w	r4, #0
 800497e:	461a      	mov	r2, r3
 8004980:	4623      	mov	r3, r4
 8004982:	f7fb fc49 	bl	8000218 <__aeabi_uldivmod>
 8004986:	4603      	mov	r3, r0
 8004988:	460c      	mov	r4, r1
 800498a:	61fb      	str	r3, [r7, #28]
            break;
 800498c:	e1c5      	b.n	8004d1a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_HSI:
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004992:	2b00      	cmp	r3, #0
 8004994:	d05b      	beq.n	8004a4e <UART_SetConfig+0x806>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499a:	2b01      	cmp	r3, #1
 800499c:	d053      	beq.n	8004a46 <UART_SetConfig+0x7fe>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a2:	2b02      	cmp	r3, #2
 80049a4:	d04b      	beq.n	8004a3e <UART_SetConfig+0x7f6>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049aa:	2b03      	cmp	r3, #3
 80049ac:	d043      	beq.n	8004a36 <UART_SetConfig+0x7ee>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049b2:	2b04      	cmp	r3, #4
 80049b4:	d03b      	beq.n	8004a2e <UART_SetConfig+0x7e6>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ba:	2b05      	cmp	r3, #5
 80049bc:	d033      	beq.n	8004a26 <UART_SetConfig+0x7de>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c2:	2b06      	cmp	r3, #6
 80049c4:	d02b      	beq.n	8004a1e <UART_SetConfig+0x7d6>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	2b07      	cmp	r3, #7
 80049cc:	d023      	beq.n	8004a16 <UART_SetConfig+0x7ce>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d01b      	beq.n	8004a0e <UART_SetConfig+0x7c6>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2b09      	cmp	r3, #9
 80049dc:	d013      	beq.n	8004a06 <UART_SetConfig+0x7be>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2b0a      	cmp	r3, #10
 80049e4:	d00b      	beq.n	80049fe <UART_SetConfig+0x7b6>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b0b      	cmp	r3, #11
 80049ec:	d103      	bne.n	80049f6 <UART_SetConfig+0x7ae>
 80049ee:	4bae      	ldr	r3, [pc, #696]	; (8004ca8 <UART_SetConfig+0xa60>)
 80049f0:	f04f 0400 	mov.w	r4, #0
 80049f4:	e02e      	b.n	8004a54 <UART_SetConfig+0x80c>
 80049f6:	4bad      	ldr	r3, [pc, #692]	; (8004cac <UART_SetConfig+0xa64>)
 80049f8:	f04f 0400 	mov.w	r4, #0
 80049fc:	e02a      	b.n	8004a54 <UART_SetConfig+0x80c>
 80049fe:	4bac      	ldr	r3, [pc, #688]	; (8004cb0 <UART_SetConfig+0xa68>)
 8004a00:	f04f 0400 	mov.w	r4, #0
 8004a04:	e026      	b.n	8004a54 <UART_SetConfig+0x80c>
 8004a06:	4bab      	ldr	r3, [pc, #684]	; (8004cb4 <UART_SetConfig+0xa6c>)
 8004a08:	f04f 0400 	mov.w	r4, #0
 8004a0c:	e022      	b.n	8004a54 <UART_SetConfig+0x80c>
 8004a0e:	4baa      	ldr	r3, [pc, #680]	; (8004cb8 <UART_SetConfig+0xa70>)
 8004a10:	f04f 0400 	mov.w	r4, #0
 8004a14:	e01e      	b.n	8004a54 <UART_SetConfig+0x80c>
 8004a16:	4ba9      	ldr	r3, [pc, #676]	; (8004cbc <UART_SetConfig+0xa74>)
 8004a18:	f04f 0400 	mov.w	r4, #0
 8004a1c:	e01a      	b.n	8004a54 <UART_SetConfig+0x80c>
 8004a1e:	a49e      	add	r4, pc, #632	; (adr r4, 8004c98 <UART_SetConfig+0xa50>)
 8004a20:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004a24:	e016      	b.n	8004a54 <UART_SetConfig+0x80c>
 8004a26:	4ba6      	ldr	r3, [pc, #664]	; (8004cc0 <UART_SetConfig+0xa78>)
 8004a28:	f04f 0400 	mov.w	r4, #0
 8004a2c:	e012      	b.n	8004a54 <UART_SetConfig+0x80c>
 8004a2e:	4ba5      	ldr	r3, [pc, #660]	; (8004cc4 <UART_SetConfig+0xa7c>)
 8004a30:	f04f 0400 	mov.w	r4, #0
 8004a34:	e00e      	b.n	8004a54 <UART_SetConfig+0x80c>
 8004a36:	a49a      	add	r4, pc, #616	; (adr r4, 8004ca0 <UART_SetConfig+0xa58>)
 8004a38:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004a3c:	e00a      	b.n	8004a54 <UART_SetConfig+0x80c>
 8004a3e:	4ba2      	ldr	r3, [pc, #648]	; (8004cc8 <UART_SetConfig+0xa80>)
 8004a40:	f04f 0400 	mov.w	r4, #0
 8004a44:	e006      	b.n	8004a54 <UART_SetConfig+0x80c>
 8004a46:	4ba1      	ldr	r3, [pc, #644]	; (8004ccc <UART_SetConfig+0xa84>)
 8004a48:	f04f 0400 	mov.w	r4, #0
 8004a4c:	e002      	b.n	8004a54 <UART_SetConfig+0x80c>
 8004a4e:	4b97      	ldr	r3, [pc, #604]	; (8004cac <UART_SetConfig+0xa64>)
 8004a50:	f04f 0400 	mov.w	r4, #0
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6852      	ldr	r2, [r2, #4]
 8004a58:	0852      	lsrs	r2, r2, #1
 8004a5a:	4611      	mov	r1, r2
 8004a5c:	f04f 0200 	mov.w	r2, #0
 8004a60:	eb13 0b01 	adds.w	fp, r3, r1
 8004a64:	eb44 0c02 	adc.w	ip, r4, r2
 8004a68:	4658      	mov	r0, fp
 8004a6a:	4661      	mov	r1, ip
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	685b      	ldr	r3, [r3, #4]
 8004a70:	f04f 0400 	mov.w	r4, #0
 8004a74:	461a      	mov	r2, r3
 8004a76:	4623      	mov	r3, r4
 8004a78:	f7fb fbce 	bl	8000218 <__aeabi_uldivmod>
 8004a7c:	4603      	mov	r3, r0
 8004a7e:	460c      	mov	r4, r1
 8004a80:	61fb      	str	r3, [r7, #28]
            break;
 8004a82:	e14a      	b.n	8004d1a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 8004a84:	f7fd ffec 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8004a88:	6138      	str	r0, [r7, #16]
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	4618      	mov	r0, r3
 8004a8e:	f04f 0100 	mov.w	r1, #0
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d067      	beq.n	8004b6a <UART_SetConfig+0x922>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9e:	2b01      	cmp	r3, #1
 8004aa0:	d05e      	beq.n	8004b60 <UART_SetConfig+0x918>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d055      	beq.n	8004b56 <UART_SetConfig+0x90e>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	2b03      	cmp	r3, #3
 8004ab0:	d04c      	beq.n	8004b4c <UART_SetConfig+0x904>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	2b04      	cmp	r3, #4
 8004ab8:	d043      	beq.n	8004b42 <UART_SetConfig+0x8fa>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004abe:	2b05      	cmp	r3, #5
 8004ac0:	d03a      	beq.n	8004b38 <UART_SetConfig+0x8f0>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac6:	2b06      	cmp	r3, #6
 8004ac8:	d031      	beq.n	8004b2e <UART_SetConfig+0x8e6>
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	2b07      	cmp	r3, #7
 8004ad0:	d028      	beq.n	8004b24 <UART_SetConfig+0x8dc>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d01f      	beq.n	8004b1a <UART_SetConfig+0x8d2>
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ade:	2b09      	cmp	r3, #9
 8004ae0:	d016      	beq.n	8004b10 <UART_SetConfig+0x8c8>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae6:	2b0a      	cmp	r3, #10
 8004ae8:	d00d      	beq.n	8004b06 <UART_SetConfig+0x8be>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aee:	2b0b      	cmp	r3, #11
 8004af0:	d104      	bne.n	8004afc <UART_SetConfig+0x8b4>
 8004af2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004af6:	f04f 0400 	mov.w	r4, #0
 8004afa:	e03a      	b.n	8004b72 <UART_SetConfig+0x92a>
 8004afc:	f04f 0301 	mov.w	r3, #1
 8004b00:	f04f 0400 	mov.w	r4, #0
 8004b04:	e035      	b.n	8004b72 <UART_SetConfig+0x92a>
 8004b06:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004b0a:	f04f 0400 	mov.w	r4, #0
 8004b0e:	e030      	b.n	8004b72 <UART_SetConfig+0x92a>
 8004b10:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004b14:	f04f 0400 	mov.w	r4, #0
 8004b18:	e02b      	b.n	8004b72 <UART_SetConfig+0x92a>
 8004b1a:	f04f 0320 	mov.w	r3, #32
 8004b1e:	f04f 0400 	mov.w	r4, #0
 8004b22:	e026      	b.n	8004b72 <UART_SetConfig+0x92a>
 8004b24:	f04f 0310 	mov.w	r3, #16
 8004b28:	f04f 0400 	mov.w	r4, #0
 8004b2c:	e021      	b.n	8004b72 <UART_SetConfig+0x92a>
 8004b2e:	f04f 030c 	mov.w	r3, #12
 8004b32:	f04f 0400 	mov.w	r4, #0
 8004b36:	e01c      	b.n	8004b72 <UART_SetConfig+0x92a>
 8004b38:	f04f 030a 	mov.w	r3, #10
 8004b3c:	f04f 0400 	mov.w	r4, #0
 8004b40:	e017      	b.n	8004b72 <UART_SetConfig+0x92a>
 8004b42:	f04f 0308 	mov.w	r3, #8
 8004b46:	f04f 0400 	mov.w	r4, #0
 8004b4a:	e012      	b.n	8004b72 <UART_SetConfig+0x92a>
 8004b4c:	f04f 0306 	mov.w	r3, #6
 8004b50:	f04f 0400 	mov.w	r4, #0
 8004b54:	e00d      	b.n	8004b72 <UART_SetConfig+0x92a>
 8004b56:	f04f 0304 	mov.w	r3, #4
 8004b5a:	f04f 0400 	mov.w	r4, #0
 8004b5e:	e008      	b.n	8004b72 <UART_SetConfig+0x92a>
 8004b60:	f04f 0302 	mov.w	r3, #2
 8004b64:	f04f 0400 	mov.w	r4, #0
 8004b68:	e003      	b.n	8004b72 <UART_SetConfig+0x92a>
 8004b6a:	f04f 0301 	mov.w	r3, #1
 8004b6e:	f04f 0400 	mov.w	r4, #0
 8004b72:	461a      	mov	r2, r3
 8004b74:	4623      	mov	r3, r4
 8004b76:	f7fb fb4f 	bl	8000218 <__aeabi_uldivmod>
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	460c      	mov	r4, r1
 8004b7e:	4619      	mov	r1, r3
 8004b80:	4622      	mov	r2, r4
 8004b82:	f04f 0300 	mov.w	r3, #0
 8004b86:	f04f 0400 	mov.w	r4, #0
 8004b8a:	0214      	lsls	r4, r2, #8
 8004b8c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 8004b90:	020b      	lsls	r3, r1, #8
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	6852      	ldr	r2, [r2, #4]
 8004b96:	0852      	lsrs	r2, r2, #1
 8004b98:	4611      	mov	r1, r2
 8004b9a:	f04f 0200 	mov.w	r2, #0
 8004b9e:	eb13 0b01 	adds.w	fp, r3, r1
 8004ba2:	eb44 0c02 	adc.w	ip, r4, r2
 8004ba6:	4658      	mov	r0, fp
 8004ba8:	4661      	mov	r1, ip
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	f04f 0400 	mov.w	r4, #0
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	4623      	mov	r3, r4
 8004bb6:	f7fb fb2f 	bl	8000218 <__aeabi_uldivmod>
 8004bba:	4603      	mov	r3, r0
 8004bbc:	460c      	mov	r4, r1
 8004bbe:	61fb      	str	r3, [r7, #28]
            break;
 8004bc0:	e0ab      	b.n	8004d1a <UART_SetConfig+0xad2>
          case UART_CLOCKSOURCE_LSE:
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	f000 8088 	beq.w	8004cdc <UART_SetConfig+0xa94>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	2b01      	cmp	r3, #1
 8004bd2:	d05b      	beq.n	8004c8c <UART_SetConfig+0xa44>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d052      	beq.n	8004c82 <UART_SetConfig+0xa3a>
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be0:	2b03      	cmp	r3, #3
 8004be2:	d04a      	beq.n	8004c7a <UART_SetConfig+0xa32>
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be8:	2b04      	cmp	r3, #4
 8004bea:	d041      	beq.n	8004c70 <UART_SetConfig+0xa28>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf0:	2b05      	cmp	r3, #5
 8004bf2:	d039      	beq.n	8004c68 <UART_SetConfig+0xa20>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	2b06      	cmp	r3, #6
 8004bfa:	d031      	beq.n	8004c60 <UART_SetConfig+0xa18>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c00:	2b07      	cmp	r3, #7
 8004c02:	d028      	beq.n	8004c56 <UART_SetConfig+0xa0e>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d01f      	beq.n	8004c4c <UART_SetConfig+0xa04>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c10:	2b09      	cmp	r3, #9
 8004c12:	d016      	beq.n	8004c42 <UART_SetConfig+0x9fa>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	2b0a      	cmp	r3, #10
 8004c1a:	d00d      	beq.n	8004c38 <UART_SetConfig+0x9f0>
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	2b0b      	cmp	r3, #11
 8004c22:	d104      	bne.n	8004c2e <UART_SetConfig+0x9e6>
 8004c24:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004c28:	f04f 0400 	mov.w	r4, #0
 8004c2c:	e05a      	b.n	8004ce4 <UART_SetConfig+0xa9c>
 8004c2e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004c32:	f04f 0400 	mov.w	r4, #0
 8004c36:	e055      	b.n	8004ce4 <UART_SetConfig+0xa9c>
 8004c38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004c3c:	f04f 0400 	mov.w	r4, #0
 8004c40:	e050      	b.n	8004ce4 <UART_SetConfig+0xa9c>
 8004c42:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004c46:	f04f 0400 	mov.w	r4, #0
 8004c4a:	e04b      	b.n	8004ce4 <UART_SetConfig+0xa9c>
 8004c4c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004c50:	f04f 0400 	mov.w	r4, #0
 8004c54:	e046      	b.n	8004ce4 <UART_SetConfig+0xa9c>
 8004c56:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004c5a:	f04f 0400 	mov.w	r4, #0
 8004c5e:	e041      	b.n	8004ce4 <UART_SetConfig+0xa9c>
 8004c60:	4b1b      	ldr	r3, [pc, #108]	; (8004cd0 <UART_SetConfig+0xa88>)
 8004c62:	f04f 0400 	mov.w	r4, #0
 8004c66:	e03d      	b.n	8004ce4 <UART_SetConfig+0xa9c>
 8004c68:	4b1a      	ldr	r3, [pc, #104]	; (8004cd4 <UART_SetConfig+0xa8c>)
 8004c6a:	f04f 0400 	mov.w	r4, #0
 8004c6e:	e039      	b.n	8004ce4 <UART_SetConfig+0xa9c>
 8004c70:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004c74:	f04f 0400 	mov.w	r4, #0
 8004c78:	e034      	b.n	8004ce4 <UART_SetConfig+0xa9c>
 8004c7a:	4b17      	ldr	r3, [pc, #92]	; (8004cd8 <UART_SetConfig+0xa90>)
 8004c7c:	f04f 0400 	mov.w	r4, #0
 8004c80:	e030      	b.n	8004ce4 <UART_SetConfig+0xa9c>
 8004c82:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004c86:	f04f 0400 	mov.w	r4, #0
 8004c8a:	e02b      	b.n	8004ce4 <UART_SetConfig+0xa9c>
 8004c8c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004c90:	f04f 0400 	mov.w	r4, #0
 8004c94:	e026      	b.n	8004ce4 <UART_SetConfig+0xa9c>
 8004c96:	bf00      	nop
 8004c98:	14585500 	.word	0x14585500
 8004c9c:	00000000 	.word	0x00000000
 8004ca0:	28b0aa00 	.word	0x28b0aa00
 8004ca4:	00000000 	.word	0x00000000
 8004ca8:	00f42400 	.word	0x00f42400
 8004cac:	f4240000 	.word	0xf4240000
 8004cb0:	01e84800 	.word	0x01e84800
 8004cb4:	03d09000 	.word	0x03d09000
 8004cb8:	07a12000 	.word	0x07a12000
 8004cbc:	0f424000 	.word	0x0f424000
 8004cc0:	186a0000 	.word	0x186a0000
 8004cc4:	1e848000 	.word	0x1e848000
 8004cc8:	3d090000 	.word	0x3d090000
 8004ccc:	7a120000 	.word	0x7a120000
 8004cd0:	000aaa00 	.word	0x000aaa00
 8004cd4:	000ccc00 	.word	0x000ccc00
 8004cd8:	00155500 	.word	0x00155500
 8004cdc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004ce0:	f04f 0400 	mov.w	r4, #0
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	6852      	ldr	r2, [r2, #4]
 8004ce8:	0852      	lsrs	r2, r2, #1
 8004cea:	4611      	mov	r1, r2
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	eb13 0b01 	adds.w	fp, r3, r1
 8004cf4:	eb44 0c02 	adc.w	ip, r4, r2
 8004cf8:	4658      	mov	r0, fp
 8004cfa:	4661      	mov	r1, ip
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	685b      	ldr	r3, [r3, #4]
 8004d00:	f04f 0400 	mov.w	r4, #0
 8004d04:	461a      	mov	r2, r3
 8004d06:	4623      	mov	r3, r4
 8004d08:	f7fb fa86 	bl	8000218 <__aeabi_uldivmod>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	460c      	mov	r4, r1
 8004d10:	61fb      	str	r3, [r7, #28]
            break;
 8004d12:	e002      	b.n	8004d1a <UART_SetConfig+0xad2>
          default:
            ret = HAL_ERROR;
 8004d14:	2301      	movs	r3, #1
 8004d16:	76fb      	strb	r3, [r7, #27]
            break;
 8004d18:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004d20:	d309      	bcc.n	8004d36 <UART_SetConfig+0xaee>
 8004d22:	69fb      	ldr	r3, [r7, #28]
 8004d24:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d28:	d205      	bcs.n	8004d36 <UART_SetConfig+0xaee>
        {
          huart->Instance->BRR = usartdiv;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	60da      	str	r2, [r3, #12]
 8004d32:	f000 bc18 	b.w	8005566 <UART_SetConfig+0x131e>
        }
        else
        {
          ret = HAL_ERROR;
 8004d36:	2301      	movs	r3, #1
 8004d38:	76fb      	strb	r3, [r7, #27]
 8004d3a:	f000 bc14 	b.w	8005566 <UART_SetConfig+0x131e>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	69db      	ldr	r3, [r3, #28]
 8004d42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d46:	f040 8204 	bne.w	8005152 <UART_SetConfig+0xf0a>
  {
    switch (clocksource)
 8004d4a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d4e:	2b08      	cmp	r3, #8
 8004d50:	f200 81df 	bhi.w	8005112 <UART_SetConfig+0xeca>
 8004d54:	a201      	add	r2, pc, #4	; (adr r2, 8004d5c <UART_SetConfig+0xb14>)
 8004d56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d5a:	bf00      	nop
 8004d5c:	08004d81 	.word	0x08004d81
 8004d60:	08004e39 	.word	0x08004e39
 8004d64:	08004ef1 	.word	0x08004ef1
 8004d68:	08005113 	.word	0x08005113
 8004d6c:	08004f99 	.word	0x08004f99
 8004d70:	08005113 	.word	0x08005113
 8004d74:	08005113 	.word	0x08005113
 8004d78:	08005113 	.word	0x08005113
 8004d7c:	08005051 	.word	0x08005051
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d80:	f7fd fedc 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 8004d84:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d044      	beq.n	8004e18 <UART_SetConfig+0xbd0>
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d03e      	beq.n	8004e14 <UART_SetConfig+0xbcc>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	2b02      	cmp	r3, #2
 8004d9c:	d038      	beq.n	8004e10 <UART_SetConfig+0xbc8>
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004da2:	2b03      	cmp	r3, #3
 8004da4:	d032      	beq.n	8004e0c <UART_SetConfig+0xbc4>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004daa:	2b04      	cmp	r3, #4
 8004dac:	d02c      	beq.n	8004e08 <UART_SetConfig+0xbc0>
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004db2:	2b05      	cmp	r3, #5
 8004db4:	d026      	beq.n	8004e04 <UART_SetConfig+0xbbc>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	2b06      	cmp	r3, #6
 8004dbc:	d020      	beq.n	8004e00 <UART_SetConfig+0xbb8>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc2:	2b07      	cmp	r3, #7
 8004dc4:	d01a      	beq.n	8004dfc <UART_SetConfig+0xbb4>
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d014      	beq.n	8004df8 <UART_SetConfig+0xbb0>
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd2:	2b09      	cmp	r3, #9
 8004dd4:	d00e      	beq.n	8004df4 <UART_SetConfig+0xbac>
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dda:	2b0a      	cmp	r3, #10
 8004ddc:	d008      	beq.n	8004df0 <UART_SetConfig+0xba8>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2b0b      	cmp	r3, #11
 8004de4:	d102      	bne.n	8004dec <UART_SetConfig+0xba4>
 8004de6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004dea:	e016      	b.n	8004e1a <UART_SetConfig+0xbd2>
 8004dec:	2301      	movs	r3, #1
 8004dee:	e014      	b.n	8004e1a <UART_SetConfig+0xbd2>
 8004df0:	2380      	movs	r3, #128	; 0x80
 8004df2:	e012      	b.n	8004e1a <UART_SetConfig+0xbd2>
 8004df4:	2340      	movs	r3, #64	; 0x40
 8004df6:	e010      	b.n	8004e1a <UART_SetConfig+0xbd2>
 8004df8:	2320      	movs	r3, #32
 8004dfa:	e00e      	b.n	8004e1a <UART_SetConfig+0xbd2>
 8004dfc:	2310      	movs	r3, #16
 8004dfe:	e00c      	b.n	8004e1a <UART_SetConfig+0xbd2>
 8004e00:	230c      	movs	r3, #12
 8004e02:	e00a      	b.n	8004e1a <UART_SetConfig+0xbd2>
 8004e04:	230a      	movs	r3, #10
 8004e06:	e008      	b.n	8004e1a <UART_SetConfig+0xbd2>
 8004e08:	2308      	movs	r3, #8
 8004e0a:	e006      	b.n	8004e1a <UART_SetConfig+0xbd2>
 8004e0c:	2306      	movs	r3, #6
 8004e0e:	e004      	b.n	8004e1a <UART_SetConfig+0xbd2>
 8004e10:	2304      	movs	r3, #4
 8004e12:	e002      	b.n	8004e1a <UART_SetConfig+0xbd2>
 8004e14:	2302      	movs	r3, #2
 8004e16:	e000      	b.n	8004e1a <UART_SetConfig+0xbd2>
 8004e18:	2301      	movs	r3, #1
 8004e1a:	693a      	ldr	r2, [r7, #16]
 8004e1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e20:	005a      	lsls	r2, r3, #1
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	085b      	lsrs	r3, r3, #1
 8004e28:	441a      	add	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e32:	b29b      	uxth	r3, r3
 8004e34:	61fb      	str	r3, [r7, #28]
        break;
 8004e36:	e16f      	b.n	8005118 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e38:	f7fd fe96 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 8004e3c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d044      	beq.n	8004ed0 <UART_SetConfig+0xc88>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d03e      	beq.n	8004ecc <UART_SetConfig+0xc84>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	2b02      	cmp	r3, #2
 8004e54:	d038      	beq.n	8004ec8 <UART_SetConfig+0xc80>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	2b03      	cmp	r3, #3
 8004e5c:	d032      	beq.n	8004ec4 <UART_SetConfig+0xc7c>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e62:	2b04      	cmp	r3, #4
 8004e64:	d02c      	beq.n	8004ec0 <UART_SetConfig+0xc78>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6a:	2b05      	cmp	r3, #5
 8004e6c:	d026      	beq.n	8004ebc <UART_SetConfig+0xc74>
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e72:	2b06      	cmp	r3, #6
 8004e74:	d020      	beq.n	8004eb8 <UART_SetConfig+0xc70>
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7a:	2b07      	cmp	r3, #7
 8004e7c:	d01a      	beq.n	8004eb4 <UART_SetConfig+0xc6c>
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d014      	beq.n	8004eb0 <UART_SetConfig+0xc68>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e8a:	2b09      	cmp	r3, #9
 8004e8c:	d00e      	beq.n	8004eac <UART_SetConfig+0xc64>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e92:	2b0a      	cmp	r3, #10
 8004e94:	d008      	beq.n	8004ea8 <UART_SetConfig+0xc60>
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e9a:	2b0b      	cmp	r3, #11
 8004e9c:	d102      	bne.n	8004ea4 <UART_SetConfig+0xc5c>
 8004e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ea2:	e016      	b.n	8004ed2 <UART_SetConfig+0xc8a>
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e014      	b.n	8004ed2 <UART_SetConfig+0xc8a>
 8004ea8:	2380      	movs	r3, #128	; 0x80
 8004eaa:	e012      	b.n	8004ed2 <UART_SetConfig+0xc8a>
 8004eac:	2340      	movs	r3, #64	; 0x40
 8004eae:	e010      	b.n	8004ed2 <UART_SetConfig+0xc8a>
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	e00e      	b.n	8004ed2 <UART_SetConfig+0xc8a>
 8004eb4:	2310      	movs	r3, #16
 8004eb6:	e00c      	b.n	8004ed2 <UART_SetConfig+0xc8a>
 8004eb8:	230c      	movs	r3, #12
 8004eba:	e00a      	b.n	8004ed2 <UART_SetConfig+0xc8a>
 8004ebc:	230a      	movs	r3, #10
 8004ebe:	e008      	b.n	8004ed2 <UART_SetConfig+0xc8a>
 8004ec0:	2308      	movs	r3, #8
 8004ec2:	e006      	b.n	8004ed2 <UART_SetConfig+0xc8a>
 8004ec4:	2306      	movs	r3, #6
 8004ec6:	e004      	b.n	8004ed2 <UART_SetConfig+0xc8a>
 8004ec8:	2304      	movs	r3, #4
 8004eca:	e002      	b.n	8004ed2 <UART_SetConfig+0xc8a>
 8004ecc:	2302      	movs	r3, #2
 8004ece:	e000      	b.n	8004ed2 <UART_SetConfig+0xc8a>
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed8:	005a      	lsls	r2, r3, #1
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	085b      	lsrs	r3, r3, #1
 8004ee0:	441a      	add	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004eea:	b29b      	uxth	r3, r3
 8004eec:	61fb      	str	r3, [r7, #28]
        break;
 8004eee:	e113      	b.n	8005118 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d043      	beq.n	8004f80 <UART_SetConfig+0xd38>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d03d      	beq.n	8004f7c <UART_SetConfig+0xd34>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f04:	2b02      	cmp	r3, #2
 8004f06:	d037      	beq.n	8004f78 <UART_SetConfig+0xd30>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0c:	2b03      	cmp	r3, #3
 8004f0e:	d031      	beq.n	8004f74 <UART_SetConfig+0xd2c>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f14:	2b04      	cmp	r3, #4
 8004f16:	d02b      	beq.n	8004f70 <UART_SetConfig+0xd28>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f1c:	2b05      	cmp	r3, #5
 8004f1e:	d025      	beq.n	8004f6c <UART_SetConfig+0xd24>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f24:	2b06      	cmp	r3, #6
 8004f26:	d01f      	beq.n	8004f68 <UART_SetConfig+0xd20>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2c:	2b07      	cmp	r3, #7
 8004f2e:	d019      	beq.n	8004f64 <UART_SetConfig+0xd1c>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f34:	2b08      	cmp	r3, #8
 8004f36:	d013      	beq.n	8004f60 <UART_SetConfig+0xd18>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	2b09      	cmp	r3, #9
 8004f3e:	d00d      	beq.n	8004f5c <UART_SetConfig+0xd14>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f44:	2b0a      	cmp	r3, #10
 8004f46:	d007      	beq.n	8004f58 <UART_SetConfig+0xd10>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f4c:	2b0b      	cmp	r3, #11
 8004f4e:	d101      	bne.n	8004f54 <UART_SetConfig+0xd0c>
 8004f50:	4b8d      	ldr	r3, [pc, #564]	; (8005188 <UART_SetConfig+0xf40>)
 8004f52:	e016      	b.n	8004f82 <UART_SetConfig+0xd3a>
 8004f54:	4b8d      	ldr	r3, [pc, #564]	; (800518c <UART_SetConfig+0xf44>)
 8004f56:	e014      	b.n	8004f82 <UART_SetConfig+0xd3a>
 8004f58:	4b8d      	ldr	r3, [pc, #564]	; (8005190 <UART_SetConfig+0xf48>)
 8004f5a:	e012      	b.n	8004f82 <UART_SetConfig+0xd3a>
 8004f5c:	4b8d      	ldr	r3, [pc, #564]	; (8005194 <UART_SetConfig+0xf4c>)
 8004f5e:	e010      	b.n	8004f82 <UART_SetConfig+0xd3a>
 8004f60:	4b8d      	ldr	r3, [pc, #564]	; (8005198 <UART_SetConfig+0xf50>)
 8004f62:	e00e      	b.n	8004f82 <UART_SetConfig+0xd3a>
 8004f64:	4b8d      	ldr	r3, [pc, #564]	; (800519c <UART_SetConfig+0xf54>)
 8004f66:	e00c      	b.n	8004f82 <UART_SetConfig+0xd3a>
 8004f68:	4b8d      	ldr	r3, [pc, #564]	; (80051a0 <UART_SetConfig+0xf58>)
 8004f6a:	e00a      	b.n	8004f82 <UART_SetConfig+0xd3a>
 8004f6c:	4b8d      	ldr	r3, [pc, #564]	; (80051a4 <UART_SetConfig+0xf5c>)
 8004f6e:	e008      	b.n	8004f82 <UART_SetConfig+0xd3a>
 8004f70:	4b8d      	ldr	r3, [pc, #564]	; (80051a8 <UART_SetConfig+0xf60>)
 8004f72:	e006      	b.n	8004f82 <UART_SetConfig+0xd3a>
 8004f74:	4b8d      	ldr	r3, [pc, #564]	; (80051ac <UART_SetConfig+0xf64>)
 8004f76:	e004      	b.n	8004f82 <UART_SetConfig+0xd3a>
 8004f78:	4b8d      	ldr	r3, [pc, #564]	; (80051b0 <UART_SetConfig+0xf68>)
 8004f7a:	e002      	b.n	8004f82 <UART_SetConfig+0xd3a>
 8004f7c:	4b8d      	ldr	r3, [pc, #564]	; (80051b4 <UART_SetConfig+0xf6c>)
 8004f7e:	e000      	b.n	8004f82 <UART_SetConfig+0xd3a>
 8004f80:	4b82      	ldr	r3, [pc, #520]	; (800518c <UART_SetConfig+0xf44>)
 8004f82:	687a      	ldr	r2, [r7, #4]
 8004f84:	6852      	ldr	r2, [r2, #4]
 8004f86:	0852      	lsrs	r2, r2, #1
 8004f88:	441a      	add	r2, r3
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	61fb      	str	r3, [r7, #28]
        break;
 8004f96:	e0bf      	b.n	8005118 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f98:	f7fd fd62 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 8004f9c:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d044      	beq.n	8005030 <UART_SetConfig+0xde8>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004faa:	2b01      	cmp	r3, #1
 8004fac:	d03e      	beq.n	800502c <UART_SetConfig+0xde4>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d038      	beq.n	8005028 <UART_SetConfig+0xde0>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fba:	2b03      	cmp	r3, #3
 8004fbc:	d032      	beq.n	8005024 <UART_SetConfig+0xddc>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc2:	2b04      	cmp	r3, #4
 8004fc4:	d02c      	beq.n	8005020 <UART_SetConfig+0xdd8>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fca:	2b05      	cmp	r3, #5
 8004fcc:	d026      	beq.n	800501c <UART_SetConfig+0xdd4>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd2:	2b06      	cmp	r3, #6
 8004fd4:	d020      	beq.n	8005018 <UART_SetConfig+0xdd0>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fda:	2b07      	cmp	r3, #7
 8004fdc:	d01a      	beq.n	8005014 <UART_SetConfig+0xdcc>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fe2:	2b08      	cmp	r3, #8
 8004fe4:	d014      	beq.n	8005010 <UART_SetConfig+0xdc8>
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fea:	2b09      	cmp	r3, #9
 8004fec:	d00e      	beq.n	800500c <UART_SetConfig+0xdc4>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ff2:	2b0a      	cmp	r3, #10
 8004ff4:	d008      	beq.n	8005008 <UART_SetConfig+0xdc0>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ffa:	2b0b      	cmp	r3, #11
 8004ffc:	d102      	bne.n	8005004 <UART_SetConfig+0xdbc>
 8004ffe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005002:	e016      	b.n	8005032 <UART_SetConfig+0xdea>
 8005004:	2301      	movs	r3, #1
 8005006:	e014      	b.n	8005032 <UART_SetConfig+0xdea>
 8005008:	2380      	movs	r3, #128	; 0x80
 800500a:	e012      	b.n	8005032 <UART_SetConfig+0xdea>
 800500c:	2340      	movs	r3, #64	; 0x40
 800500e:	e010      	b.n	8005032 <UART_SetConfig+0xdea>
 8005010:	2320      	movs	r3, #32
 8005012:	e00e      	b.n	8005032 <UART_SetConfig+0xdea>
 8005014:	2310      	movs	r3, #16
 8005016:	e00c      	b.n	8005032 <UART_SetConfig+0xdea>
 8005018:	230c      	movs	r3, #12
 800501a:	e00a      	b.n	8005032 <UART_SetConfig+0xdea>
 800501c:	230a      	movs	r3, #10
 800501e:	e008      	b.n	8005032 <UART_SetConfig+0xdea>
 8005020:	2308      	movs	r3, #8
 8005022:	e006      	b.n	8005032 <UART_SetConfig+0xdea>
 8005024:	2306      	movs	r3, #6
 8005026:	e004      	b.n	8005032 <UART_SetConfig+0xdea>
 8005028:	2304      	movs	r3, #4
 800502a:	e002      	b.n	8005032 <UART_SetConfig+0xdea>
 800502c:	2302      	movs	r3, #2
 800502e:	e000      	b.n	8005032 <UART_SetConfig+0xdea>
 8005030:	2301      	movs	r3, #1
 8005032:	693a      	ldr	r2, [r7, #16]
 8005034:	fbb2 f3f3 	udiv	r3, r2, r3
 8005038:	005a      	lsls	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	085b      	lsrs	r3, r3, #1
 8005040:	441a      	add	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	fbb2 f3f3 	udiv	r3, r2, r3
 800504a:	b29b      	uxth	r3, r3
 800504c:	61fb      	str	r3, [r7, #28]
        break;
 800504e:	e063      	b.n	8005118 <UART_SetConfig+0xed0>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	2b00      	cmp	r3, #0
 8005056:	d04f      	beq.n	80050f8 <UART_SetConfig+0xeb0>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	2b01      	cmp	r3, #1
 800505e:	d048      	beq.n	80050f2 <UART_SetConfig+0xeaa>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005064:	2b02      	cmp	r3, #2
 8005066:	d041      	beq.n	80050ec <UART_SetConfig+0xea4>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800506c:	2b03      	cmp	r3, #3
 800506e:	d03a      	beq.n	80050e6 <UART_SetConfig+0xe9e>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	2b04      	cmp	r3, #4
 8005076:	d033      	beq.n	80050e0 <UART_SetConfig+0xe98>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800507c:	2b05      	cmp	r3, #5
 800507e:	d02c      	beq.n	80050da <UART_SetConfig+0xe92>
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005084:	2b06      	cmp	r3, #6
 8005086:	d025      	beq.n	80050d4 <UART_SetConfig+0xe8c>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800508c:	2b07      	cmp	r3, #7
 800508e:	d01e      	beq.n	80050ce <UART_SetConfig+0xe86>
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	2b08      	cmp	r3, #8
 8005096:	d017      	beq.n	80050c8 <UART_SetConfig+0xe80>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800509c:	2b09      	cmp	r3, #9
 800509e:	d010      	beq.n	80050c2 <UART_SetConfig+0xe7a>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050a4:	2b0a      	cmp	r3, #10
 80050a6:	d009      	beq.n	80050bc <UART_SetConfig+0xe74>
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050ac:	2b0b      	cmp	r3, #11
 80050ae:	d102      	bne.n	80050b6 <UART_SetConfig+0xe6e>
 80050b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80050b4:	e022      	b.n	80050fc <UART_SetConfig+0xeb4>
 80050b6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050ba:	e01f      	b.n	80050fc <UART_SetConfig+0xeb4>
 80050bc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80050c0:	e01c      	b.n	80050fc <UART_SetConfig+0xeb4>
 80050c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80050c6:	e019      	b.n	80050fc <UART_SetConfig+0xeb4>
 80050c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050cc:	e016      	b.n	80050fc <UART_SetConfig+0xeb4>
 80050ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80050d2:	e013      	b.n	80050fc <UART_SetConfig+0xeb4>
 80050d4:	f241 5354 	movw	r3, #5460	; 0x1554
 80050d8:	e010      	b.n	80050fc <UART_SetConfig+0xeb4>
 80050da:	f641 1398 	movw	r3, #6552	; 0x1998
 80050de:	e00d      	b.n	80050fc <UART_SetConfig+0xeb4>
 80050e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80050e4:	e00a      	b.n	80050fc <UART_SetConfig+0xeb4>
 80050e6:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 80050ea:	e007      	b.n	80050fc <UART_SetConfig+0xeb4>
 80050ec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050f0:	e004      	b.n	80050fc <UART_SetConfig+0xeb4>
 80050f2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80050f6:	e001      	b.n	80050fc <UART_SetConfig+0xeb4>
 80050f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80050fc:	687a      	ldr	r2, [r7, #4]
 80050fe:	6852      	ldr	r2, [r2, #4]
 8005100:	0852      	lsrs	r2, r2, #1
 8005102:	441a      	add	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	fbb2 f3f3 	udiv	r3, r2, r3
 800510c:	b29b      	uxth	r3, r3
 800510e:	61fb      	str	r3, [r7, #28]
        break;
 8005110:	e002      	b.n	8005118 <UART_SetConfig+0xed0>
      default:
        ret = HAL_ERROR;
 8005112:	2301      	movs	r3, #1
 8005114:	76fb      	strb	r3, [r7, #27]
        break;
 8005116:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005118:	69fb      	ldr	r3, [r7, #28]
 800511a:	2b0f      	cmp	r3, #15
 800511c:	d916      	bls.n	800514c <UART_SetConfig+0xf04>
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005124:	d212      	bcs.n	800514c <UART_SetConfig+0xf04>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	b29b      	uxth	r3, r3
 800512a:	f023 030f 	bic.w	r3, r3, #15
 800512e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005130:	69fb      	ldr	r3, [r7, #28]
 8005132:	085b      	lsrs	r3, r3, #1
 8005134:	b29b      	uxth	r3, r3
 8005136:	f003 0307 	and.w	r3, r3, #7
 800513a:	b29a      	uxth	r2, r3
 800513c:	89fb      	ldrh	r3, [r7, #14]
 800513e:	4313      	orrs	r3, r2
 8005140:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	89fa      	ldrh	r2, [r7, #14]
 8005148:	60da      	str	r2, [r3, #12]
 800514a:	e20c      	b.n	8005566 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 800514c:	2301      	movs	r3, #1
 800514e:	76fb      	strb	r3, [r7, #27]
 8005150:	e209      	b.n	8005566 <UART_SetConfig+0x131e>
    }
  }
  else
  {
    switch (clocksource)
 8005152:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8005156:	2b08      	cmp	r3, #8
 8005158:	f200 81f4 	bhi.w	8005544 <UART_SetConfig+0x12fc>
 800515c:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <UART_SetConfig+0xf1c>)
 800515e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005162:	bf00      	nop
 8005164:	080051b9 	.word	0x080051b9
 8005168:	0800526f 	.word	0x0800526f
 800516c:	08005325 	.word	0x08005325
 8005170:	08005545 	.word	0x08005545
 8005174:	080053cf 	.word	0x080053cf
 8005178:	08005545 	.word	0x08005545
 800517c:	08005545 	.word	0x08005545
 8005180:	08005545 	.word	0x08005545
 8005184:	08005485 	.word	0x08005485
 8005188:	0001e848 	.word	0x0001e848
 800518c:	01e84800 	.word	0x01e84800
 8005190:	0003d090 	.word	0x0003d090
 8005194:	0007a120 	.word	0x0007a120
 8005198:	000f4240 	.word	0x000f4240
 800519c:	001e8480 	.word	0x001e8480
 80051a0:	0028b0aa 	.word	0x0028b0aa
 80051a4:	0030d400 	.word	0x0030d400
 80051a8:	003d0900 	.word	0x003d0900
 80051ac:	00516154 	.word	0x00516154
 80051b0:	007a1200 	.word	0x007a1200
 80051b4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80051b8:	f7fd fcc0 	bl	8002b3c <HAL_RCC_GetPCLK1Freq>
 80051bc:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d044      	beq.n	8005250 <UART_SetConfig+0x1008>
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ca:	2b01      	cmp	r3, #1
 80051cc:	d03e      	beq.n	800524c <UART_SetConfig+0x1004>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	2b02      	cmp	r3, #2
 80051d4:	d038      	beq.n	8005248 <UART_SetConfig+0x1000>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	2b03      	cmp	r3, #3
 80051dc:	d032      	beq.n	8005244 <UART_SetConfig+0xffc>
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e2:	2b04      	cmp	r3, #4
 80051e4:	d02c      	beq.n	8005240 <UART_SetConfig+0xff8>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ea:	2b05      	cmp	r3, #5
 80051ec:	d026      	beq.n	800523c <UART_SetConfig+0xff4>
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051f2:	2b06      	cmp	r3, #6
 80051f4:	d020      	beq.n	8005238 <UART_SetConfig+0xff0>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fa:	2b07      	cmp	r3, #7
 80051fc:	d01a      	beq.n	8005234 <UART_SetConfig+0xfec>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005202:	2b08      	cmp	r3, #8
 8005204:	d014      	beq.n	8005230 <UART_SetConfig+0xfe8>
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800520a:	2b09      	cmp	r3, #9
 800520c:	d00e      	beq.n	800522c <UART_SetConfig+0xfe4>
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005212:	2b0a      	cmp	r3, #10
 8005214:	d008      	beq.n	8005228 <UART_SetConfig+0xfe0>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800521a:	2b0b      	cmp	r3, #11
 800521c:	d102      	bne.n	8005224 <UART_SetConfig+0xfdc>
 800521e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005222:	e016      	b.n	8005252 <UART_SetConfig+0x100a>
 8005224:	2301      	movs	r3, #1
 8005226:	e014      	b.n	8005252 <UART_SetConfig+0x100a>
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	e012      	b.n	8005252 <UART_SetConfig+0x100a>
 800522c:	2340      	movs	r3, #64	; 0x40
 800522e:	e010      	b.n	8005252 <UART_SetConfig+0x100a>
 8005230:	2320      	movs	r3, #32
 8005232:	e00e      	b.n	8005252 <UART_SetConfig+0x100a>
 8005234:	2310      	movs	r3, #16
 8005236:	e00c      	b.n	8005252 <UART_SetConfig+0x100a>
 8005238:	230c      	movs	r3, #12
 800523a:	e00a      	b.n	8005252 <UART_SetConfig+0x100a>
 800523c:	230a      	movs	r3, #10
 800523e:	e008      	b.n	8005252 <UART_SetConfig+0x100a>
 8005240:	2308      	movs	r3, #8
 8005242:	e006      	b.n	8005252 <UART_SetConfig+0x100a>
 8005244:	2306      	movs	r3, #6
 8005246:	e004      	b.n	8005252 <UART_SetConfig+0x100a>
 8005248:	2304      	movs	r3, #4
 800524a:	e002      	b.n	8005252 <UART_SetConfig+0x100a>
 800524c:	2302      	movs	r3, #2
 800524e:	e000      	b.n	8005252 <UART_SetConfig+0x100a>
 8005250:	2301      	movs	r3, #1
 8005252:	693a      	ldr	r2, [r7, #16]
 8005254:	fbb2 f2f3 	udiv	r2, r2, r3
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	685b      	ldr	r3, [r3, #4]
 800525c:	085b      	lsrs	r3, r3, #1
 800525e:	441a      	add	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	fbb2 f3f3 	udiv	r3, r2, r3
 8005268:	b29b      	uxth	r3, r3
 800526a:	61fb      	str	r3, [r7, #28]
        break;
 800526c:	e16d      	b.n	800554a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800526e:	f7fd fc7b 	bl	8002b68 <HAL_RCC_GetPCLK2Freq>
 8005272:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	2b00      	cmp	r3, #0
 800527a:	d044      	beq.n	8005306 <UART_SetConfig+0x10be>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	2b01      	cmp	r3, #1
 8005282:	d03e      	beq.n	8005302 <UART_SetConfig+0x10ba>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	2b02      	cmp	r3, #2
 800528a:	d038      	beq.n	80052fe <UART_SetConfig+0x10b6>
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005290:	2b03      	cmp	r3, #3
 8005292:	d032      	beq.n	80052fa <UART_SetConfig+0x10b2>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005298:	2b04      	cmp	r3, #4
 800529a:	d02c      	beq.n	80052f6 <UART_SetConfig+0x10ae>
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a0:	2b05      	cmp	r3, #5
 80052a2:	d026      	beq.n	80052f2 <UART_SetConfig+0x10aa>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052a8:	2b06      	cmp	r3, #6
 80052aa:	d020      	beq.n	80052ee <UART_SetConfig+0x10a6>
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b0:	2b07      	cmp	r3, #7
 80052b2:	d01a      	beq.n	80052ea <UART_SetConfig+0x10a2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d014      	beq.n	80052e6 <UART_SetConfig+0x109e>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c0:	2b09      	cmp	r3, #9
 80052c2:	d00e      	beq.n	80052e2 <UART_SetConfig+0x109a>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c8:	2b0a      	cmp	r3, #10
 80052ca:	d008      	beq.n	80052de <UART_SetConfig+0x1096>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d0:	2b0b      	cmp	r3, #11
 80052d2:	d102      	bne.n	80052da <UART_SetConfig+0x1092>
 80052d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80052d8:	e016      	b.n	8005308 <UART_SetConfig+0x10c0>
 80052da:	2301      	movs	r3, #1
 80052dc:	e014      	b.n	8005308 <UART_SetConfig+0x10c0>
 80052de:	2380      	movs	r3, #128	; 0x80
 80052e0:	e012      	b.n	8005308 <UART_SetConfig+0x10c0>
 80052e2:	2340      	movs	r3, #64	; 0x40
 80052e4:	e010      	b.n	8005308 <UART_SetConfig+0x10c0>
 80052e6:	2320      	movs	r3, #32
 80052e8:	e00e      	b.n	8005308 <UART_SetConfig+0x10c0>
 80052ea:	2310      	movs	r3, #16
 80052ec:	e00c      	b.n	8005308 <UART_SetConfig+0x10c0>
 80052ee:	230c      	movs	r3, #12
 80052f0:	e00a      	b.n	8005308 <UART_SetConfig+0x10c0>
 80052f2:	230a      	movs	r3, #10
 80052f4:	e008      	b.n	8005308 <UART_SetConfig+0x10c0>
 80052f6:	2308      	movs	r3, #8
 80052f8:	e006      	b.n	8005308 <UART_SetConfig+0x10c0>
 80052fa:	2306      	movs	r3, #6
 80052fc:	e004      	b.n	8005308 <UART_SetConfig+0x10c0>
 80052fe:	2304      	movs	r3, #4
 8005300:	e002      	b.n	8005308 <UART_SetConfig+0x10c0>
 8005302:	2302      	movs	r3, #2
 8005304:	e000      	b.n	8005308 <UART_SetConfig+0x10c0>
 8005306:	2301      	movs	r3, #1
 8005308:	693a      	ldr	r2, [r7, #16]
 800530a:	fbb2 f2f3 	udiv	r2, r2, r3
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	085b      	lsrs	r3, r3, #1
 8005314:	441a      	add	r2, r3
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	fbb2 f3f3 	udiv	r3, r2, r3
 800531e:	b29b      	uxth	r3, r3
 8005320:	61fb      	str	r3, [r7, #28]
        break;
 8005322:	e112      	b.n	800554a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	2b00      	cmp	r3, #0
 800532a:	d044      	beq.n	80053b6 <UART_SetConfig+0x116e>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005330:	2b01      	cmp	r3, #1
 8005332:	d03e      	beq.n	80053b2 <UART_SetConfig+0x116a>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	2b02      	cmp	r3, #2
 800533a:	d038      	beq.n	80053ae <UART_SetConfig+0x1166>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005340:	2b03      	cmp	r3, #3
 8005342:	d032      	beq.n	80053aa <UART_SetConfig+0x1162>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005348:	2b04      	cmp	r3, #4
 800534a:	d02c      	beq.n	80053a6 <UART_SetConfig+0x115e>
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005350:	2b05      	cmp	r3, #5
 8005352:	d026      	beq.n	80053a2 <UART_SetConfig+0x115a>
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005358:	2b06      	cmp	r3, #6
 800535a:	d020      	beq.n	800539e <UART_SetConfig+0x1156>
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005360:	2b07      	cmp	r3, #7
 8005362:	d01a      	beq.n	800539a <UART_SetConfig+0x1152>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005368:	2b08      	cmp	r3, #8
 800536a:	d014      	beq.n	8005396 <UART_SetConfig+0x114e>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005370:	2b09      	cmp	r3, #9
 8005372:	d00e      	beq.n	8005392 <UART_SetConfig+0x114a>
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	2b0a      	cmp	r3, #10
 800537a:	d008      	beq.n	800538e <UART_SetConfig+0x1146>
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005380:	2b0b      	cmp	r3, #11
 8005382:	d102      	bne.n	800538a <UART_SetConfig+0x1142>
 8005384:	f24f 4324 	movw	r3, #62500	; 0xf424
 8005388:	e016      	b.n	80053b8 <UART_SetConfig+0x1170>
 800538a:	4b81      	ldr	r3, [pc, #516]	; (8005590 <UART_SetConfig+0x1348>)
 800538c:	e014      	b.n	80053b8 <UART_SetConfig+0x1170>
 800538e:	4b81      	ldr	r3, [pc, #516]	; (8005594 <UART_SetConfig+0x134c>)
 8005390:	e012      	b.n	80053b8 <UART_SetConfig+0x1170>
 8005392:	4b81      	ldr	r3, [pc, #516]	; (8005598 <UART_SetConfig+0x1350>)
 8005394:	e010      	b.n	80053b8 <UART_SetConfig+0x1170>
 8005396:	4b81      	ldr	r3, [pc, #516]	; (800559c <UART_SetConfig+0x1354>)
 8005398:	e00e      	b.n	80053b8 <UART_SetConfig+0x1170>
 800539a:	4b81      	ldr	r3, [pc, #516]	; (80055a0 <UART_SetConfig+0x1358>)
 800539c:	e00c      	b.n	80053b8 <UART_SetConfig+0x1170>
 800539e:	4b81      	ldr	r3, [pc, #516]	; (80055a4 <UART_SetConfig+0x135c>)
 80053a0:	e00a      	b.n	80053b8 <UART_SetConfig+0x1170>
 80053a2:	4b81      	ldr	r3, [pc, #516]	; (80055a8 <UART_SetConfig+0x1360>)
 80053a4:	e008      	b.n	80053b8 <UART_SetConfig+0x1170>
 80053a6:	4b81      	ldr	r3, [pc, #516]	; (80055ac <UART_SetConfig+0x1364>)
 80053a8:	e006      	b.n	80053b8 <UART_SetConfig+0x1170>
 80053aa:	4b81      	ldr	r3, [pc, #516]	; (80055b0 <UART_SetConfig+0x1368>)
 80053ac:	e004      	b.n	80053b8 <UART_SetConfig+0x1170>
 80053ae:	4b81      	ldr	r3, [pc, #516]	; (80055b4 <UART_SetConfig+0x136c>)
 80053b0:	e002      	b.n	80053b8 <UART_SetConfig+0x1170>
 80053b2:	4b81      	ldr	r3, [pc, #516]	; (80055b8 <UART_SetConfig+0x1370>)
 80053b4:	e000      	b.n	80053b8 <UART_SetConfig+0x1170>
 80053b6:	4b76      	ldr	r3, [pc, #472]	; (8005590 <UART_SetConfig+0x1348>)
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6852      	ldr	r2, [r2, #4]
 80053bc:	0852      	lsrs	r2, r2, #1
 80053be:	441a      	add	r2, r3
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053c8:	b29b      	uxth	r3, r3
 80053ca:	61fb      	str	r3, [r7, #28]
        break;
 80053cc:	e0bd      	b.n	800554a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80053ce:	f7fd fb47 	bl	8002a60 <HAL_RCC_GetSysClockFreq>
 80053d2:	6138      	str	r0, [r7, #16]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d044      	beq.n	8005466 <UART_SetConfig+0x121e>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d03e      	beq.n	8005462 <UART_SetConfig+0x121a>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d038      	beq.n	800545e <UART_SetConfig+0x1216>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f0:	2b03      	cmp	r3, #3
 80053f2:	d032      	beq.n	800545a <UART_SetConfig+0x1212>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f8:	2b04      	cmp	r3, #4
 80053fa:	d02c      	beq.n	8005456 <UART_SetConfig+0x120e>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005400:	2b05      	cmp	r3, #5
 8005402:	d026      	beq.n	8005452 <UART_SetConfig+0x120a>
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005408:	2b06      	cmp	r3, #6
 800540a:	d020      	beq.n	800544e <UART_SetConfig+0x1206>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005410:	2b07      	cmp	r3, #7
 8005412:	d01a      	beq.n	800544a <UART_SetConfig+0x1202>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005418:	2b08      	cmp	r3, #8
 800541a:	d014      	beq.n	8005446 <UART_SetConfig+0x11fe>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005420:	2b09      	cmp	r3, #9
 8005422:	d00e      	beq.n	8005442 <UART_SetConfig+0x11fa>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005428:	2b0a      	cmp	r3, #10
 800542a:	d008      	beq.n	800543e <UART_SetConfig+0x11f6>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005430:	2b0b      	cmp	r3, #11
 8005432:	d102      	bne.n	800543a <UART_SetConfig+0x11f2>
 8005434:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005438:	e016      	b.n	8005468 <UART_SetConfig+0x1220>
 800543a:	2301      	movs	r3, #1
 800543c:	e014      	b.n	8005468 <UART_SetConfig+0x1220>
 800543e:	2380      	movs	r3, #128	; 0x80
 8005440:	e012      	b.n	8005468 <UART_SetConfig+0x1220>
 8005442:	2340      	movs	r3, #64	; 0x40
 8005444:	e010      	b.n	8005468 <UART_SetConfig+0x1220>
 8005446:	2320      	movs	r3, #32
 8005448:	e00e      	b.n	8005468 <UART_SetConfig+0x1220>
 800544a:	2310      	movs	r3, #16
 800544c:	e00c      	b.n	8005468 <UART_SetConfig+0x1220>
 800544e:	230c      	movs	r3, #12
 8005450:	e00a      	b.n	8005468 <UART_SetConfig+0x1220>
 8005452:	230a      	movs	r3, #10
 8005454:	e008      	b.n	8005468 <UART_SetConfig+0x1220>
 8005456:	2308      	movs	r3, #8
 8005458:	e006      	b.n	8005468 <UART_SetConfig+0x1220>
 800545a:	2306      	movs	r3, #6
 800545c:	e004      	b.n	8005468 <UART_SetConfig+0x1220>
 800545e:	2304      	movs	r3, #4
 8005460:	e002      	b.n	8005468 <UART_SetConfig+0x1220>
 8005462:	2302      	movs	r3, #2
 8005464:	e000      	b.n	8005468 <UART_SetConfig+0x1220>
 8005466:	2301      	movs	r3, #1
 8005468:	693a      	ldr	r2, [r7, #16]
 800546a:	fbb2 f2f3 	udiv	r2, r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	085b      	lsrs	r3, r3, #1
 8005474:	441a      	add	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	fbb2 f3f3 	udiv	r3, r2, r3
 800547e:	b29b      	uxth	r3, r3
 8005480:	61fb      	str	r3, [r7, #28]
        break;
 8005482:	e062      	b.n	800554a <UART_SetConfig+0x1302>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005488:	2b00      	cmp	r3, #0
 800548a:	d04e      	beq.n	800552a <UART_SetConfig+0x12e2>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	2b01      	cmp	r3, #1
 8005492:	d047      	beq.n	8005524 <UART_SetConfig+0x12dc>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	2b02      	cmp	r3, #2
 800549a:	d040      	beq.n	800551e <UART_SetConfig+0x12d6>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	2b03      	cmp	r3, #3
 80054a2:	d039      	beq.n	8005518 <UART_SetConfig+0x12d0>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a8:	2b04      	cmp	r3, #4
 80054aa:	d032      	beq.n	8005512 <UART_SetConfig+0x12ca>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b0:	2b05      	cmp	r3, #5
 80054b2:	d02b      	beq.n	800550c <UART_SetConfig+0x12c4>
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054b8:	2b06      	cmp	r3, #6
 80054ba:	d024      	beq.n	8005506 <UART_SetConfig+0x12be>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c0:	2b07      	cmp	r3, #7
 80054c2:	d01d      	beq.n	8005500 <UART_SetConfig+0x12b8>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054c8:	2b08      	cmp	r3, #8
 80054ca:	d016      	beq.n	80054fa <UART_SetConfig+0x12b2>
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d0:	2b09      	cmp	r3, #9
 80054d2:	d00f      	beq.n	80054f4 <UART_SetConfig+0x12ac>
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054d8:	2b0a      	cmp	r3, #10
 80054da:	d008      	beq.n	80054ee <UART_SetConfig+0x12a6>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054e0:	2b0b      	cmp	r3, #11
 80054e2:	d101      	bne.n	80054e8 <UART_SetConfig+0x12a0>
 80054e4:	2380      	movs	r3, #128	; 0x80
 80054e6:	e022      	b.n	800552e <UART_SetConfig+0x12e6>
 80054e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80054ec:	e01f      	b.n	800552e <UART_SetConfig+0x12e6>
 80054ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80054f2:	e01c      	b.n	800552e <UART_SetConfig+0x12e6>
 80054f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80054f8:	e019      	b.n	800552e <UART_SetConfig+0x12e6>
 80054fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80054fe:	e016      	b.n	800552e <UART_SetConfig+0x12e6>
 8005500:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005504:	e013      	b.n	800552e <UART_SetConfig+0x12e6>
 8005506:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800550a:	e010      	b.n	800552e <UART_SetConfig+0x12e6>
 800550c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005510:	e00d      	b.n	800552e <UART_SetConfig+0x12e6>
 8005512:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005516:	e00a      	b.n	800552e <UART_SetConfig+0x12e6>
 8005518:	f241 5355 	movw	r3, #5461	; 0x1555
 800551c:	e007      	b.n	800552e <UART_SetConfig+0x12e6>
 800551e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005522:	e004      	b.n	800552e <UART_SetConfig+0x12e6>
 8005524:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005528:	e001      	b.n	800552e <UART_SetConfig+0x12e6>
 800552a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	6852      	ldr	r2, [r2, #4]
 8005532:	0852      	lsrs	r2, r2, #1
 8005534:	441a      	add	r2, r3
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	fbb2 f3f3 	udiv	r3, r2, r3
 800553e:	b29b      	uxth	r3, r3
 8005540:	61fb      	str	r3, [r7, #28]
        break;
 8005542:	e002      	b.n	800554a <UART_SetConfig+0x1302>
      default:
        ret = HAL_ERROR;
 8005544:	2301      	movs	r3, #1
 8005546:	76fb      	strb	r3, [r7, #27]
        break;
 8005548:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	2b0f      	cmp	r3, #15
 800554e:	d908      	bls.n	8005562 <UART_SetConfig+0x131a>
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005556:	d204      	bcs.n	8005562 <UART_SetConfig+0x131a>
    {
      huart->Instance->BRR = usartdiv;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	69fa      	ldr	r2, [r7, #28]
 800555e:	60da      	str	r2, [r3, #12]
 8005560:	e001      	b.n	8005566 <UART_SetConfig+0x131e>
    }
    else
    {
      ret = HAL_ERROR;
 8005562:	2301      	movs	r3, #1
 8005564:	76fb      	strb	r3, [r7, #27]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	2201      	movs	r2, #1
 800556a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	2201      	movs	r2, #1
 8005572:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8005582:	7efb      	ldrb	r3, [r7, #27]
}
 8005584:	4618      	mov	r0, r3
 8005586:	3728      	adds	r7, #40	; 0x28
 8005588:	46bd      	mov	sp, r7
 800558a:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800558e:	bf00      	nop
 8005590:	00f42400 	.word	0x00f42400
 8005594:	0001e848 	.word	0x0001e848
 8005598:	0003d090 	.word	0x0003d090
 800559c:	0007a120 	.word	0x0007a120
 80055a0:	000f4240 	.word	0x000f4240
 80055a4:	00145855 	.word	0x00145855
 80055a8:	00186a00 	.word	0x00186a00
 80055ac:	001e8480 	.word	0x001e8480
 80055b0:	0028b0aa 	.word	0x0028b0aa
 80055b4:	003d0900 	.word	0x003d0900
 80055b8:	007a1200 	.word	0x007a1200

080055bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055c8:	f003 0301 	and.w	r3, r3, #1
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d00a      	beq.n	80055e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	430a      	orrs	r2, r1
 80055e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d00a      	beq.n	8005608 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	685b      	ldr	r3, [r3, #4]
 80055f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	430a      	orrs	r2, r1
 8005606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800560c:	f003 0304 	and.w	r3, r3, #4
 8005610:	2b00      	cmp	r3, #0
 8005612:	d00a      	beq.n	800562a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	430a      	orrs	r2, r1
 8005628:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800562e:	f003 0308 	and.w	r3, r3, #8
 8005632:	2b00      	cmp	r3, #0
 8005634:	d00a      	beq.n	800564c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	430a      	orrs	r2, r1
 800564a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005650:	f003 0310 	and.w	r3, r3, #16
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00a      	beq.n	800566e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	430a      	orrs	r2, r1
 800566c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005672:	f003 0320 	and.w	r3, r3, #32
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00a      	beq.n	8005690 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	430a      	orrs	r2, r1
 800568e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01a      	beq.n	80056d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	685b      	ldr	r3, [r3, #4]
 80056a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	430a      	orrs	r2, r1
 80056b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80056ba:	d10a      	bne.n	80056d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	685b      	ldr	r3, [r3, #4]
 80056c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	430a      	orrs	r2, r1
 80056d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00a      	beq.n	80056f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	430a      	orrs	r2, r1
 80056f2:	605a      	str	r2, [r3, #4]
  }
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b086      	sub	sp, #24
 8005704:	af02      	add	r7, sp, #8
 8005706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2200      	movs	r2, #0
 800570c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005710:	f7fc f992 	bl	8001a38 <HAL_GetTick>
 8005714:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0308 	and.w	r3, r3, #8
 8005720:	2b08      	cmp	r3, #8
 8005722:	d10e      	bne.n	8005742 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005724:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005728:	9300      	str	r3, [sp, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	2200      	movs	r2, #0
 800572e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f82c 	bl	8005790 <UART_WaitOnFlagUntilTimeout>
 8005738:	4603      	mov	r3, r0
 800573a:	2b00      	cmp	r3, #0
 800573c:	d001      	beq.n	8005742 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e022      	b.n	8005788 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f003 0304 	and.w	r3, r3, #4
 800574c:	2b04      	cmp	r3, #4
 800574e:	d10e      	bne.n	800576e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005750:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005754:	9300      	str	r3, [sp, #0]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2200      	movs	r2, #0
 800575a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 f816 	bl	8005790 <UART_WaitOnFlagUntilTimeout>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	d001      	beq.n	800576e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e00c      	b.n	8005788 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2220      	movs	r2, #32
 8005772:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2220      	movs	r2, #32
 800577a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	603b      	str	r3, [r7, #0]
 800579c:	4613      	mov	r3, r2
 800579e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057a0:	e02c      	b.n	80057fc <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057a2:	69bb      	ldr	r3, [r7, #24]
 80057a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057a8:	d028      	beq.n	80057fc <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057aa:	f7fc f945 	bl	8001a38 <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	69ba      	ldr	r2, [r7, #24]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d302      	bcc.n	80057c0 <UART_WaitOnFlagUntilTimeout+0x30>
 80057ba:	69bb      	ldr	r3, [r7, #24]
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d11d      	bne.n	80057fc <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681a      	ldr	r2, [r3, #0]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80057ce:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	689a      	ldr	r2, [r3, #8]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f022 0201 	bic.w	r2, r2, #1
 80057de:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2220      	movs	r2, #32
 80057e4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2220      	movs	r2, #32
 80057ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80057f8:	2303      	movs	r3, #3
 80057fa:	e00f      	b.n	800581c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	69da      	ldr	r2, [r3, #28]
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	4013      	ands	r3, r2
 8005806:	68ba      	ldr	r2, [r7, #8]
 8005808:	429a      	cmp	r2, r3
 800580a:	bf0c      	ite	eq
 800580c:	2301      	moveq	r3, #1
 800580e:	2300      	movne	r3, #0
 8005810:	b2db      	uxtb	r3, r3
 8005812:	461a      	mov	r2, r3
 8005814:	79fb      	ldrb	r3, [r7, #7]
 8005816:	429a      	cmp	r2, r3
 8005818:	d0c3      	beq.n	80057a2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800581a:	2300      	movs	r3, #0
}
 800581c:	4618      	mov	r0, r3
 800581e:	3710      	adds	r7, #16
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}

08005824 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005824:	b480      	push	{r7}
 8005826:	b083      	sub	sp, #12
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681a      	ldr	r2, [r3, #0]
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800583a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	689b      	ldr	r3, [r3, #8]
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6812      	ldr	r2, [r2, #0]
 8005846:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800584a:	f023 0301 	bic.w	r3, r3, #1
 800584e:	6093      	str	r3, [r2, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2220      	movs	r2, #32
 8005854:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2200      	movs	r2, #0
 800585c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800585e:	bf00      	nop
 8005860:	370c      	adds	r7, #12
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005876:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005888:	68f8      	ldr	r0, [r7, #12]
 800588a:	f7fe fcd3 	bl	8004234 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800588e:	bf00      	nop
 8005890:	3710      	adds	r7, #16
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005896:	b580      	push	{r7, lr}
 8005898:	b082      	sub	sp, #8
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80058ac:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80058bc:	6878      	ldr	r0, [r7, #4]
 80058be:	f7fe fcaf 	bl	8004220 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80058c2:	bf00      	nop
 80058c4:	3708      	adds	r7, #8
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}

080058ca <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80058ca:	b580      	push	{r7, lr}
 80058cc:	b084      	sub	sp, #16
 80058ce:	af00      	add	r7, sp, #0
 80058d0:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80058d8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80058e0:	2b22      	cmp	r3, #34	; 0x22
 80058e2:	d13b      	bne.n	800595c <UART_RxISR_8BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80058ec:	89bb      	ldrh	r3, [r7, #12]
 80058ee:	b2d9      	uxtb	r1, r3
 80058f0:	89fb      	ldrh	r3, [r7, #14]
 80058f2:	b2da      	uxtb	r2, r3
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058f8:	400a      	ands	r2, r1
 80058fa:	b2d2      	uxtb	r2, r2
 80058fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005902:	1c5a      	adds	r2, r3, #1
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800590e:	b29b      	uxth	r3, r3
 8005910:	3b01      	subs	r3, #1
 8005912:	b29a      	uxth	r2, r3
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005920:	b29b      	uxth	r3, r3
 8005922:	2b00      	cmp	r3, #0
 8005924:	d122      	bne.n	800596c <UART_RxISR_8BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	681a      	ldr	r2, [r3, #0]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005934:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	689a      	ldr	r2, [r3, #8]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f022 0201 	bic.w	r2, r2, #1
 8005944:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	2220      	movs	r2, #32
 800594a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2200      	movs	r2, #0
 8005952:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8005954:	6878      	ldr	r0, [r7, #4]
 8005956:	f7fb f965 	bl	8000c24 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800595a:	e007      	b.n	800596c <UART_RxISR_8BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	699a      	ldr	r2, [r3, #24]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	f042 0208 	orr.w	r2, r2, #8
 800596a:	619a      	str	r2, [r3, #24]
}
 800596c:	bf00      	nop
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b084      	sub	sp, #16
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005982:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800598a:	2b22      	cmp	r3, #34	; 0x22
 800598c:	d13b      	bne.n	8005a06 <UART_RxISR_16BIT+0x92>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005994:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800599a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800599c:	89ba      	ldrh	r2, [r7, #12]
 800599e:	89fb      	ldrh	r3, [r7, #14]
 80059a0:	4013      	ands	r3, r2
 80059a2:	b29a      	uxth	r2, r3
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ac:	1c9a      	adds	r2, r3, #2
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059b8:	b29b      	uxth	r3, r3
 80059ba:	3b01      	subs	r3, #1
 80059bc:	b29a      	uxth	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80059ca:	b29b      	uxth	r3, r3
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d122      	bne.n	8005a16 <UART_RxISR_16BIT+0xa2>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80059de:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	689a      	ldr	r2, [r3, #8]
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f022 0201 	bic.w	r2, r2, #1
 80059ee:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2220      	movs	r2, #32
 80059f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2200      	movs	r2, #0
 80059fc:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f7fb f910 	bl	8000c24 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005a04:	e007      	b.n	8005a16 <UART_RxISR_16BIT+0xa2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	699a      	ldr	r2, [r3, #24]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f042 0208 	orr.w	r2, r2, #8
 8005a14:	619a      	str	r2, [r3, #24]
}
 8005a16:	bf00      	nop
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
	...

08005a20 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005a2e:	81bb      	strh	r3, [r7, #12]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a36:	2b22      	cmp	r3, #34	; 0x22
 8005a38:	d168      	bne.n	8005b0c <UART_RxISR_8BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005a40:	81fb      	strh	r3, [r7, #14]
 8005a42:	e03f      	b.n	8005ac4 <UART_RxISR_8BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a4a:	813b      	strh	r3, [r7, #8]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005a4c:	893b      	ldrh	r3, [r7, #8]
 8005a4e:	b2d9      	uxtb	r1, r3
 8005a50:	89bb      	ldrh	r3, [r7, #12]
 8005a52:	b2da      	uxtb	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a58:	400a      	ands	r2, r1
 8005a5a:	b2d2      	uxtb	r2, r2
 8005a5c:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	3b01      	subs	r3, #1
 8005a72:	b29a      	uxth	r2, r3
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d11b      	bne.n	8005abe <UART_RxISR_8BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005a94:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	689b      	ldr	r3, [r3, #8]
 8005a9c:	687a      	ldr	r2, [r7, #4]
 8005a9e:	6812      	ldr	r2, [r2, #0]
 8005aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005aa4:	f023 0301 	bic.w	r3, r3, #1
 8005aa8:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2220      	movs	r2, #32
 8005aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005ab8:	6878      	ldr	r0, [r7, #4]
 8005aba:	f7fb f8b3 	bl	8000c24 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005abe:	89fb      	ldrh	r3, [r7, #14]
 8005ac0:	3b01      	subs	r3, #1
 8005ac2:	81fb      	strh	r3, [r7, #14]
 8005ac4:	89fb      	ldrh	r3, [r7, #14]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d1bc      	bne.n	8005a44 <UART_RxISR_8BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005ad0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005ad2:	897b      	ldrh	r3, [r7, #10]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d021      	beq.n	8005b1c <UART_RxISR_8BIT_FIFOEN+0xfc>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005ade:	897a      	ldrh	r2, [r7, #10]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d21b      	bcs.n	8005b1c <UART_RxISR_8BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	689a      	ldr	r2, [r3, #8]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005af2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	4a0b      	ldr	r2, [pc, #44]	; (8005b24 <UART_RxISR_8BIT_FIFOEN+0x104>)
 8005af8:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	681a      	ldr	r2, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f042 0220 	orr.w	r2, r2, #32
 8005b08:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005b0a:	e007      	b.n	8005b1c <UART_RxISR_8BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	699a      	ldr	r2, [r3, #24]
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f042 0208 	orr.w	r2, r2, #8
 8005b1a:	619a      	str	r2, [r3, #24]
}
 8005b1c:	bf00      	nop
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}
 8005b24:	080058cb 	.word	0x080058cb

08005b28 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b086      	sub	sp, #24
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005b36:	82bb      	strh	r3, [r7, #20]
  uint16_t  uhdata;
  uint16_t   nb_rx_data;
  uint16_t  rxdatacount;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005b3e:	2b22      	cmp	r3, #34	; 0x22
 8005b40:	d168      	bne.n	8005c14 <UART_RxISR_16BIT_FIFOEN+0xec>
  {
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005b48:	82fb      	strh	r3, [r7, #22]
 8005b4a:	e03f      	b.n	8005bcc <UART_RxISR_16BIT_FIFOEN+0xa4>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	823b      	strh	r3, [r7, #16]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b58:	60fb      	str	r3, [r7, #12]
      *tmp = (uint16_t)(uhdata & uhMask);
 8005b5a:	8a3a      	ldrh	r2, [r7, #16]
 8005b5c:	8abb      	ldrh	r3, [r7, #20]
 8005b5e:	4013      	ands	r3, r2
 8005b60:	b29a      	uxth	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b6a:	1c9a      	adds	r2, r3, #2
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b76:	b29b      	uxth	r3, r3
 8005b78:	3b01      	subs	r3, #1
 8005b7a:	b29a      	uxth	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

      if (huart->RxXferCount == 0U)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005b88:	b29b      	uxth	r3, r3
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d11b      	bne.n	8005bc6 <UART_RxISR_16BIT_FIFOEN+0x9e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b9c:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	689b      	ldr	r3, [r3, #8]
 8005ba4:	687a      	ldr	r2, [r7, #4]
 8005ba6:	6812      	ldr	r2, [r2, #0]
 8005ba8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005bac:	f023 0301 	bic.w	r3, r3, #1
 8005bb0:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2220      	movs	r2, #32
 8005bb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f7fb f82f 	bl	8000c24 <HAL_UART_RxCpltCallback>
    for (nb_rx_data = huart->NbRxDataToProcess ; nb_rx_data > 0U ; nb_rx_data--)
 8005bc6:	8afb      	ldrh	r3, [r7, #22]
 8005bc8:	3b01      	subs	r3, #1
 8005bca:	82fb      	strh	r3, [r7, #22]
 8005bcc:	8afb      	ldrh	r3, [r7, #22]
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1bc      	bne.n	8005b4c <UART_RxISR_16BIT_FIFOEN+0x24>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bd8:	827b      	strh	r3, [r7, #18]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005bda:	8a7b      	ldrh	r3, [r7, #18]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d021      	beq.n	8005c24 <UART_RxISR_16BIT_FIFOEN+0xfc>
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005be6:	8a7a      	ldrh	r2, [r7, #18]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d21b      	bcs.n	8005c24 <UART_RxISR_16BIT_FIFOEN+0xfc>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689a      	ldr	r2, [r3, #8]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005bfa:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	4a0b      	ldr	r2, [pc, #44]	; (8005c2c <UART_RxISR_16BIT_FIFOEN+0x104>)
 8005c00:	66da      	str	r2, [r3, #108]	; 0x6c

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	681a      	ldr	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f042 0220 	orr.w	r2, r2, #32
 8005c10:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005c12:	e007      	b.n	8005c24 <UART_RxISR_16BIT_FIFOEN+0xfc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	f042 0208 	orr.w	r2, r2, #8
 8005c22:	619a      	str	r2, [r3, #24]
}
 8005c24:	bf00      	nop
 8005c26:	3718      	adds	r7, #24
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	08005975 	.word	0x08005975

08005c30 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8005c60:	bf00      	nop
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b085      	sub	sp, #20
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005c7a:	2b01      	cmp	r3, #1
 8005c7c:	d101      	bne.n	8005c82 <HAL_UARTEx_DisableFifoMode+0x16>
 8005c7e:	2302      	movs	r3, #2
 8005c80:	e027      	b.n	8005cd2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2201      	movs	r2, #1
 8005c86:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2224      	movs	r2, #36	; 0x24
 8005c8e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f022 0201 	bic.w	r2, r2, #1
 8005ca8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005cb0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	68fa      	ldr	r2, [r7, #12]
 8005cbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2200      	movs	r2, #0
 8005ccc:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005cd0:	2300      	movs	r3, #0
}
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	3714      	adds	r7, #20
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cdc:	4770      	bx	lr

08005cde <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005cde:	b580      	push	{r7, lr}
 8005ce0:	b084      	sub	sp, #16
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005cee:	2b01      	cmp	r3, #1
 8005cf0:	d101      	bne.n	8005cf6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	e02d      	b.n	8005d52 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	2201      	movs	r2, #1
 8005cfa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	2224      	movs	r2, #36	; 0x24
 8005d02:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	681a      	ldr	r2, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f022 0201 	bic.w	r2, r2, #1
 8005d1c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	683a      	ldr	r2, [r7, #0]
 8005d2e:	430a      	orrs	r2, r1
 8005d30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005d32:	6878      	ldr	r0, [r7, #4]
 8005d34:	f000 f850 	bl	8005dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	2220      	movs	r2, #32
 8005d44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b084      	sub	sp, #16
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
 8005d62:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d101      	bne.n	8005d72 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005d6e:	2302      	movs	r3, #2
 8005d70:	e02d      	b.n	8005dce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2224      	movs	r2, #36	; 0x24
 8005d7e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	681a      	ldr	r2, [r3, #0]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0201 	bic.w	r2, r2, #1
 8005d98:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	683a      	ldr	r2, [r7, #0]
 8005daa:	430a      	orrs	r2, r1
 8005dac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f000 f812 	bl	8005dd8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	68fa      	ldr	r2, [r7, #12]
 8005dba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005dcc:	2300      	movs	r3, #0
}
 8005dce:	4618      	mov	r0, r3
 8005dd0:	3710      	adds	r7, #16
 8005dd2:	46bd      	mov	sp, r7
 8005dd4:	bd80      	pop	{r7, pc}
	...

08005dd8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005dd8:	b480      	push	{r7}
 8005dda:	b089      	sub	sp, #36	; 0x24
 8005ddc:	af00      	add	r7, sp, #0
 8005dde:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005de0:	4a2f      	ldr	r2, [pc, #188]	; (8005ea0 <UARTEx_SetNbDataToProcess+0xc8>)
 8005de2:	f107 0314 	add.w	r3, r7, #20
 8005de6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005dea:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005dee:	4a2d      	ldr	r2, [pc, #180]	; (8005ea4 <UARTEx_SetNbDataToProcess+0xcc>)
 8005df0:	f107 030c 	add.w	r3, r7, #12
 8005df4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005df8:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d108      	bne.n	8005e16 <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2201      	movs	r2, #1
 8005e08:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005e14:	e03d      	b.n	8005e92 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005e16:	2308      	movs	r3, #8
 8005e18:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005e1a:	2308      	movs	r3, #8
 8005e1c:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	0e5b      	lsrs	r3, r3, #25
 8005e26:	b2db      	uxtb	r3, r3
 8005e28:	f003 0307 	and.w	r3, r3, #7
 8005e2c:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	689b      	ldr	r3, [r3, #8]
 8005e34:	0f5b      	lsrs	r3, r3, #29
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	f003 0307 	and.w	r3, r3, #7
 8005e3c:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8005e3e:	7fbb      	ldrb	r3, [r7, #30]
 8005e40:	7f3a      	ldrb	r2, [r7, #28]
 8005e42:	f107 0120 	add.w	r1, r7, #32
 8005e46:	440a      	add	r2, r1
 8005e48:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005e4c:	fb02 f303 	mul.w	r3, r2, r3
 8005e50:	7f3a      	ldrb	r2, [r7, #28]
 8005e52:	f107 0120 	add.w	r1, r7, #32
 8005e56:	440a      	add	r2, r1
 8005e58:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005e5c:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8005e68:	7ffb      	ldrb	r3, [r7, #31]
 8005e6a:	7f7a      	ldrb	r2, [r7, #29]
 8005e6c:	f107 0120 	add.w	r1, r7, #32
 8005e70:	440a      	add	r2, r1
 8005e72:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 8005e76:	fb02 f303 	mul.w	r3, r2, r3
 8005e7a:	7f7a      	ldrb	r2, [r7, #29]
 8005e7c:	f107 0120 	add.w	r1, r7, #32
 8005e80:	440a      	add	r2, r1
 8005e82:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 8005e86:	fb93 f3f2 	sdiv	r3, r3, r2
 8005e8a:	b29a      	uxth	r2, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005e92:	bf00      	nop
 8005e94:	3724      	adds	r7, #36	; 0x24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	08005f18 	.word	0x08005f18
 8005ea4:	08005f20 	.word	0x08005f20

08005ea8 <__libc_init_array>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	4e0d      	ldr	r6, [pc, #52]	; (8005ee0 <__libc_init_array+0x38>)
 8005eac:	4c0d      	ldr	r4, [pc, #52]	; (8005ee4 <__libc_init_array+0x3c>)
 8005eae:	1ba4      	subs	r4, r4, r6
 8005eb0:	10a4      	asrs	r4, r4, #2
 8005eb2:	2500      	movs	r5, #0
 8005eb4:	42a5      	cmp	r5, r4
 8005eb6:	d109      	bne.n	8005ecc <__libc_init_array+0x24>
 8005eb8:	4e0b      	ldr	r6, [pc, #44]	; (8005ee8 <__libc_init_array+0x40>)
 8005eba:	4c0c      	ldr	r4, [pc, #48]	; (8005eec <__libc_init_array+0x44>)
 8005ebc:	f000 f820 	bl	8005f00 <_init>
 8005ec0:	1ba4      	subs	r4, r4, r6
 8005ec2:	10a4      	asrs	r4, r4, #2
 8005ec4:	2500      	movs	r5, #0
 8005ec6:	42a5      	cmp	r5, r4
 8005ec8:	d105      	bne.n	8005ed6 <__libc_init_array+0x2e>
 8005eca:	bd70      	pop	{r4, r5, r6, pc}
 8005ecc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005ed0:	4798      	blx	r3
 8005ed2:	3501      	adds	r5, #1
 8005ed4:	e7ee      	b.n	8005eb4 <__libc_init_array+0xc>
 8005ed6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005eda:	4798      	blx	r3
 8005edc:	3501      	adds	r5, #1
 8005ede:	e7f2      	b.n	8005ec6 <__libc_init_array+0x1e>
 8005ee0:	08005f48 	.word	0x08005f48
 8005ee4:	08005f48 	.word	0x08005f48
 8005ee8:	08005f48 	.word	0x08005f48
 8005eec:	08005f4c 	.word	0x08005f4c

08005ef0 <memset>:
 8005ef0:	4402      	add	r2, r0
 8005ef2:	4603      	mov	r3, r0
 8005ef4:	4293      	cmp	r3, r2
 8005ef6:	d100      	bne.n	8005efa <memset+0xa>
 8005ef8:	4770      	bx	lr
 8005efa:	f803 1b01 	strb.w	r1, [r3], #1
 8005efe:	e7f9      	b.n	8005ef4 <memset+0x4>

08005f00 <_init>:
 8005f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f02:	bf00      	nop
 8005f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f06:	bc08      	pop	{r3}
 8005f08:	469e      	mov	lr, r3
 8005f0a:	4770      	bx	lr

08005f0c <_fini>:
 8005f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f0e:	bf00      	nop
 8005f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f12:	bc08      	pop	{r3}
 8005f14:	469e      	mov	lr, r3
 8005f16:	4770      	bx	lr
